{"aligent/CacheObserver": [], "10up/restricted-site-access": [], "10up/WP-Minions": [], "10up/distributor": [{"start": "npm install", "end": "if [ -n \"$AWS_ACCESS_KEY\" ]; then ./vendor/bin/wpsnapshots configure 10up --aws_key=$AWS_ACCESS_KEY --aws_secret=$SECRET_ACCESS_KEY --user_name=Travis --user_email=travis@10up.com; fi", "alternative end": "$HOME/.composer/cache/files"}], "10up/generator-wp-make": [{"start": "npm install codeclimate-test-reporter", "end": "./node_modules/.bin/codeclimate-test-reporter < ./coverage/lcov.info"}], "10up/nodeifywp": [], "10up/10up-experience": [], "10up/MU-Migration": [], "10XGenomics/vartrix": [], "10XGenomics/rust-boomphf": [], "1and1/cosmo": [], "peeringdb/peeringdb-py": [{"start": "python -m pip install -U pip", "end": "tox", "alternative end": "codecov"}], "20c/vaping": [{"start": "sudo apt-get install fping", "end": "tox", "alternative end": "codecov"}], "23andMe/seqseek": [{"start": "pip install tox", "end": "tox", "alternative end": "pypi"}], "Qihoo360/phptrace": [], "Qihoo360/zeppelin": [], "Qihoo360/nemo": [], "Qihoo360/pika": [{"start": "( cd protobuf-$PROTOBUF_VERSION && ./configure --prefix=/usr && make && sudo make install )", "end": "libsnappy-dev", "alternative end": "libprotobuf-dev"}], "Qihoo360/zeppelin-client": [], "Qihoo360/ngx_http_subrange_module": [{"start": "sudo apt-get update -qq", "end": "hg clone http://hg.nginx.org/nginx /tmp/nginx", "alternative end": "cp /tmp/nginx/auto/configure /tmp/nginx"}], "Qihoo360/wayne": [{"start": "cd src/frontend && npm install", "end": "npm run build", "alternative end": "npm run lint"}], "Qihoo360/evpp": [{"start": "sudo apt-get install libboost-all-dev -y", "end": "g++ --version", "alternative end": "cmake --version"}], "Qihoo360/QConf": [], "500tech/mimic": [{"start": "sudo apt-get update", "end": "wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb", "alternative end": "sudo dpkg -i google-chrome*.deb"}], "500tech/angular-tree-component": [], "500tech/angular-kick": [], "5monkeys/django-viewlet": [{"start": "pip install --upgrade pip", "end": "if [[ $TOXENV =~ coverage ]] && [ -n \"$STASH_SECRET\" ]; then stash pull $STASH_BOX -wc $(TOXENV= tox -l | wc -l); fi", "alternative end": "if [[ ! $TOXENV =~ coverage ]] || [ -n \"$STASH_SECRET\" ]; then tox; fi"}], "5monkeys/django-formapi": [{"start": "pip install --quiet \"Django>=\"$DJANGO\",<\"$DJANGO\".99\"", "end": "make lint test", "alternative end": "if [ \"$COVERAGE\" == \"true\" ]; then pip install --quiet python-coveralls; make coverage; coveralls; fi"}, {"start": "if [ \"$COVERAGE\" == \"true\" ]; then pip install --quiet python-coveralls; make coverage; coveralls; fi", "end": "hannes@5monkeys.se", "alternative end": "andrei@5monkeys.se"}], "5xRuby/daikichi": [{"start": "gem install -v 1.17.2 bundler", "end": "postgresql", "alternative end": "9.5"}], "Abc-Arbitrage/Disruptor-cpp": [{"start": "if [ \"$TRAVIS_OS_NAME\" == \"linux\" ]; then sudo apt-get install libboost-all-dev; fi", "end": "mkdir build && cd build && cmake -DCMAKE_CXX_COMPILER=$COMPILER -DCMAKE_BUILD_TYPE=Release -DDISRUPTOR_BUILD_TESTS=true .. && make VERBOSE=1 && make test", "alternative end": "master"}], "absolunet/nwayo": [], "Accenture/reactive-interaction-gateway": [], "Accenture/alexia": [], "AcklenAvenue/glee": [{"start": "npm install -g yarn", "end": "yarn", "alternative end": "cp ./src/config/loggly.js.sample ./src/config/loggly.js"}], "acsone/scobidoo": [{"start": "pip install acsoo", "end": "DB_NAME=${TRAVIS_JOB_ID}", "alternative end": "ADDONS_INST=$(acsoo addons list-depends)"}, {"start": "pip install -r requirements-test.txt", "end": "set -eo pipefail", "alternative end": "echo \"Installing $ADDONS_INST\""}], "acsone/click-odoo-contrib": [{"start": "pip install tox-travis", "end": "tox", "alternative end": "codecov"}], "AdaCore/langkit": [], "AdaCore/ada_language_server": [], "AdaCore/gnatcoll-core": [], "AdaCore/libadalang": [], "adjust/kafka_fdw": [{"start": "sudo make install", "end": "postgres=9.5", "alternative end": "9.5"}, {"start": "sudo make install", "end": "postgres=9.6", "alternative end": "9.6"}, {"start": "sudo make install", "end": "postgres=10", "alternative end": "10"}, {"start": "sudo make install", "end": "postgres=11", "alternative end": "sudo apt-get remove -y postgresql-9.2"}, {"start": "sudo apt-get install postgresql-11 postgresql-client-11 postgresql-server-dev-11", "end": "export PGPORT=5433", "alternative end": "sudo -u postgres psql  -c \"create user travis with superuser\";"}, {"start": "sudo make install", "end": "postgres=9.4", "alternative end": "True"}, {"start": "sudo bash -c \"cd librdkafka-0.11.1 && ./configure && make && make install\"", "end": "sudo cp /usr/local/lib/librdkafka.so* /lib/", "alternative end": "KAFKA_PRODUCER=$PWD/kafka/bin/kafka-console-producer.sh KAFKA_TOPICS=$PWD/kafka/bin/kafka-topics.sh make installcheck"}, {"start": "KAFKA_PRODUCER=$PWD/kafka/bin/kafka-console-producer.sh KAFKA_TOPICS=$PWD/kafka/bin/kafka-topics.sh make installcheck", "end": "cat regression.diffs"}], "adjust/rmq": [], "AdRoll/hologram": [], "traildb/traildb-python": [], "Adyen/adyen-dotnet-api-library": [], "Adyen/adyen-magento2": [], "Adyen/adyen-cse-web": [{"start": "npm install -g bower", "end": "bower install"}], "Adyen/adyen-cse-ios": [], "Adyen/adyen-barcoder-ios": [], "Adyen/adyen-java-api-library": [], "Adyen/adyen-php-api-library": [], "aerospike/aerospike-client-php": [{"start": "make install", "end": "../.travis/edit-php-ini.sh", "alternative end": "cp ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini tmp-php.ini"}], "aerospike/aerospike-client-java": [], "aerospike/aerospike-client-c": [{"start": "sudo apt-get install libssl-dev lua5.1 liblua5.1-0 liblua5.1-0-dev automake", "end": "sudo ln -s /usr/lib/x86_64-linux-gnu/liblua5.1.so.0 /usr/lib/liblua.so", "alternative end": "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib"}], "afterlogic/webmail-pro-8": [], "afterlogic/webmail-lite-8": [], "afterlogic/aurora-files": [], "AfterShip/aftership-sdk-nodejs": [], "AfterShip/eslint-config-aftership": [{"start": "npm install", "end": "npm run lint", "alternative end": "ubuntu-toolchain-r-test"}], "AfterShip/phone": [], "AfterShip/aftership-sdk-php": [], "RestyaPlatform/board": [{"start": "npm install", "end": "grunt pre-commit", "alternative end": "release"}], "ahrefs/devkit": [], "Bareflank/hypervisor": [], "williaster/data-ui": [{"start": "npm install -g codecov", "end": "cd ./packages/$PACKAGE", "alternative end": "npm install"}, {"start": "npm install", "end": "npm prune", "alternative end": "npm run lint"}], "airbnb/kafka-statsd-metrics2": [], "airbnb/binaryalert": [{"start": "pip3 install -r requirements.txt", "end": "tests/ci_tests.sh", "alternative end": "coveralls"}], "airbnb/SpinalTap": [{"start": "sudo apt-get install -y automake bison flex g++ git libboost-all-dev libevent-dev libssl1.0-dev libtool make pkg-config openjdk-8-jdk", "end": "./install-thrift-0.9.3.sh", "alternative end": "wget https://raw.githubusercontent.com/michaelklishin/jdk_switcher/master/jdk_switcher.sh"}], "airbnb/reair": [], "airbnb/aerosolve": [{"start": "sudo apt-get update -qq", "end": "wget https://archive.apache.org/dist/thrift/0.9.1/thrift-0.9.1.tar.gz", "alternative end": "tar xfz thrift-0.9.1.tar.gz"}, {"start": "cd thrift-0.9.1 && ./configure --without-php --without-php_extension --without-cpp --without-c_glib --without-python --without-ruby --without-go --without-erlang --without-java && sudo make install && cd ..", "end": "test \"${TRAVIS_TAG}\" || ./gradlew check", "alternative end": "test \"${TRAVIS_TAG}\" && test \"${TRAVIS_JDK_VERSION}\" = 'oraclejdk8' && ./gradlew --info bintrayUpload && ./publish-notify.sh\n"}], "akeneo/api-php-client": [], "akveo/ng2-smart-table": [], "akveo/blur-admin": [{"start": "npm install -g gulp", "end": "gulp build"}], "akveo/ngx-admin": [], "akveo/nebular": [{"start": "npm install", "end": "mkdir -p $LOGS_DIR", "alternative end": "./scripts/ci/travis-script.sh"}], "Activiti/Activiti": [], "Activiti/activiti-modeling-app": [{"start": "not valid", "stop": "not valid"}], "Alfresco/alfresco-remote-api": [], "Activiti/activiti-examples": [], "algolia/algoliasearch-client-javascript": [], "algolia/algolia-sitemap": [], "algolia/algoliasearch-django": [{"start": "pip install --upgrade pip", "end": "tox", "alternative end": "2.7"}], "algolia/algoliasearch-laravel": [], "algolia/autocomplete.js": [], "algolia/react-algoliasearch-helper": [], "algolia/docsearch": [], "algolia/algoliasearch-jekyll": [], "algolia/faux-jax": [], "algolia/vue-instantsearch-examples": [], "algolia/jekyll-algolia-example": [], "algolia/react-nouislider": [{"start": "npm install", "end": "npm test", "alternative end": "master"}], "algolia/eslint-config-algolia": [], "algolia/npm-search": [], "algolia/docsearch-scraper": [{"start": "sudo apt-get update -y", "end": "docker", "alternative end": "touch .env"}, {"start": "pip install pipenv", "end": "pipenv install --dev", "alternative end": "pipenv run pylint scraper cli deployer"}], "algolia/sup3rS3cretMes5age": [], "algolia/search-bundle": [], "tecstack/forward": [{"start": "pip install -r requirements.txt", "end": "python setup.py install", "alternative end": "flake8 ./ --config=protocol/flake8"}], "25th-floor/spected": [], "25th-floor/revalidation": [], "2ndquadrant-it/puppet-barman": [], "2ndquadrant-it/barman": [{"start": "travis_retry pip install tox-travis", "end": "tox"}], "42BV/beanmapper": [], "frees-io/freestyle": [{"start": "gem update --system", "end": "if [ \"$SCALAENV\" = \"jvm\" ]; then sbt ++$TRAVIS_SCALA_VERSION validateJVM; elif [ \"$SCALAENV\" = \"js\" ]; then sbt ++$TRAVIS_SCALA_VERSION validateJS; elif [ \"$FREESBUILD\" = \"docs\" ]; then sbt ++$TRAVIS_SCALA_VERSION docs/tut; else echo \"You might not be invited to the party\"; fi", "alternative end": "bash <(curl -s https://codecov.io/bash)"}], "frees-io/freestyle-kafka": [{"start": "gem update --system", "end": "sbt ++$TRAVIS_SCALA_VERSION orgScriptCI", "alternative end": "bash <(curl -s https://codecov.io/bash)"}], "frees-io/freestyle-cassandra": [], "frees-io/iota": [], "99xt/serverless-dynamodb-local": [{"start": "npm install --save-dev serverless-offline", "end": "serverless create --template aws-nodejs", "alternative end": "cd .."}, {"start": "travis_retry npm install", "end": "cd test/sample-template", "alternative end": "sls dynamodb install"}], "superdesk/superdesk-core": [{"start": "sudo apt-get -y install libxml2-dev libxmlsec1-dev libxmlsec1-openssl", "end": "wget http://launchpadlibrarian.net/433926958/libmagic-mgc_5.37-3_amd64.deb", "alternative end": "wget http://launchpadlibrarian.net/433926961/libmagic1_5.37-3_amd64.deb"}], "ableton/aqt-stylesheets": [{"start": "brew install qt5", "end": "export PATH=/usr/local/opt/qt5/bin:$PATH", "alternative end": "mkdir build && cd build"}], "drutiny/drutiny": [], "actiontech/dble-docs-cn": [{"start": "sudo apt-get install -y calibre fonts-arphic-gbsn00lp", "end": "gitbook install", "alternative end": "gitbook build"}], "actiontech/dble": [], "activebridge/lazybox": [], "abecms/abecms": [{"start": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]] && [[ \"$MODE\" == \"e2e\" ]]; then sudo apt-get update ; fi", "end": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]] && [[ \"$MODE\" == \"e2e\" ]]; then wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb; fi", "alternative end": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]] && [[ \"$MODE\" == \"e2e\" ]]; then sudo dpkg -i google-chrome*.deb; fi"}, {"start": "if [[ $TRAVIS_OS_NAME == \"osx\" ]] && [[ \"$MODE\" == \"e2e\" ]]; then brew install homebrew/science/opencv; fi", "end": "npm update", "alternative end": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]] && [[ \"$MODE\" == \"e2e\" ]]; then npm run install-selenium; fi"}], "AdguardTeam/FiltersRegistry": [], "AdguardTeam/AdguardBrowserExtension": [], "AdguardTeam/AdguardAssistant": [], "AdguardTeam/PopupBlocker": [], "AdguardTeam/dnsproxy": [], "ingadhoc/product": [], "ingadhoc/odoo-argentina": [], "ingadhoc/odoo-web": [], "ingadhoc/account-payment": [], "Adobe-Marketing-Cloud/aem-sample-we-retail": [], "adobe/brackets-registry": [], "adobe/brackets": [{"start": "npm install -g grunt-cli", "end": "https://webhooks.gitter.im/e/9c767842144fd24d26a5", "alternative end": "change"}], "adobe-photoshop/generator-core": [{"start": "npm install -g grunt-cli", "end": "grunt test"}], "adobe-photoshop/generator-assets": [{"start": "npm install -g grunt-cli", "end": "grunt build test"}], "adobe-apiplatform/api-gateway-request-validation": [], "apache/cordova-lib": [{"start": "npm install", "end": "npm run cover", "alternative end": "npm run report-coverage"}], "adobe-type-tools/afdko": [{"start": "CIBW_BEFORE_BUILD=\"pip install --disable-pip-version-check -U -q pip\"", "end": "osx", "alternative end": "xcode9.4"}, {"start": "if [[ $TRAVIS_TAG ]]; then\n  $PYTHON -m pip install twine\n  $PYTHON -m twine upload dist/*.whl\n  if [[ $TRAVIS_OS_NAME == \"osx\" ]]; then\n    $PYTHON setup.py sdist\n    $PYTHON -m twine upload dist/*.tar.gz\n  fi\nfi\n", "end": "releases", "alternative end": "iTJsPpez3q297UhkRiSMG+y4IDON1Wyr1a1nOcsSbkR2siUI1RV1J1A8hl6yQkUust2XEXj9+VHAGi4NaHZY+VMunsLIW0yhuDLuUvm4toWmDoCQWdNpO3g/+d+cfg6ZvDuUU1YMfbCcG4vOD+qmLOj6IKyzGuvulFJe5Ad4PZ0FNRDjeo0P8vvUSVfAu7ZV80kPLktsXaqCxRdL1gmhpoDzWPBaVrqNrs/rWI595ZxBHDCPSwFknl+vwN2dQoEneC0uxa/4wvoaP0zkYXBsP0XaOB2jdaEgzHzH+4bC1hLsXggYol3MPp04rhL58AMUoRNTAnuhg2H7CZpFmHE4ZxfRr5bVdEVVA66i1a9+tlRlEilKbeWOHuweYMSut5MEdzwgFi0HmgFAmL8uj5nJsi/RmHmbmTUAoCmzNZMGHEq5WTw1zhw5QLs0eTWDzNjF4cHarb5YCZPd8Myu1OO6RKfxIliRnm0sPkzkRKbRNsUWn2XnqyhgqUaZPfaTDANXFnCEZuvWonhsRzMDMEp6MHOLk6T9hFBLn7ZUCwz+n3mORkCyjdvJj5TlQuudVZEfwgPEh+wpPj4sZCoRKT830H5GJ2mFF58vVDkE4NCJKDIsj/F8rC8lVm6gep0eC7wfU+tFPf3JqBoAiNQMQgPlYFOq8gwPQzjB5vYItL8D7gU="}], "Adobe-Marketing-Cloud/marketing-cloud-php-sdk": [], "apache/jackrabbit-filevault": [], "Affectiva/cpp-sdk-samples": [], "agilie/AGImageControls": [{"start": "gem update cocoapods", "end": "pod install --project-directory=Example", "alternative end": "set -o pipefail"}], "agilie/DisPlayers-Audio-Visualizers": [{"start": "gem update cocoapods", "end": "pod install --project-directory=Example", "alternative end": "set -o pipefail"}], "agilie/AGLocationDispatcher": [{"start": "gem install xcpretty --no-rdoc --no-ri --no-document --quiet", "end": "pod lib lint --quick"}], "agilie/AGCircularPicker": [{"start": "gem update cocoapods", "end": "set -o pipefail", "alternative end": "xcodebuild -workspace Example/AGCircularPicker.xcworkspace -scheme AGCircularPicker-Example -destination \"OS=10.3.1,name=iPhone 7 Plus\" -configuration Debug ONLY_ACTIVE_ARCH=NO build | xcpretty -c;"}], "agiliq/Django-parsley": [{"start": "pip install $DJANGO", "end": "coverage run setup.py test", "alternative end": "3.6"}], "agiliq/django-socialnews": [{"start": "pip install -r requirements.txt --use-mirrors", "end": "python socialnews/manage.py test news"}], "agiliq/sendgrid-eventhooks": [{"start": "pip install pep8", "end": "pep8 .", "alternative end": "pyflakes ."}], "agiliq/django-pastebin": [{"start": "pip install -r requirements.txt --use-mirrors", "end": "python manage.py test pastebin"}], "agiliq/django-graphos": [{"start": "pip install -r demo_project/requirements.txt", "end": "cd demo_project && python manage.py test graphos demo --settings=demo_project.settings.test", "alternative end": "mongodb"}], "agiliq/agiliq": [{"start": "pip install -r requirements.txt --allow-all-external --download-cache $HOME/.pip-cache", "end": "-DJANGO_SECRET_KEY=travis", "alternative end": "./lint.sh"}], "agiliq/merchant": [{"start": "pip install -r example/requirements.txt", "end": "XEuV9bV2rIEI05t+0ECUM2U0cJwxPMDJNkUkvKYnssuswvqv3hnt9zKrJD3ILHwK2l7XHiRLTEb0iwBEEIkxhMsOAcV+MRs+Tx4jxwRNK2o0g6Svci2yRzF/P+xT/XMMttLafbGSxfPhcpy75PRRSgDloDX6FIjlAkkEt3DN90Y=", "alternative end": "aLAyjUyuHluVOUvKXnC3fPpoEd8i/rvN6Z4jnm8/G5TsAwMUYZkzhlLRIPUqJjFNG160NGED73zo7FOpS2Aj1iAgJPXRn5lnjnxMi/jsglgfY/0EXyMv/cLv2vHardoQSJqSLn1npFOZWy0DUlmwOOlT+gKetPXM0gXpCkbmcv8="}], "agiliq/django-blogango": [{"start": "pip install -r requirements.txt --use-mirrors", "end": "agiliq:4rM97fcM3RrHNA3EssNXYG3V", "alternative end": "python example/manage.py test blogango.tests"}], "agiliq/django-secure-login": [{"start": "pip install --use-mirrors $DJANGO coverage coveralls pep8 --download-cache $HOME/.pip-cache", "end": "coverage run setup.py test", "alternative end": "pep8 --ignore=E501 secure_login/"}], "FreeFem/FreeFem-doc": [{"start": "sudo apt update", "end": "git clone https://github.com/FreeFem/FreeFem-parser-pygments.git ~/pygments", "alternative end": "sudo cp ~/pygments/freefem.py /usr/local/lib/python2.7/dist-packages/pygments/lexers/"}], "fkanehiro/hrpsys-base": [], "mynlp/jigg": [{"start": "pip install --upgrade pip", "end": "./.checker/scripts/install-annotators.sh", "alternative end": ".checker/scripts/run-test.sh"}], "akamai/AkamaiOPEN-edgegrid-golang": [], "Akretion/ooor": [], "Akretion/angular-odoo": [], "Akretion/pywebdriver": [{"start": "pip install virtualenv", "end": "virtualenv $HOME/pywebdriver-venv", "alternative end": "source $HOME/pywebdriver-venv/Scripts/activate"}, {"start": "pip install -r windows/requirements.txt", "end": "PATH=/c/Python37:/c/Python37/Scripts:$PATH", "alternative end": "if [ \"$TRAVIS_OS_NAME\" = \"windows\" ]; then pyinstaller.exe windows/pywebdriver.spec ; fi"}], "aatarasoff/spring-thrift-starter": [], "alfa-laboratory/akita": [{"start": "sudo apt-get install -y unzip", "end": "mkdir -p $TRAVIS_BUILD_DIR/drivers", "alternative end": "unzip chromedriver_linux64.zip -d $TRAVIS_BUILD_DIR/drivers"}], "uxcore/uxcore-form": [{"start": "npm install", "end": "if [ \"$TEST_TYPE\" = test ]; then\n  npm test\nelse\n  npm run $TEST_TYPE\nfi\n", "alternative end": "TEST_TYPE=test"}], "aliyun/aliyun-oss-c-sdk": [{"start": "sudo apt-get update", "end": "wget --quiet https://github.com/michaelrsweet/mxml/releases/download/release-2.9/mxml-2.9.tar.gz", "alternative end": "tar zxf mxml-2.9.tar.gz"}, {"start": "./configure && make && sudo make install", "end": "cd -", "alternative end": "pip install --user cpp-coveralls"}, {"start": "pip install --user cpp-coveralls", "end": "cmake -DCMAKE_BUILD_TYPE=Coverage .", "alternative end": "make"}], "aliyun/aliyun-tablestore-python-sdk": [{"start": "pip install requests nose nose-cov python-coveralls protobuf urllib3 certifi crcmod future six", "end": "./setup.py install", "alternative end": "cd tests"}], "uxcore/uxcore-tinymce": [{"start": "npm install", "end": "if [ \"$TEST_TYPE\" = test ]; then\n  npm test\nelse\n  npm run $TEST_TYPE\nfi\n", "alternative end": "TEST_TYPE=test"}], "fieteam/fie": [], "aliqin/atui": [], "node-modules/mini-logger": [], "aliyun/fc-java-sdk": [], "alibaba/AliOS-Things": [{"start": "sudo apt install -qq scons", "end": "sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 60", "alternative end": "pwd"}, {"start": "pip install aos-cube", "end": "cd ${TRAVIS_BUILD_DIR}", "alternative end": "git clone https://github.com/Cheng-SG/kconfig-frontends-linux.git build/kconfig"}], "aliyun-node/agentx": [], "aliyun/aliyun-cli": [{"start": "sudo apt-get install -y jq", "end": "make build", "alternative end": "sudo cp out/aliyun /usr/local/bin"}], "eggjs/egg-sequelize": [], "alibaba/Thera": [{"start": "npm install", "end": "sh travis_before_script.sh", "alternative end": "script/build"}], "aliyun/ossutil": [], "recharts/react-smooth": [], "aliyun/aliyun-tablestore-go-sdk": [], "aliyun/aliyun-log-ios-sdk": [], "eggjs/egg-mock": [{"start": "npm install npminstall -g", "end": "sed -i.bak '/\"egg\":/d' package.json", "alternative end": "npminstall -d"}], "alibaba/nacos": [], "alibaba/HandyJSON": [{"start": "gem install xcpretty --no-document --quiet", "end": "set -o pipefail", "alternative end": "xcodebuild -version"}], "aliyun/aliyun-log-python-sdk": [{"start": "if [[ $TRAVIS_PYTHON_VERSION == 2.6 ]]; then pip install -r requirements-py26.txt; fi", "end": "python tests/ut/test_util.py", "alternative end": "python tests/sample.py"}], "apache/incubator-weex": [{"start": "# install android lint \nif [[ (\"$TEST_SUITE\" = \"static_code_analysis\") && (\"${ANDROID_LINT}\" = \"true\") ]]; then\n  apt-get install rubygems\n  gem install bundler\n  bundle install\nfi\n\n# install oclint\nif [[ (\"$TEST_SUITE\" = \"static_code_analysis\") && (\"${OCLINT}\" = \"true\") ]]; then\n  brew cask uninstall oclint\n  brew tap oclint/formulae\n  brew install oclint\nfi\n", "end": "case $TEST_SUITE in\n  \"android\") \n    case $ABI in\n      \"armeabi-v7a\" )\n        GRADLE_ABI=\"-PsupportArmeabi-v7a=true -PsupportArm64-v8a=false -PsupportX86=false -PsupportX86_64=false\"\n        ;;\n      \"arm64-v8a\" )\n        GRADLE_ABI=\"-PsupportArmeabi-v7a=false -PsupportArm64-v8a=true -PsupportX86=false -PsupportX86_64=false\" \n        ;;\n      \"x86\" )\n        GRADLE_ABI=\"-PsupportArmeabi-v7a=false -PsupportArm64-v8a=false -PsupportX86=true -PsupportX86_64=false\"\n        ;;\n      \"x86_64\" )\n        GRADLE_ABI=\"-PsupportArmeabi-v7a=false -PsupportArm64-v8a=false -PsupportX86=false -PsupportX86_64=true\"\n        ;;\n      \"*\" )\n        GRADLE_ABI=\"\"\n        ;;\n    esac\n    if npm run danger -- ci --dangerfile ./dangerfile-android.js | grep -q \"hasAndroidFile\" ; then\n      cd android\n      ./gradlew clean assembleRelease --quiet -PbuildRuntimeApi=true ${GRADLE_ABI} -PapachePackageName=\"false\" || exit 1\n      ./gradlew :weex_sdk:assembleRelease --quiet -PbuildRuntimeApi=true ${GRADLE_ABI} -PapachePackageName=\"true\" || exit 1\n      if [[ \"$ABI\" != \"x86_64\" ]]; then\n        ./gradlew assembleRelease --quiet ${GRADLE_ABI} -PbuildRuntimeApi=false -Pjsc_url=\"https://raw.githubusercontent.com/apache/incubator-weex/release/0.26/android/sdk/weex_sdk-0.26.0.aar\" -Paar_name=\"weex_sdk\" -PJSInterpolatorName=\"JavaScriptCore\" -PapachePackageName=\"false\" || exit 1\n        ./gradlew :weex_sdk:assembleRelease --quiet  ${GRADLE_ABI} -PbuildRuntimeApi=false -Pjsc_url=\"https://raw.githubusercontent.com/apache/incubator-weex/release/0.26/android/sdk/weex_sdk-0.26.0.aar\" -Paar_name=\"weex_sdk\" -PJSInterpolatorName=\"JavaScriptCore\" -PapachePackageName=\"true\" || exit 1\n      fi\n    fi\n    ;;\n  \"jsfm\" )\n    npm run danger -- ci -i jsfm --dangerfile ./dangerfile-jsfm.js\n    ;;\n  \"danger\" )\n    npm run danger -- ci -i danger --dangerfile ./dangerfile.js\n    ;;\n  \"ios\" )\n    if npm run danger -- ci --dangerfile ./dangerfile-ios.js | grep -q \"hasIosFile\" ; then\n      # build WeexSDK and run WeexSDKTests\n      xcodebuild -quiet -project ios/sdk/WeexSDK.xcodeproj test -scheme WeexSDKTests CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO -destination \"platform=iOS Simulator,name=iPhone 6\" || exit 1\n      # build WeexDemo and run WeexDemo test\n      cd weex-playground/ios && mkdir tmp && mv * tmp;cd tmp\n      xcodebuild -quiet -workspace WeexDemo.xcworkspace test -scheme WeexDemo CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO -destination \"platform=iOS Simulator,name=iPhone 6\" || exit 1\n    fi\n    ;;\nesac\n\nif [[ (\"$TEST_SUITE\" = \"static_code_analysis\") && (\"${OCLINT}\" = \"true\") ]]; then\n  if npm run danger -- ci --dangerfile ./dangerfile-static-check.js | grep -q \"hasCFile\" ; then\n    echo \"hasCFile\"\n    cd ios/sdk && xcodebuild | xcpretty -r json-compilation-database -o compile_commands.json\n    oclint-json-compilation-database oclint_args -- \\\n      -disable-rule=ShortVariableName \\\n      -disable-rule=LongLine \\\n      -disable-rule=LongMethod \\\n      -disable-rule=HighNcssMethod \\\n      -disable-rule=LongVariableName \\\n      -disable-rule=HighCyclomaticComplexity \\\n      -disable-rule=HighNPathComplexity \\\n      -disable-rule=UnusedLocalVariable \\\n      -disable-rule=DoubleNegative \\\n      -disable-rule=MultipleUnaryOperator \\\n      -disable-rule=DeepNestedBlock \\\n      -disable-rule=AssignIvarOutsideAccessors \\\n      -disable-rule=BitwiseOperatorInConditional \\\n      -max-priority-1=15000 \\\n      -max-priority-2=15000 \\\n      -max-priority-3=15000 > oclint.log\n    export TITLE=\"OCLint Result\"\n    cd ../../ && npm run danger -- ci -i oclint --dangerfile ./dangerfile-output.js || exit 1\n  fi\nfi \n\nif [[ (\"$TEST_SUITE\" = \"static_code_analysis\") && (\"${ANDROID_LINT}\" = \"true\") ]]; then\n  if npm run danger -- ci --dangerfile ./dangerfile-static-check.js | grep -q \"hasAndroidFile\" ; then\n    echo \"hasAndroidFile\"\n    cd android\n    ./gradlew :weex_sdk:lintLegacyRelease -PapachePackageName=\"false\" --quiet\n    ./gradlew :weex_sdk:lintApacheRelease -PapachePackageName=\"true\" --quiet\n    export TITLE=\"AndroidLint Result\"\n    cd ../ && npm run danger -- ci -i androidlint --dangerfile ./dangerfile-output.js || exit 1\n  fi\nfi\n", "alternative end": "False"}], "vizzle/VZFlexLayout": [], "alibaba/fastjson": [{"start": "pip install --user codecov", "end": "codecov", "alternative end": "appveyor"}], "aliyun/aliyun-oss-java-sdk": [], "vizzle/MIST": [{"start": "gem install cocoapods", "end": "pod setup --silent", "alternative end": "pod repo update --silent"}], "algolia/jekyll-algolia": [], "algolia/expect-jsx": [], "algolia/scout-extended": [], "denverdino/aliyungo": [], "algolia/atom-autocomplete-module-import": [], "alibaba/terraform-provider": [], "aliyun/fc-python-sdk": [{"start": "pip install requests nose nose-cov python-coveralls", "end": "nosetests test/ --with-cov", "alternative end": "coveralls"}], "algolia/places": [], "allegro/mesos-executor": [], "xtemplate/xtemplate": [], "javers/javers": [], "allegro/embedded-elasticsearch": [], "alliedmodders/sourcemod": [], "allegro/akubra": [], "aliyun/aliyun-oss-go-sdk": [], "cloudfoundry-community/gogobosh": [], "OpenMatrixLanguage/OpenMatrix": [], "AlphaNodes/additionals": [], "dt-fe/weekly": [], "PBSPro/pbspro": [], "asc-lab/dotnetcore-microservices-poc": [], "AmadeusITGroup/sonar-stash": [], "AmadeusITGroup/JumpSSH": [{"start": "pip install tox-travis coveralls", "end": "if [ -n \"${TOX_ENV}\" ]; then tox -e $TOX_ENV; else tox; fi", "alternative end": "./.travis/runSonarQubeAnalysis.sh"}], "AmadeusITGroup/kubervisor": [], "AmadeusITGroup/Redis-Operator": [{"start": "sudo apt-get install -y socat", "end": "docker run --rm jpetazzo/nsenter cat /nsenter > /tmp/nsenter && chmod +x /tmp/nsenter", "alternative end": "sudo cp /tmp/nsenter /usr/local/bin"}], "AmadeusITGroup/HttpSessionReplacer": [], "GPUOpen-ProfessionalCompute-Libraries/amdovx-modules": [{"start": "sudo apt update", "end": "sudo apt --yes install cmake git wget unzip libnuma-dev", "alternative end": "wget -qO - http://repo.radeon.com/rocm/apt/debian/rocm.gpg.key | sudo apt-key add -"}, {"start": "sudo apt update", "end": "docker pull kiritigowda/mivision-test-docker", "alternative end": "docker run -it -d --name mivision --network host kiritigowda/mivision-test-docker bash"}], "amida-tech/mllp": [{"start": "npm install -g grunt-cli", "end": "grunt", "alternative end": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec --recursive --timeout 10000 --exit && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage"}], "amd/furious.js": [{"start": "sudo apt-get update -qq", "end": "git clone git://github.com/martine/ninja.git /tmp/ninja", "alternative end": "pushd /tmp/ninja"}, {"start": "npm install -g grunt-cli", "end": "grunt", "alternative end": "node_js"}], "amida-tech/blue-button": [{"start": "npm install -g grunt-cli", "end": "bower install", "alternative end": "grunt"}], "amida-tech/DRE": [{"start": "npm install -g npm", "end": "bower install", "alternative end": "webdriver-manager update --firefox"}], "amida-tech/hl7": [{"start": "npm install -g grunt-cli@0.1.x", "end": "grunt", "alternative end": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec --recursive --timeout 10000 && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage"}], "amida-tech/PHIX": [{"start": "npm install -g grunt-cli@0.1.x", "end": "cd server", "alternative end": "npm install --quiet"}, {"start": "npm install --quiet", "end": "node server.js &", "alternative end": "sleep 3"}, {"start": "npm install --quiet", "end": "mongodb", "alternative end": "redis"}], "aws/aws-sdk-java-v2": [], "getamis/Istanbul-tools": [], "amplify-education/serverless-vpc-discovery": [{"start": "npm install", "end": "npm run lint", "alternative end": "bash test/versionCheck.sh $TRAVIS_BRANCH $TRAVIS_PULL_REQUEST"}], "flame/blis": [{"start": "if [ -n \"$PACKAGES\" ]; then sudo apt-get install -y $PACKAGES; fi", "end": "ubuntu-toolchain-r-test", "alternative end": "gcc-6"}], "amplify-education/serverless-domain-manager": [{"start": "npm install", "end": "npm run lint", "alternative end": "npm test"}], "amzn/ion-java": [], "amzn/ion-c": [], "amplify-education/serverless-log-forwarding": [{"start": "npm install", "end": "npm run lint", "alternative end": "bash scripts/versionCheck.sh $TRAVIS_BRANCH $TRAVIS_PULL_REQUEST"}], "aws/aws-codedeploy-agent": [], "analogdevicesinc/libad9361-iio": [], "aws/amazon-ssm-agent": [], "aws/aws-toolkit-vscode": [{"start": "npm install", "end": "npm run vscode:prepublish", "alternative end": "npm test"}], "BolajiOlajide/ng-faker": [{"start": "npm install", "end": "npm test", "alternative end": "cat ./coverage/**/lcov.info | ./node_modules/coveralls/bin/coveralls.js"}], "andela-sjames/paystack-python": [{"start": "pip install -r requirements.txt", "end": "coverage run --source paystackapi -m unittest discover", "alternative end": "coveralls"}], "analogdevicesinc/no-OS": [], "analogdevicesinc/EVAL-ADICUP360": [], "aws/amazon-ecs-cni-plugins": [], "aws/amazon-ecs-agent": [], "aws/aws-sdk-js-v3": [], "awslabs/deequ": [], "amzn/xfer": [{"start": "cd xfer-ml\nif [[ $TRAVIS_OS_NAME == 'osx' ]]; then\n  # Get latest version of brew\n  brew update\n  # Recommended for pyenv\n  brew outdated openssl || brew upgrade openssl\n  brew outdated readline || brew upgrade readline\n  # Update pyenv\n  brew outdated pyenv || brew upgrade pyenv\n  # Install specified Python version\n  pyenv install $PYTHON\n  # Set environment variables\n  export PYENV_VERSION=$PYTHON\n  export PATH=\"/Users/travis/.pyenv/shims:${PATH}\"\n  # Confirm versions\n  python --version\n  pip -V\n  pip install --upgrade pip\n  if [ $PYTHON == 3.4.4 ]; then\n    # GPy requires numpy during setup for Python versions less than 3.5\n    pip install numpy\n  fi\nfi\n", "end": "echo 'backend: Agg' > matplotlibrc", "alternative end": "pip freeze"}, {"start": "sudo apt-get install graphviz", "end": "travis_wait 40 pytest --durations=0 --notebook tests/notebook/test_notebooks.py", "alternative end": "sudo apt-get install graphviz"}, {"start": "sudo apt-get install graphviz", "end": "travis_wait 40 pytest --durations=0 --notebook_hpo tests/notebook/test_notebooks.py", "alternative end": "3.6"}, {"start": "sudo apt-get install graphviz", "end": "travis_wait 40 pytest --durations=0 --notebook_gluon tests/notebook/test_notebooks.py", "alternative end": "3.6"}], "firecracker-microvm/firecracker-containerd": [], "AntVis/g2-react": [], "AntVis/f2": [{"start": "npm install", "end": "if [ \"$TEST_TYPE\" = ci ]; then\n  npm run ci\nfi\n", "alternative end": "trusty"}], "aws-quickstart/quickstart-amazon-eks": [{"start": "pip install pre-commit", "end": "pre-commit run --all-files"}], "AntVis/hierarchy": [{"start": "npm install", "end": "if [ \"$TEST_TYPE\" = ci ]; then\n  npm run ci\nfi\n"}], "AntVis/data-set": [{"start": "npm install", "end": "if [ \"$TEST_TYPE\" = ci ]; then\n  npm run ci\nfi\n"}], "AntVis/g6": [{"start": "npm install", "end": "npm run ci && cat ./coverage/lcov.info | rm -rf ./coverage"}], "AnyChart/AnyChart-NodeJS": [], "aws/aws-xray-sdk-go": [], "AntVis/g2-brush": [{"start": "npm install", "end": "if [ \"$TEST_TYPE\" = ci ]; then\n  npm run ci\nfi\n"}], "AnyChart/AnyChart": [{"start": "pip install requests --user --upgrade", "end": "./build.py libs", "alternative end": "git clone git@github.com:AnyChart/travis-scripts.git out/travis --depth 1"}], "AntVis/g": [{"start": "npm install", "end": "if [ \"$TEST_TYPE\" = ci ]; then\n  npm run ci\nfi\n"}], "aws/aws-iot-device-sdk-embedded-C": [], "aporeto-inc/netlink-go": [{"start": "sudo apt-get install conntrack", "end": "go mod download", "alternative end": "go list -m all || true"}], "aporeto-inc/trireme-kubernetes": [], "aporeto-inc/kubepox": [], "velvia/filo": [], "aws/amazon-ecs-cli": [], "rmpowell77/LIAW_2017_param": [], "filodb/FiloDB": [], "appier/h5sparse": [{"start": "pip install -U pip wheel", "end": "tox"}], "awsdocs/aws-doc-sdk-examples": [], "amzn/oss-contribution-tracker": [], "aws/aws-sdk-php": [], "aws/aws-sdk-java": [], "AppLozic/Applozic-iOS-SDK": [], "AppLozic/Applozic-Android-SDK": [{"start": "pip install -r ./scripts/requirements.txt --user", "end": "platform-tools", "alternative end": "tools"}], "appnexus/ankh": [], "appscode/osm": [], "amzn/hawktracer": [{"start": "pip install --user codecov", "end": "sudo add-apt-repository ppa:deadsnakes/ppa -y", "alternative end": "sudo apt-get update -q"}, {"start": "sudo apt-get update -q", "end": "sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 10", "alternative end": "cmake -DENABLE_PYTHON_BINDINGS=ON -DENABLE_ALLOC_HOOKS_FEATURE=ON -DBUILD_STATIC_LIB=ON -DENABLE_POSITION_INDEPENDENT_CODE=ON ."}, {"start": "sudo apt-get update -q", "end": "sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 10", "alternative end": "cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_ASAN=ON -DENABLE_BENCHMARKS=ON -DENABLE_CODE_COVERAGE=ON -DENABLE_EXAMPLES=ON -DENABLE_TESTS=ON ."}], "aws/sagemaker-containers": [{"start": "pip install tox-travis codecov", "end": "tox test/unit", "alternative end": "codecov"}], "apptension/react-boilerplate": [], "awslabs/amazon-kinesis-client": [], "appunite/AndroidFFmpeg": [], "appunite/mockery": [], "jacek-marchwicki/rx-java-extensions": [], "aptible/supercronic": [], "APSL/kaneda": [{"start": "sudo apt-get update", "end": "rethinkdb --daemon", "alternative end": "sudo service influxdb start"}], "APSL/docker-thumbor": [], "APSL/react-native-button": [], "aws/awsmobile-cli": [{"start": "npm install", "end": "npm test && node node_modules/.bin/codecov || exit 0;"}], "aws/aws-xray-sdk-java": [], "APSL/puput": [{"start": "pip install tox", "end": "docker-compose -f tests/testapp/docker-compose.yaml up -d firefox hub", "alternative end": "tox"}], "APSL/react-native-keyboard-aware-scroll-view": [], "APSL/react-native-version-number": [], "APSL/redux-i18n": [], "Apstra/aeon-ztps": [{"start": "pip install tox coveralls pytest", "end": "tox", "alternative end": "TOXENV=py27"}], "arachnys/athenapdf": [], "arangodb/arangodb": [], "arangodb/arangodb-php": [], "qgrid/ng2": [], "arangodb-helper/arangodb": [], "arangodb/aqbjs": [], "arangodb/arangodb-java-driver-async": [], "arangodb/go-driver": [], "awslabs/amazon-kinesis-producer": [{"start": "sudo apt-get update", "end": "pip3 --version", "alternative end": "pip3 install --user awscli"}, {"start": "pip3 install --user awscli", "end": "mkdir -p ~/.aws", "alternative end": "cat > ~/.aws/credentials << EOF\n[default]\naws_access_key_id = $AWS_ACCESS_KEY_ID\naws_secret_access_key = $AWS_SECRET_ACCESS_KEY\n"}], "arangodb/velocypack": [], "archilogic-com/3dio-js": [{"start": "npm install", "end": "node_modules", "alternative end": "test"}], "arangodb/kube-arangodb": [], "arangodb/arangodb-java-driver": [], "aak74/bx-data": [], "arduino-libraries/MKRGSM": [], "aws-quickstart/taskcat": [{"start": "pip install -r travis-specific-requirements.txt", "end": "cd /tmp", "alternative end": "GIT_SECRETS_RELEASE=1.3.0"}, {"start": "sudo make install", "end": "cd ${TRAVIS_BUILD_DIR}", "alternative end": "pip install ."}, {"start": "pip install .", "end": "pre-commit run --all-files", "alternative end": "[Version Bump] Check/Create Release PR"}, {"start": "pip install bump2version\nHUB_DIST=linux-amd64\nHUB_VERSION=$(curl -w \"%{url_effective}\\n\" -I -L -s -S github.com/github/hub/releases/latest -o /dev/null | awk -F'releases/tag/v' '{ print $2 }')\ncurl \"https://github.com/github/hub/releases/download/v${HUB_VERSION}/hub-${HUB_DIST}-${HUB_VERSION}.tgz\" -L | tar xvz && sudo ./hub-${HUB_DIST}-${HUB_VERSION}/install && rm -r ./hub-${HUB_DIST}-${HUB_VERSION}\n", "end": "mkdir -p ~/.config/taskcat", "alternative end": "echo -e \"github.com:\\n- user: taskcat-ci\\n  oauth_token: ${GHT}\\n  protocol: https\" > ~/.config/hub\n"}, {"start": "pip install bump2version", "end": "export UPSTREAM_PYPI_VERSION=$(python -c \"from packaging import version; import requests; versions = requests.get('https://pypi.org/pypi/taskcat/json').json()['releases'].keys(); versions = [version.Version(x) for x in versions]; print(sorted(versions, reverse=True)[0])\")", "alternative end": "echo \"${UPSTREAM_PYPI_VERSION}\" | egrep -i '\\.dev[0-9]{1,4}'\nif [[ $? -eq 0 ]]; then\n  echo \"Bumping the development version\"\n  # Replacing VERSION (ex: 0.9.12) with upstream value (ex: 0.9.13.dev0)\n  sed -i -e \"s,$(cat VERSION),${UPSTREAM_PYPI_VERSION},g\" .bumpversion.cfg\n  sed -i -e \"s,$(cat VERSION),${UPSTREAM_PYPI_VERSION},g\" VERSION\n  # Now bumping 0.9.13.dev0 -> 0.9.13.dev1\n  bumpversion --allow-dirty --no-tag --no-commit build\n  export NEW_DEV_BUILD=true\nelse\n  # v0.9.0 -> v0.9.1.dev0\n  bumpversion --allow-dirty --no-tag --no-commit patch\nfi\n"}], "Arello-Mobile/confluence-publisher": [{"start": "pip install tox", "end": "tox -e $TOX_ENV", "alternative end": "3.5"}], "arista-eosplus/pyeapi": [{"start": "pip install -r dev-requirements.txt", "end": "make clean", "alternative end": "make pep8"}], "aws/aws-xray-sdk-ruby": [{"start": "gem update --system", "end": "bundle install", "alternative end": "rake test"}], "arduino-libraries/WiFi101": [], "sandeepmistry/arduino-LoRa": [], "aristanetworks/goarista": [], "aristanetworks/goeapi": [], "arista-eosplus/ztpserver": [{"start": "pip install -r requirements.txt", "end": "make tests", "alternative end": "eosplus-dev@arista.com"}], "aristanetworks/EosSdk": [{"start": "sudo apt-get update -qq", "end": "echo \"Build failed! Output of ./config.log\"", "alternative end": "cat config.log"}], "ARM-software/workload-automation": [{"start": "pip install nose", "end": "git clone -v https://github.com/ARM-software/devlib.git /tmp/devlib && cd /tmp/devlib && python setup.py install", "alternative end": "cd $TRAVIS_BUILD_DIR && python setup.py install"}], "Asana/php-asana": [], "mbedmicro/pyOCD": [{"start": "pip install -U setuptools pip", "end": "pytest --cache-clear"}], "project-generator/project_generator": [{"start": "pip install .", "end": "nosetests -v --with-coverage --cover-package=project_generator", "alternative end": "coveralls"}], "Asymmetrik/node-fhir-server-mongo": [{"start": "sudo apt-get update", "end": "yarn install", "alternative end": "docker-compose run fhir npm test"}], "ARMmbed/mbed-os": [{"start": "pip install pdfminer.six==20200517", "end": "mkdir -p SCANCODE", "alternative end": "git fetch --all --unshallow --tags"}, {"start": "(git clone --depth=1 --single-branch --branch Release_1_8_14 https://github.com/doxygen/doxygen; cd doxygen; mkdir build; cd build; cmake -G \"Unix Makefiles\" ..; make; sudo make install)\n", "end": "mkdir BUILD", "alternative end": "doxygen doxyfile_options 2>&1"}, {"start": "python -m pip install --upgrade pip==18.1", "end": "pip list --verbose", "alternative end": "PYTHONPATH=. coverage run -a -m pytest tools/test"}, {"start": "python -m pip install --upgrade pip==18.1", "end": "pip list --verbose", "alternative end": "PYTHONPATH=. coverage run -a -m pytest tools/test"}, {"start": "python -m pip install --upgrade pip==18.1", "end": "pip list --verbose", "alternative end": "PYTHONPATH=. coverage run -a -m pytest tools/test"}, {"start": "python -m pip install --upgrade pip==18.1", "end": "pip list --verbose", "alternative end": "PYTHONPATH=. coverage run -a -m pytest tools/test"}, {"start": "python -m pip install --upgrade pip==18.1", "end": "pip list --verbose", "alternative end": "sed -n '/``` cpp/,/```/{/```$/Q;/```/d;p;}' ${EVENTS}/README.md > main.cpp"}, {"start": "python -m pip install --upgrade pip==18.1", "end": "pip list --verbose", "alternative end": "source_pkg fuse"}], "Asymmetrik/node-fhir-server-core": [], "atomist/rug": [], "atlassian/escalator": [], "atomist/rug-cli": [{"start": "HOMEBREW_TAP=atomist/homebrew-tap", "end": "M1hhlZDQP0POjiBZrynY6MSAABdmR5/LDJnXMRB3eDZyDo886EhbbmesnCZCq6Z7iUxItz5OhWE0flgulEN1HRW7URq2vFY0zn2dBmjUKPDxxsBIFaYQNHCH1WylQuMmydU0/ssiClEteEdjTCXc2iEvHvEK6hYJm7G6SuJuBSQ2DPO+T5lc84mvoyZyoOQx2YmQe+dfCtmHEzj1YI+Ksp+Ag6HvKkcWkbE+fasPSKSX1leWefa46xjotzQ9ruhr/K8kiTH/mSzkdv1CeDE02m4DGJxMr99tdiuXsSra6JmflPfukERNrsm7OiNi1GzDfaoVEg7hfDCkwk++IFTnOXIFGx3q3DMNBF56efFcpQrbA+gjAa/TM5FUADVIUWW+325qkW7vVfDL591jZx546BbCbsAlMy5X2a4Sduql+5h6XmfXHJpqvVdxk94TnqD/c5+4nPrp3HyT73Qoj/SbPbN6Tms83JBmLTh40Uflb/xIDJCEsFn7KgoL9hBsPmpDAGCWDBPxu5eUWFXmpVHEjVFkomilmaZFBrR0vEkLRZWvUnXb+Wt61ygR61Bx0bRl4opnkFhQSLILX9IGFwM9gUKVIUVOOxBeI89vWdCUDeBM3lqpt2AEQuzBp53oJlx6pSCAGT1XN4YDbHc1LPgRX2Mb5sz26V0dLaJ6M1I6xCk=", "alternative end": "e+KxZ/imTaKpBysnPPNZHVrUApz25me1aBfk2XgLUbwfi6rS/s31Z7KHpUE7UyyH52xzVPPRtUPwe/1EnvVW3OeFZNPWgNAsRQjIBJZuC3swasW/UZ6X4xbfsyIApKK327CSlsJna3WFLOtumRi9q61LphkBUeOuNIqypEfv4QV3ZQ5hj79jKFCrVVmAO1aXZlDOur8jrmAOV2KorqwIsmyurt7MHjwQCz9uHpvPxW8jAlrxmeVKS3Fd1viOJtpT7CG/YhSvqTM5822J+SwBYpLoFb64r4hb+f/4biZYt75CckD2NaSdGRSe9Fgovu3UEHYnKdDhsTWfSTdlt0DKqocXDBQX/tGBmsDmzy7zZip7FUJW27iYvh+93agjOPKvUu9Pn8192wLKt4o8ZJ+ZwS4PXzabfOwwaNAZMpQNCqzgW9NIIypakuj8fkAeyyoRf5ubZTKAUxZ/FvJA9o1LXNQUxnGy0Kw6Iq3hQqGVV/eoCAyCFT7f87v+p0+qG0ZgZSHVGg8PGJXICG+FZ8wwuIftKMe4m+7Au3iSI9fSCygqcBImuQkKHp2JcvDplWnY0vhniK52XsG2o9/MLDQFIneqM74la1GAbAGGeclZED1UXOcp80KVSkGqDAtPYXcOdcO5sDxGv2mTm+pw93PVFzz8P0fR9PpVMRrB3GBjBbs="}, {"start": "bash src/main/scripts/update-brew.bash $HOMEBREW_TAP $GITHUB_TOKEN", "end": "bash src/main/scripts/deb-package.bash", "alternative end": "bash src/main/scripts/rpm-package.bash"}], "atSistemas/react-base": [{"start": "npm install", "end": "NODE_ENV=development", "alternative end": "npm run build:prod"}], "ystia/yorc": [{"start": "pip install --user --upgrade sphinx==1.8.1 semantic-version requests urllib3[secure]==1.23", "end": "TESTARGS=\"-coverprofile coverage-sonar.out -coverpkg=./...\" make json-test", "alternative end": "./build/travis-sonar.sh"}], "Atyantik/pawjs": [], "skatejs/web-components": [{"start": "npm install codecov.io coveralls", "end": "cat ./coverage/lcov.info | ./node_modules/codecov.io/bin/codecov.io.js", "alternative end": "cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js"}], "autodesk/hubble": [{"start": "npm install", "end": "npm test", "alternative end": "npm run codecov"}], "autodesk/quack": [{"start": "pip install -r requirements.txt", "end": "cd tests", "alternative end": "py.test quack_tests.py --cov=../quack --verbose -s"}], "auth0/disyuntor": [], "Autodesk-Forge/forge-api-nodejs-client": [], "autodesk/ADAppRater-iOS": [], "wordpress-mobile/WordPress-Editor-iOS": [], "autodesk/theo-loader": [], "autotelik/datashift": [], "auth0/express-jwt-authz": [], "avadev/AvaTax-REST-V2-Ruby-SDK": [], "auth0/node-baas": [], "dsldevkit/dsl-devkit": [], "autodesk/aomi": [{"start": "pip install coveralls", "end": "coveralls", "alternative end": "NE/ltbdOUdna9JxDErIE4m2TtYT1g1CiIJl3xlNSoGOp9bEcrZC7M9aaw/C39/2fdOTHePu7gIXl4ljYv3R08aAFnlMsh7ru2//nD1pFTahUUL09sOYjlYYhpdX+I9DQMGVzyGqlJXhB4FqbiKA4L1PZ5nPr5eucLG17VuelaHIh5OYxuObz3g1eDlU1SRFvcOcLYrTa2J56jM46ymbO/KlIp3aeTKOjkWQPOHAF8qa3aprQfhA3FAhmI401qz0ItdX60Hg2Qg+T4rB2a0Z1uMmhJDAqYnwpxsvhRQPfqOiTgO/DlqHLDkEXT6hDbQUwcYzZuZbEecZkWSqo7Xf6fFktEFdBC78/nqt9fLqHJswQkZSIgqNwm5YvwWbG4FBCYTtfw5Gwy5T9fb2DPnPMsARv2hT+iZoVYtnZsnNv4o2KoxxWP2dUXyiRWupEOdowqwHr7mp459R9NGS3z/NOXy3oauObpmiyJXPK9RglnK5is2wgx9Kwwy8PbB2wSVrae/1oPslHARffm6h81lLScV+wBLEp1wa1e2QcRIhYJRUJXg95qbDEQ2N+/rePxY7b62SWGfxVttyOLJccrXGfaKf7FA8W1+Y2X0+8YmreNPw7lCTTqrl8omeZj434RVP5IyVkIoxo7mJRfgbPCOWp++eoHTLB45+x3p9TvQFQoAc="}], "auth0/react-native-lock": [], "avinetworks/sdk": [{"start": "sudo pip install Jinja2==2.11.1 MarkupSafe==1.1.1 Werkzeug==0.16.1 click==7.0 flask==1.1.1 itsdangerous==1.1.0", "end": "export FLASK_ENV=development", "alternative end": "export GOPATH=/home/travis/gopath"}, {"start": "sudo apt-get install openjdk-8-jdk", "end": "java --version", "alternative end": "sudo apt install maven"}, {"start": "sudo apt install maven", "end": "mvn --version", "alternative end": "export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/"}], "autodesk/molecule-3d-for-react": [], "autodesk/machine-collaboration-utility": [], "avito-tech/Paparazzo": [{"start": "gem install cocoapods", "end": "pod cache clean Paparazzo", "alternative end": "pod cache clean ImageSource"}], "avito-tech/Marshroute": [{"start": "gem install xcpretty-travis-formatter", "end": "set -o pipefail", "alternative end": "xcodebuild -workspace \"Example/NavigationDemo.xcworkspace\" -scheme \"NavigationDemo\" -destination \"$IOS_DESTANATION\" CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY=\"\" -enableCodeCoverage YES clean test | xcpretty -f `xcpretty-travis-formatter`"}], "AutoGeneral/IridiumApplicationTesting": [{"start": "sudo apt-get install dbus-x11", "end": "export CHROME_BIN=/usr/bin/google-chrome", "alternative end": "export DISPLAY=:99.0"}, {"start": "sudo apt-get update", "end": "wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb", "alternative end": "sudo dpkg -i google-chrome*.deb"}], "maxsokolov/TableKit": [], "UdashFramework/udash-core": [{"start": "npm install jsdom@15.2.1", "end": "xvfb-run sbt -jvm-opts .jvmopts-travis \"set concurrentRestrictions in Global += Tags.limit(ScalaJSTags.Link, 1)\" ++$TRAVIS_SCALA_VERSION $TEST_PACKAGE", "alternative end": "openjdk11"}], "axibase/atsd": [], "axibase/atsd-use-cases": [], "axiros/terminal_markdown_viewer": [{"start": "sudo pip install pygments markdown docopt pyyaml", "end": "sudo python setup.py install", "alternative end": "sudo pip install coveralls"}, {"start": "sudo pip install coveralls", "end": "echo 'starting'", "alternative end": "echo $PYTHONPATH"}], "AxiaCore/py-expression-eval": [{"start": "pip install coveralls", "end": "coveralls"}], "axiros/rusp": [], "axiros/mdvl": [], "AxonFramework/AxonFramework": [], "Axosoft/git-rs": [], "Axway/ats-framework": [], "locationtech-labs/geopyspark": [], "geodocker/geodocker-jupyter-geopyspark": [], "azavea/python-omgeo": [{"start": "pip install flake8", "end": "flake8", "alternative end": "python setup.py test"}], "fedspendingtransparency/usaspending-website": [{"start": "npm install -g codeclimate-test-reporter", "end": "codeclimate-test-reporter < coverage/lcov.info", "alternative end": "False"}], "baifendian/Sirius": [{"start": "npm install", "end": "npm run build"}], "fedspendingtransparency/usaspending-api": [{"start": "npm install --global dredd@11.2.19", "end": "echo \"Using ${BROKER_REPO_BRANCH} branch from ${BROKER_REPO_URL}\"", "alternative end": "git clone --branch ${BROKER_REPO_BRANCH} --single-branch --depth 1 ${BROKER_REPO_URL} ${BROKER_REPO_FOLDER}"}], "max-team/Mars": [{"start": "npm install", "end": "npm run docs:build", "alternative end": "pages"}], "fedspendingtransparency/data-act-broker-backend": [], "baifendian/bfd-ui": [], "usdot-jpo-ode/jpo-ode": [], "BallAerospace/COSMOS": [{"start": "sudo apt-get install -y libgl1-mesa-dev", "end": "bundle exec rake build spec"}], "bamlab/dev-standards": [], "fex-team/yog2-kernel": [], "fex-team/fis3": [{"start": "npm install", "end": "sudo ln -s $(pwd) /var/www/fis3", "alternative end": "sudo service apache2 restart"}, {"start": "npm install coveralls@2.10.0 && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js", "end": "node_modules", "alternative end": "master"}], "bamlab/generator-rn-toolbox": [{"start": "npm install", "end": "npm prune", "alternative end": "npm run semantic-release"}], "baidu/ins": [], "bamlab/react-native-formik": [], "PaddlePaddle/PaddlePaddle.org": [{"start": "pip install --user awscli", "end": "export PATH=$PATH:$HOME/.local/bin", "alternative end": "chmod +x scripts/travis/build-docker.sh scripts/travis/deploy-image.sh scripts/travis/upload_workspace_to_s3.sh"}], "bankex/plasma-research": [], "KurtPattyn/QtMqtt": [{"start": "if [[ \"${TRAVIS_OS_NAME}\" == \"linux\" ]]; then\n  sudo apt-add-repository -y ppa:beineri/opt-qt593-trusty\n  sudo apt-get -qq update\n  sudo apt-get -qq install qt59tools qt59websockets\n\n  export QTDIR=\"/opt/qt59\"\n  export PATH=\"$QTDIR/bin:$PATH\"\n  qt59-env.sh\nelse\n  brew update > /dev/null\n  brew tap homebrew/versions\n  brew install qt\n\n  export QTDIR=\"/usr/local/opt/qt5\"\n  export PATH=\"$QTDIR/bin:$PATH\"\nfi\n", "end": "cd ${TRAVIS_BUILD_DIR}", "alternative end": "mkdir build"}], "p4lang/p4factory": [{"start": "sudo apt-get install ethtool", "end": "sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 99", "alternative end": "wget https://s3-us-west-2.amazonaws.com/p4lang/thrift_bin.tar.gz"}, {"start": "sudo pip install -r submodules/p4c-bm/requirements.txt", "end": "./autogen.sh; ./configure", "alternative end": "cp travis/veth_setup.sh tools/"}], "p4lang/switch": [{"start": "sudo apt-get install ethtool", "end": "wget https://s3-us-west-2.amazonaws.com/p4lang/thrift_bin.tar.gz", "alternative end": "tar -xzvf thrift_bin.tar.gz -C $HOME/"}], "p4lang/p4c-bm": [{"start": "pip install -r requirements.txt", "end": "tox -e $TOX_ENV", "alternative end": "pip install codecov"}, {"start": "pip install codecov", "end": "codecov"}], "rosette-api/python": [{"start": "pip install tox", "end": "tox", "alternative end": "4FRaTAAiYyeUvgw2RhmblgbNiJO4wmd34OBgWcwURjP9oVmFfSwR9r1LNCdUGxrPOghexSY2DjXIuvIrfTfi/xYbhHb3Kw7PEAyB8IuBMlKtY4NSFou62S2VhYpxyg58T+C7P2zi0eDnDE06pwTCoGPaimxMZQY91yQ0yPYDPVXbwe5SjEgamzlwGBxlS/0A6w1iCPHg27/iO2hXtdW3oLS2I0F/Q8Q95RBkX9hpg6yqHlTV7jRbSqvQ9OFBqk/tXMHQvhoPDGgCgQDuykJuaAYx7g9d0YL0eEYYOh9B/TJ/kNOwdRFBu5kuQ2/nFS5Z0S3Y3UIhdYjUmm9gSMnwIbYnrW22EqDJLoT9Zi3Gv7Prg/8/fSkWsof7BJTMSuXUqO1AxDGKIxFv9uSF1daZoY+AC1ooU1xDu1nNvWVYPlkwEdDxxmHpFkGT3ESTZYccPovQl8Z5K0I1BBAVdJKDzm07lE6VHbxkKcvK6gG0TN3uLxnSlQtjkfJ+aVMq1kxeVsB9lEsKs9oezsKzzbftMm525aXPg+OAv+31CUFWxvT/p4ps8Q+AV6aZpoPHkpK8VryyNirUeZ/m4m4ebDHhD9vcN+JqE9gzshT+0U3g19SvLiUMQtbuZ2BUvrq2hh2LEGs03AFZaNg9AEUVA1PQRhV5NILyoS/lbiBYJPT39Sg="}], "sleuthkit/sleuthkit": [{"start": "homebrew/cask-versions", "end": "adoptopenjdk8", "alternative end": "2.7"}, {"start": "if [ $TRAVIS_OS_NAME = \"osx\" ]; then export PATH=${PATH}:/usr/local/opt/gettext/bin; brew uninstall java --force; brew cask uninstall java --force; fi", "end": "javac -version", "alternative end": "./bootstrap && ./configure --prefix=/usr && make"}], "basecamp/bc3-integrations": [], "basecamp/pow": [], "fex-team/fis-site": [{"start": "npm install -g fis", "end": "bundle exec rake site:deploy --quiet", "alternative end": "master"}], "basecamp/marginalia": [], "superna9999/meta-meson": [{"start": "sudo apt-get update -qq", "end": "rm -rf /tmp/build_env", "alternative end": "git clone git://github.com/openembedded/openembedded-core --branch=master --depth=1 /tmp/build_env"}], "basecamp/trix": [], "mipengine/mip": [], "basecamp/local_time": [], "BBC/sqs-consumer": [], "BBC/sqs-producer": [], "basecamp/google_sign_in": [{"start": "gem update --system && gem install bundler -v 1.17.3", "end": "2.3", "alternative end": "2.4"}], "BBC/react-transcript-editor": [{"start": "npm install", "end": "npm run test:ci"}], "BBC/flashheart": [], "BBC/tal": [], "BBC/pydvbcss": [{"start": "pip install -r requirements.txt", "end": "python setup.py install", "alternative end": "py.test"}], "mipengine/mip2-extensions-platform": [{"start": "npm install", "end": "npm run lint"}], "lavas-project/lavas-template-vue": [{"start": "npm install", "end": "npm test"}], "BBC/device_api-android": [], "BBC/gel-grid": [{"start": "npm install", "end": "npm test", "alternative end": "test $TRAVIS_PULL_REQUEST == \"false\" && test $TRAVIS_BRANCH == \"master\" && bash scripts/deploy.sh"}], "BBVAEngineering/ember-web-workers": [{"start": "npm install -g npm@6", "end": "npm --version", "alternative end": "if [[ $TRAVIS_BRANCH =~ greenkeeper || $TRAVIS_PULL_REQUEST_BRANCH =~ greenkeeper ]]; then npm install; else npm ci; fi"}, {"start": "if [[ $TRAVIS_BRANCH =~ greenkeeper || $TRAVIS_PULL_REQUEST_BRANCH =~ greenkeeper ]]; then npm install; else npm ci; fi", "end": "greenkeeper-lockfile-update", "alternative end": "commitlint-travis"}, {"start": "npm install -g npm@6", "end": "npm --version", "alternative end": "node_modules/.bin/ember try:one $EMBER_TRY_SCENARIO"}], "mipengine/mip2": [{"start": "travis_retry npm install", "end": "npm run test:cover", "alternative end": "cat ./coverage/lcov.info | coveralls"}], "BBC/bbc-a11y": [{"start": "npm install", "end": "export DISPLAY=':99.0'", "alternative end": "sh -e ./xvfb start"}], "mipengine/mip2-extensions": [{"start": "travis_retry npm install", "end": "npm run lint", "alternative end": "npm run site"}], "BBC/VideoContext": [], "ecomfe/htmlcs": [], "BBC/turingcodec": [], "BBC/peaks.js": [], "BBVAEngineering/ember-modal-service": [{"start": "npm install -g npm@6", "end": "npm --version", "alternative end": "if [[ $TRAVIS_BRANCH =~ greenkeeper || $TRAVIS_PULL_REQUEST_BRANCH =~ greenkeeper ]]; then npm install; else npm ci; fi"}, {"start": "if [[ $TRAVIS_BRANCH =~ greenkeeper || $TRAVIS_PULL_REQUEST_BRANCH =~ greenkeeper ]]; then npm install; else npm ci; fi", "end": "greenkeeper-lockfile-update", "alternative end": "commitlint-travis"}, {"start": "npm install -g npm@6", "end": "npm --version", "alternative end": "node_modules/.bin/ember try:one $EMBER_TRY_SCENARIO --skip-cleanup"}], "BBVA/chaos-monkey-engine": [{"start": "pip install tox", "end": "tox", "alternative end": "pip install codecov"}, {"start": "pip install codecov", "end": "codecov", "alternative end": "script"}], "BBC/waveform-data.js": [], "BBVA/data-refinery": [{"start": "travis_retry pip install tox", "end": "tox", "alternative end": "script"}, {"start": "pip install -U bumpversion gitchangelog && git config --global user.email \"builds@travis-ci.com\" && git config --global user.name \"Travis CI\" && git pull -t && git checkout -b travis-master-$TRAVIS_BUILD_NUMBER origin/$TRAVIS_BRANCH && bumpversion --tag --commit --message \"[skip ci] Travis Build ${TRAVIS_BUILD_NUMBER}. Update version {current_version} --> {new_version}\" patch", "end": "master", "alternative end": "$FLAG = true"}, {"start": "make clean-pyc clean-build build && pip install -U pystache gitchangelog && gitchangelog > CHANGELOG.md && git add CHANGELOG.md && git commit -m \"[skip ci] @skip Generated CHANGELOG file\" && git tag -f $(git describe --tags `git rev-list --tags --max-count=1`) && git checkout master && git merge travis-master-$TRAVIS_BUILD_NUMBER && git push --tags https://$GITHUB_TOKEN@github.com/BBVA/data-refinery.git $TRAVIS_BRANCH && make codecov release doc && touch docs/build/html/.nojekyll", "end": "master", "alternative end": "$FLAG = true"}], "BBC/audiowaveform": [{"start": "if [ \"$TRAVIS_OS_NAME\" == \"linux\" ]; then sudo apt-get update; fi", "end": "wget https://github.com/google/googletest/archive/release-1.10.0.tar.gz", "alternative end": "tar xzf release-1.10.0.tar.gz"}], "BBC/slayer": [], "PaddlePaddle/PARL": [{"start": "pip install flake8", "end": "flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics", "alternative end": "docker run -it -v $PWD:/work -w /work paddlepaddle/paddle:latest-dev ./.teamcity/build.sh ${JOB}"}], "BBC/consumer-contracts": [], "bcgsc/arcs": [{"start": "sudo apt-get update -qq", "end": "./autogen.sh", "alternative end": "./configure"}], "BBC/speculate": [], "BBC/gel-typography": [{"start": "npm install", "end": "npm test", "alternative end": "test $TRAVIS_PULL_REQUEST == \"false\" && test $TRAVIS_BRANCH == \"master\" && bash scripts/deploy.sh"}], "fex-team/ua-device": [], "bcgsc/abyss": [{"start": "sudo apt-get update -qq", "end": "./autogen.sh", "alternative end": "./configure --with-mpi=/usr/lib/openmpi"}], "ecomfe/edp": [], "BBC/gel-sass-tools": [{"start": "npm install", "end": "npm test", "alternative end": "npm"}], "ecomfe/fontmin": [], "bcgsc/orca": [{"start": "npm install -g dockerfile_lint", "end": "find . -name Dockerfile | xargs -i dockerfile_lint -f {} -r dockerfile_rules.yaml"}], "BeamMW/beam": [{"start": "brew update", "end": "export PATH=\"/usr/local/opt/ccache/libexec:$PATH\"", "alternative end": "brew upgrade --ignore-pinned icu4c"}, {"start": "brew upgrade --ignore-pinned icu4c", "end": "export OPENSSL_ROOT_DIR=\"/usr/local/opt/openssl@1.1\"", "alternative end": "openssl aes-256-cbc -K $encrypted_1f9ebee66ea9_key -iv $encrypted_1f9ebee66ea9_iv -in macos_cert.enc -out macos_cert.tar -d"}, {"start": "brew update", "end": "export PATH=\"/usr/local/opt/ccache/libexec:$PATH\"", "alternative end": "brew uninstall --ignore-dependencies boost"}, {"start": "brew uninstall --ignore-dependencies boost", "end": "git clone --depth=1 https://github.com/BeamMW/boost-ios.git /Users/travis/boost-ios", "alternative end": "git clone --depth=1 https://github.com/BeamMW/boost-ios-simulator.git /Users/travis/boost-ios-simulator"}], "becls/swish": [], "BedeGaming/orchestra": [{"start": "npm install -g gulp", "end": "npm run-script coverage"}], "ecomfe/san-mui": [{"start": "npm install -g npm@latest\nnpm --version\nnpm install --registry http://registry.npmjs.org\n", "end": "npm run test-ci", "alternative end": "npm run coverage"}], "fex-team/fit": [{"start": "npm install", "end": "6.2.1", "alternative end": "5.0"}], "beecloud/beecloud-java": [], "ecomfe/Moye": [], "beecloud/beecloud-android": [], "Ralltiir/ralltiir": [{"start": "npm install --save-dev pkg-dir@1.0.0", "end": "./node_modules/.bin/apmjs install --loglevel silly", "alternative end": "npm ls | cat"}], "beecloud/beecloud-php": [], "react-melon/melon": [{"start": "npm --version\nnpm install --registry http://registry.npmjs.org\n", "end": "npm run test-ci", "alternative end": "npm run coveralls"}], "ecomfe/okam": [{"start": "npm install", "end": "npm run bootstrap", "alternative end": "npm run lint"}], "BendingSpoons/katana-swift": [{"start": "gem install cocoapods", "end": "pod repo update", "alternative end": "pod install"}], "BendingSpoons/tempura-swift": [], "fex-team/swiper": [], "bestit/flagception-bundle": [], "Betterment/test_track_js_client": [], "Betterment/test_track": [{"start": "gem update --system", "end": "bundle exec rake db:create"}], "lavas-project/lavas": [{"start": "npm install", "end": "npm test", "alternative end": "./node_modules/.bin/nyc report --reporter=text-lcov | ./node_modules/.bin/coveralls"}], "lavas-project/vue-skeleton-webpack-plugin": [{"start": "npm install --ignore-scripts", "end": "npm rm webpack", "alternative end": "npm rm vue-loader"}, {"start": "npm install webpack@$WEBPACK_VERSION vue-loader@$VUE_LOADER_VERSION --ignore-scripts || true", "end": "npm test"}], "Betterment/backbone.blazer": [], "lavas-project/sw-register-webpack-plugin": [{"start": "npm install", "end": "npm test"}], "Betterment/test_track_rails_client": [{"start": "gem update --system", "end": "RAILS_ENV=test bundle exec rake db:setup", "alternative end": "gemfiles/rails_5_1.gemfile"}], "cpvrlab/ImagePlay": [{"start": "if [ $TRAVIS_OS_NAME == osx ]; then brew update && brew install opencv && brew install qt5 && brew link --force qt5; fi", "end": "wget -O opencv-3.4-x86_64.pkg.tar.xz https://www.archlinux.org/packages/extra/x86_64/opencv/download/", "alternative end": "sudo tar --wildcards --strip=2 -C /usr/lib/x86_64-linux-gnu/ -xf opencv-3.4-x86_64.pkg.tar.xz usr/lib/libopencv_xfeatures2d.so* usr/lib/libopencv_xphoto.so* usr/lib/libopencv_optflow.so*"}, {"start": "sudo make install", "end": "find /app", "alternative end": "curl --upload-file /app/bin/imageplay https://transfer.sh/imageplay"}], "aeroxis/sultan": [{"start": "pip install -r requirements/test.txt", "end": "make tests", "alternative end": "cd docs && make html"}], "ecomfe/etpl": [], "mipengine/mip-cli": [], "devinivy/labbable": [], "bigmlcom/bigmler": [{"start": "pip install cython", "end": "export TESTS=$(for t in $BML_TESTS; do ls bigmler/tests/*$t*.py;done|sed 's/\\//./g'| sed 's/\\.py//g'|paste -sd \",\")", "alternative end": "echo $TESTS"}], "bigmlcom/bigml-node": [{"start": "npm install mocha", "end": "export TESTS=$(for t in $BML_TESTS; do ls test/*$t*;done|paste -sd \" \")", "alternative end": "echo $TESTS"}], "bigstepinc/jsonrpc-bidirectional": [], "ecomfe/knowledge": [], "bigmlcom/python": [{"start": "pip install cython", "end": "export TESTS=$(for t in $BML_TESTS; do ls bigml/tests/*$t*;done|paste -sd \",\")", "alternative end": "echo $TESTS"}], "PaddlePaddle/book": [{"start": "sudo pip install -U virtualenv pre-commit pip", "end": "GOPATH=/tmp/go go get -u github.com/wangkuiyi/ipynb/markdown-to-ipynb", "alternative end": "PATH=/tmp/go/bin:$PATH .travis/precommit.sh"}], "miyabayt/spring-boot-doma2-sample": [{"start": "sudo apt-get update", "end": "sudo /etc/init.d/mysql stop", "alternative end": "docker-compose -f docker/docker-compose.yml up -d"}], "fex-team/node-ral": [{"start": "npm install coveralls@2.10.0", "end": "cat ./coverage/lcov.info | coveralls"}], "BinPar/jest-gql": [], "ecomfe/fecs": [], "biosistemika/scinote-web": [], "bisdn/basebox": [], "bitcraze/crazyflie-release": [], "baidu/tera": [], "BitGo/prova": [], "exonum/exonum-java-binding": [], "ecomfe/est": [], "exonum/exonum-client": [{"start": "npm install", "end": "npm run integration:build", "alternative end": "npm run integration:unix"}], "exonum/exonum-btc-anchoring": [{"start": "npm install", "end": "./node_modules/.bin/cspell --version", "alternative end": "./node_modules/.bin/markdownlint --version"}], "baidu/Familia": [], "exonum/exonum-cryptoowls": [{"start": "npm install cspell", "end": "./node_modules/.bin/cspell --version", "alternative end": "npm install markdownlint-cli"}, {"start": "npm install markdownlint-cli", "end": "./node_modules/.bin/markdownlint --version", "alternative end": "cargo fmt -- --check"}], "bitmovin/bitcodin-node": [], "bitmovin/demos": [], "bitmovin/bitcodin-python": [{"start": "pip install -r requirements.txt", "end": "travis_wait 30 coverage run --source bitcodin -m bitcodin.test.main", "alternative end": "coveralls"}], "bitmovin/bitcodin-php": [], "bitmovin/bitmovin-javascript": [], "ecomfe/uioc": [], "bitmovin/bitmovin-player-ui": [], "bitmovin/libdash": [], "apache/incubator-doris": [{"start": "cd docs && npm install", "end": "export PR=https://api.github.com/repos/$TRAVIS_REPO_SLUG/pulls/$TRAVIS_PULL_REQUEST", "alternative end": "export BRANCH=$(if [ \"$TRAVIS_PULL_REQUEST\" == \"false\" ]; then echo $TRAVIS_BRANCH; else echo `curl -s $PR | jq -r .head.ref`; fi)"}], "Bitnami/minideb": [{"start": "sudo apt-get install -y debian-archive-keyring debootstrap shellcheck", "end": "script", "alternative end": "bash pushall"}], "stephenh/tessell": [], "baidu/openrasp": [], "ecomfe/standard-redux-shape": [], "convio/watirmark": [], "blablacar/go-nerve": [{"start": "sudo apt-get update -qq", "end": "bash -c 'echo \"$DOCKER_PASSWORD\" | docker login -u \"$DOCKER_USERNAME\" --password-stdin'", "alternative end": "env GO111MODULE=on ./gomake"}], "blackbaud/skyux": [{"start": "gem install sass", "end": "chmod +x ./scripts/update-skyux.sh", "alternative end": "chmod +x ./scripts/update-skyux-docs.sh"}, {"start": "npm install -g grunt-cli", "end": "npm test && ./scripts/update-skyux.sh && ./scripts/update-skyux-releases.sh && ./scripts/update-skyux-docs.sh", "alternative end": "./scripts/browserstack-local-stop.sh"}], "blablacar/ui-library": [], "blackbaud/skyux2": [{"start": "npm install -g @blackbaud/skyux-cli", "end": "export SAVAGE_BRANCH=\"^savage-\"", "alternative end": "chmod +x ./scripts/travis-script-build.sh"}], "blackducksoftware/ohcount4j": [], "blackducksoftware/hub-detect": [], "Blazemeter/jmeter-bzm-plugins": [{"start": "sudo apt-get -y install python default-jre-headless python-tk python-pip python-dev libxml2-dev libxslt-dev zlib1g-dev net-tools", "end": "chmod -R +x ./.travis", "alternative end": "sh ./.travis/install-maven-dependency.sh https://github.com/inventit/mqtt-websocket-java/releases/download/$MQTT_WEBSOCKET_VERSION/mqtt-websocket-java-$MQTT_WEBSOCKET_VERSION.jar io.inventit.dev mqtt-websocket-java $MQTT_WEBSOCKET_VERSION"}], "bitnami-labs/kubewatch": [], "BlackPepperSoftware/bowman": [], "flyntwp/flynt-starter-theme": [], "Blazemeter/taurus": [{"start": "PIP_INSTALL=\"pip install\"", "end": "GENERAL_EXCLUDE=\"--exclude-dir=tests/resources --exclude-dir=tests/ci\"", "alternative end": "PYTHON=python"}, {"start": "PIP_INSTALL=\"sudo pip3 install\"", "end": "RVM_KEY=\"409B6B1796C275462A1703113804BB82D39DC0E3\"", "alternative end": "OSX_EXCLUDE=\"--exclude-test=tests.modules.selenium.test_csharp\""}, {"start": "gem install rspec", "end": "$PIP_INSTALL --upgrade pip", "alternative end": "$PIP_INSTALL -r requirements.txt"}], "Blazemeter/jmeter-debugger": [], "Blizzard/s2client-api": [{"start": "sudo apt-get install -y g++-5", "end": "sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 90", "alternative end": "sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 90"}], "Bitnami/nami": [], "Blizzard/s2protocol": [{"start": "pip install tox-travis", "end": "tox"}], "blinkist/terraform-aws-airship-ecs-service": [], "blobcity/db": [], "blinkist/terraform-aws-airship-ecs-cluster": [], "bitnami-labs/kube-libsonnet": [{"start": "sudo apt-get update", "end": "make tests"}], "aergoio/aergo": [], "bloomberg/powerfulseal": [{"start": "pip install tox tox-travis -U --force-reinstall", "end": "tox -vv", "alternative end": "docker --version"}, {"start": "python -m pip install tox && tox -vve pypi_publish", "end": "True", "alternative end": "True"}], "EOSIO/demux-js": [], "EOSIO/demux-js-eos": [], "bloomberg/bqplot": [{"start": "sudo apt-get update", "end": ". $HOME/.nvm/nvm.sh", "alternative end": "nvm install --lts"}, {"start": "pip install . coveralls", "end": "conda list", "alternative end": "py.test --cov-report=term --cov=bqplot tests"}, {"start": "if [[ \"$TRAVIS_PYTHON_VERSION\" == \"3.6\" ]]; then export DISPLAY=:99.0; sh -e /etc/init.d/xvfb start || true; jupyter labextension install js @jupyter-widgets/jupyterlab-manager; python -m jupyterlab.selenium_check; (rm -rf js/node_modules); (cd js; npm install); (cd js; npm run test); fi", "end": "coveralls"}], "bitnami-labs/sealed-secrets": [], "bloomberg/clangmetatool": [], "bloomberg/wsk": [], "bloomberg/zookeeper-cookbook": [], "bloomberg/chef-umami": [], "bloomberg/goldpinger": [], "bitnine-oss/agensgraph": [{"start": "make install > /dev/null", "end": "export PATH=\"$(pwd)\"/bin:$PATH", "alternative end": "make check -C src/bin LC_ALL=\"C\""}], "bloomberg/redis-cookbook": [{"start": "/opt/chefdk/embedded/bin/chef gem install kitchen-dokken", "end": "/opt/chefdk/embedded/bin/chef --version", "alternative end": "/opt/chefdk/embedded/bin/cookstyle --version"}], "canjs/can-derive": [], "zhengguorong/h5maker": [], "canjs/canjs": [], "bitovi/velocirender": [], "BlueEastCode/loopback-graphql-relay": [{"start": "npm install -g npm", "end": "npm test", "alternative end": "False"}], "canjs/can-fixture": [], "canjs/can-ndjson-stream": [], "bluerobotics/BlueRobotics_MS5837_Library": [{"start": "pip install -U platformio", "end": "platformio ci --lib=\".\" --board=uno --board=megaatmega2560"}], "canjs/can-connect": [], "bluesoft/bee": [], "bitovi/ylem": [], "blue-yonder/postgraas_server": [{"start": "pip install pip-tools", "end": "pip-compile --upgrade -o requirements-pinned.txt requirements.txt requirements_secrets.in requirements_prometheus.in", "alternative end": "pip-compile --upgrade -o test-requirements-pinned.txt requirements-pinned.txt requirements_dev.txt"}, {"start": "pip install -r test-requirements-pinned.txt", "end": "pip freeze", "alternative end": ". setup_integration_test_docker.sh"}], "canjs/can-zone": [], "genivi/dlt-viewer": [], "bitpay/bitpay-go": [], "bonitasoft/bonita-engine": [], "Pivotal-Field-Engineering/devops-workshop": [], "devbolcom/bolcom-openapi-php-client": [], "bitpay/cordova-plugin-qrscanner": [], "bitpay/bitpay-python": [{"start": "pip install -r requirements.txt", "end": "nosetests --with-coverage --cover-package=bitpay --cover-html", "alternative end": "coveralls"}], "DigitalNZ/supplejack_api": [{"start": "gem update --system", "end": "cp spec/dummy/config/mongoid.travis.yml spec/dummy/config/mongoid.yml", "alternative end": "echo 'Pacific/Auckland' | sudo tee /etc/timezone"}, {"start": "gem install bundler-audit", "end": "bundle audit update", "alternative end": "bundle audit check"}, {"start": "gem install brakeman", "end": "brakeman --run-all-checks", "alternative end": "mongodb"}], "mysql-time-machine/replicator": [], "ecmwf/cfgrib": [{"start": "pip install --no-deps -e .", "end": "which python", "alternative end": "python --version"}], "GeoWebCache/geowebcache": [], "box/t3js": [], "eclipse/vorto": [{"start": "npm install -g --save remark-cli to-vfile remark-preset-lint-recommended remark-validate-links remark-lint-no-dead-urls remark-message-control remark-preset-lint-markdown-style-guide remark-lint", "end": "remark -i .remark_ignore -f -u validate-links .", "alternative end": "remark -i .remark_ignore -u lint-no-dead-urls ."}], "box/leche": [], "box/memsniff": [], "box/box-content-preview": [], "bq/bitbloq-frontend": [{"start": "npm install", "end": "grunt jshint"}], "box/ClusterRunner": [{"start": "pip install python-coveralls==2.5.0", "end": "coveralls"}], "box/mojito": [], "box/kube-applier": [], "box/boxcli": [], "box/Anemometer": [], "bq/penguin": [{"start": "npm install -g grunt-cli", "end": "bower install", "alternative end": "grunt build"}], "box/bart": [], "luximetr/AnyFormatKit": [], "brandingbrand/flagship": [{"start": "sudo apt-get install -y --no-install-recommends lib32stdc++6 libstdc++6 > /dev/null", "end": "export ANDROID_HOME=/opt/android-sdk-linux", "alternative end": "cd /opt"}], "box/rotunicode": [], "box/viewer.js": [], "box/box-node-sdk": [], "box/spout": [], "brave/brave-ui": [], "box/box-ios-sdk": [{"start": "gem install bundler", "end": "bundle install --path vendor/bundle", "alternative end": "gem install xcpretty"}, {"start": "gem install xcpretty", "end": "echo \"\" | xcversion simulators --install=\"iOS $IOS_VERSION\" --force", "alternative end": "gem install jazzy"}, {"start": "gem install jazzy", "end": "LC_CTYPE=en_US.UTF-8", "alternative end": "LANG=en_US.UTF-8"}], "box/flaky": [{"start": "pip install -U tox-travis", "end": "tox", "alternative end": "if [ \"-x$TOX_ENV\" = \"xcoverage\" ]; then coveralls; fi"}], "brave/brave-core": [{"start": "pip install --user pycodestyle", "end": "npm run $TEST_SUITE", "alternative end": "brave"}], "brave/sync": [], "box/RainGauge": [], "box/shalam": [], "brave/vault": [], "brave/ad-block": [], "brave/crypto": [], "brave/browser-laptop": [{"start": "sudo apt-get install -y python", "end": "npm i -g npm@5.5.1", "alternative end": "export DISPLAY=:99.0"}], "IntuitiveWebSolutions/PyWebRunner": [{"start": "pip install -r requirements.txt", "end": "wget -N http://chromedriver.storage.googleapis.com/2.33/chromedriver_linux64.zip -P ~/", "alternative end": "unzip ~/chromedriver_linux64.zip -d ~/"}, {"start": "pip install wait; pip install .", "end": "py.test tests/test_*.py"}], "bsc-pm/nanox": [], "BSC-RUS/AuTe-Framework": [], "bunq/sdk_java": [], "bullhorn/fast-rest": [], "bunq/sdk_csharp": [], "bullhorn/sdk-rest": [{"start": "npm install", "end": "trusty", "alternative end": "oraclejdk8"}], "bullhorn/novo-elements": [{"start": "npm install", "end": "npm run lint", "alternative end": "npm test"}], "burke-software/django-mass-edit": [{"start": "pip install $DJANGO", "end": "coverage run --source=massadmin manage.py test --settings=tests.settings", "alternative end": "coveralls"}], "burke-software/django-responsive-dashboard": [{"start": "pip install -q -r requirements-test.txt", "end": "python setup.py check -r -s -m\ncheck-manifest\nflake8 responsive_dashboard\npylint responsive_dashboard\npython manage.py test\n"}], "open-orchestra/open-orchestra": [], "planestraveler/git-starteam": [], "bwsw/cloudstack-ui": [], "ngageoint/opensphere": [], "RallyTools/rally-node": [], "caelum/mamute": [{"start": "sudo pip install codecov", "end": "codecov", "alternative end": "jdk_switcher use oraclejdk8"}], "caelum/caelum-stella": [], "strongloop/loopback-connector": [], "caelum/vraptor4": [], "caelum/vraptor": [], "eclipse/openj9": [], "caicloud/cyclone": [], "strongloop/loopback.io": [{"start": "npm install", "end": "npm ls @loopback/docs", "alternative end": "npm run build"}], "calidae/normandy-css": [{"start": "npm install", "end": "npm run docs:build", "alternative end": "pages"}], "codefordurham/school-navigator": [{"start": "pip install -U pip", "end": "createdb -E UTF-8 school_navigator -U postgres -O $USER", "alternative end": "psql school_navigator -c \"CREATE EXTENSION postgis;\" -U postgres"}], "PyCon/pycon": [{"start": "pip install -q pip --upgrade", "end": "tox -- --settings=pycon.settings.travis"}], "eclipse/orion.client": [{"start": "npm install -g grunt-cli", "end": "cd modules/orionode;", "alternative end": "npm install;"}, {"start": "npm install;", "end": "grunt;", "alternative end": "npm pack;"}], "eclipse/omr": [], "strongloop/loopback": [], "openlvc/portico": [], "Cambalab/vue-admin": [], "campaignmonitor/createsend-java": [], "camptocamp/puppet-varnish": [], "pinguo/php-msf": [], "camptocamp/puppet-kmod": [{"start": "gem update --system $RUBYGEMS_VERSION", "end": "gem --version", "alternative end": "bundle -v"}], "camptocamp/puppet-postfix": [{"start": "gem update --system $RUBYGEMS_VERSION", "end": "gem --version", "alternative end": "bundle -v"}], "camptocamp/puppet-tomcat": [], "camunda/camunda-bpm-spring-boot-starter": [], "camptocamp/puppet-archive": [], "MetPX/sarracenia": [], "CanalTP/navitia-playground": [{"start": "[ $TRAVIS_BRANCH = master ] &&\n[ $TRAVIS_PULL_REQUEST = false ] &&\npip install --user ghp-import &&\nexport PATH=\"$PATH:$HOME/.local/bin\" &&\nghp-import -n dist/dev &&\ngit push -fq https://${GH_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git gh-pages\n", "end": "eDtqxk+pJDLb3We5DEjbtrYVu+3aiuinzKxkIy2ap7XEx54C8EReoqyfcQvCxDbPe5KACNaKrMXuI3RnEMQ6BDyz+eHW6BPgfgq5lUeIj9Ep+OgZ+NfLnurQ7ylZanO2Hy8bOXGm3E8iLF9sSfUFs6LDDOBn7B278CE0RpWDatiPXYchlt35UvqTKljjhfH1EuEHarpeO7GCZLBAe0PRSO6po+oDzAAieJ8uqH++sBuTN1BIJP6fZSyiak2DhPrXmscxkjVeffTmep9awNM0GtSze1tHSA7I1M90nDLkC9GxUjZEp6E36oUuKTiVOgLc1bRz16B+Y5C/GF1JpTwdj2eRf3gC51loqBqYDDEorLDIJV94Rk1EqxzfJUZXO34ru/WSAbQtQzgT/nuS86oPCmVV02MQ3qFobq6SuLk37Qie6HUeNGgtnH8hEHmI+R9zsqsq3jrv/txz/CjI3XgbZSrdrYKjM3/t7C5IhdXFtUvSAUwqegdHvZuglMFDYAe2FQb0iIvFMA7dYqQ42hxoo3Cmzfq+2t/BmqDMCjiKW9/SIBO+PEn7EH5Vx6EXTvB7+AS6vQr/NPDOGsCsxJYExzq4F16/dNPS1KmpemFMNTBcEBA2oON7nYDb/UNkZ+4gUjShjXmawiXTUAtewRfjJu8NKPw7sSMwFLPqGpNjT9E="}], "camptocamp/docker-odoo-project": [], "CanalTP/mimirsbrunn": [], "camunda/camunda-bpm-assert": [], "camptocamp/bivac": [], "camptocamp/cgxp": [{"start": "sudo apt-get update", "end": "git submodule update --init", "alternative end": "cd core/src/doc"}, {"start": "env/bin/pip install -r requirements", "end": "cd -", "alternative end": "cd core/tests"}, {"start": "env/bin/pip install CherryPy==3.6.0 jasmine-core==2.2.0 jasmine==2.2.0", "end": "cd -", "alternative end": "npm install jshint"}, {"start": "npm install jshint", "end": "if [ ${TRAVIS_PULL_REQUEST} != \"false\" ] ; then git fetch origin ${TRAVIS_BRANCH}:${TRAVIS_BRANCH} ; fi", "alternative end": "if [ ${TRAVIS_PULL_REQUEST} != \"false\" ] ; then git diff --check ${TRAVIS_BRANCH} -- ; fi"}], "camptocamp/terraform-provider-pass": [], "camunda/camunda-bpm-assert-scenario": [], "OCA/account-invoice-reporting": [{"start": "pip install PyPDF2==1.18", "end": "travis_run_tests", "alternative end": "travis_after_tests_success"}], "mvo5/apt-clone": [{"start": "sudo apt-get update", "end": "(cd tests ; PATH=/usr/bin:$PATH make)"}], "OCA/margin-analysis": [], "camunda/camunda-modeler": [{"start": "sudo snap install hub --classic", "end": "GITHUB_TOKEN=$GH_TOKEN hub release create --draft --message=$TRAVIS_TAG $TRAVIS_TAG", "alternative end": "distro"}], "OCA/sale-reporting": [], "camptocamp/puppet-nagios": [], "juju/charmstore": [], "camunda/camunda-bpm-camel": [], "CanopyTax/single-spa-react": [], "camunda/camunda-bpm-reactor": [], "camunda/camunda-bpm-mockito": [], "capitalone/checks-out": [], "camunda/camunda-bpm-platform-osgi": [], "oasp/oasp4j": [], "Capgemini-AIE/blockchain-insurance": [], "capitalone/Particle-Cloud-Framework": [{"start": "pip install invoke", "end": "invoke test", "alternative end": "invoke build"}], "capitalone/dataCompareR": [], "capitalone/Data-Load-and-Copy-using-Python": [{"start": "pip install azure-storage-blob==2.1.0", "end": "python setup.py install", "alternative end": "make not_integration"}], "capriza/node-busmq": [{"start": "sudo make install", "end": "cd ..", "alternative end": "gem install redis"}], "camunda/docker-camunda-bpm-platform": [], "capitalone/stack-deployment-tool": [], "capitalone/fpe": [], "carbonblack/cbapi-python": [{"start": "pip install nose", "end": "python setup.py install", "alternative end": "nosetests -s -v --tc-file ./tests/nosetest.cfg"}], "camunda/camunda-external-task-client-js": [], "capitalone/datacompy": [{"start": "pip install -r test-requirements.txt", "end": "python -m pytest"}], "cargomedia/janus-gateway-rtpbroadcast": [{"start": "sudo apt-get update -qq", "end": "./get-janus-headers.sh", "alternative end": "./autogen.sh"}], "cargomedia/socket-redis": [], "carbonblack/cbfeeds": [{"start": "pip install -r requirements.txt", "end": "python setup.py install", "alternative end": "python test.py"}], "CartoDB/crankshaft": [{"start": "sudo apt-get install -y --allow-unauthenticated --no-install-recommends --no-install-suggests postgresql-$POSTGRESQL_VERSION postgresql-client-$POSTGRESQL_VERSION postgresql-server-dev-$POSTGRESQL_VERSION postgresql-common", "end": "if [[ $POSTGRESQL_VERSION == '12' ]]; then echo -e \"joblib==0.11\\nnumpy==1.13.3\\nscipy==0.19.1\\npysal==1.14.3\\nscikit-learn==0.19.1\" > ./src/py/crankshaft/requirements.txt && sed -i -e \"s/.*install_requires.*$/    install_requires=['joblib==0.11.0', 'numpy==1.13.3', 'scipy==0.19.1', 'pysal==1.14.3', 'scikit-learn==0.19.1'],/g\" ./src/py/crankshaft/setup.py; fi;", "alternative end": "sudo pg_dropcluster --stop $POSTGRESQL_VERSION main"}, {"start": "sudo make install", "end": "make test", "alternative end": "./check-compatibility.sh"}], "CartoDB/mobile-android-samples": [], "CartoDB/mobile-ios-samples": [], "CartoDB/carto-python": [{"start": "pip install .", "end": "pytest"}], "CartoDB/bigmetadata": [], "castlabs/dashencrypt": [], "catalyst/moodle-tool_objectfs": [], "CartoDB/Windshaft": [{"start": "sudo apt-get install -y libpangocairo-1.0-0 libpango1.0-dev pkg-config", "end": "sudo apt-get remove postgresql-$POSTGRESQL_VERSION postgresql-client-$POSTGRESQL_VERSION postgresql-server-dev-$POSTGRESQL_VERSION postgresql-common postgresql-client-common postgresql-$POSTGRESQL_VERSION-postgis-$POSTGIS_VERSION postgresql-$POSTGRESQL_VERSION-postgis-$POSTGIS_VERSION-scripts postgis", "alternative end": "if [[ $POSTGRESQL_VERSION == '10' ]]; then sudo add-apt-repository -y ppa:cartodb/gis; fi;"}, {"start": "sudo apt-get install -y --allow-unauthenticated --no-install-recommends --no-install-suggests postgresql-$POSTGRESQL_VERSION postgresql-client-$POSTGRESQL_VERSION postgresql-server-dev-$POSTGRESQL_VERSION postgresql-common postgresql-$POSTGRESQL_VERSION-postgis-$POSTGIS_VERSION postgresql-$POSTGRESQL_VERSION-postgis-$POSTGIS_VERSION-scripts postgis -t $TRAVIS_DIST", "end": "for i in $(pg_lsclusters  | tail -n +2 | awk '{print $1}'); do sudo pg_dropcluster --stop $i main; done;", "alternative end": "sudo rm -rf /etc/postgresql/$POSTGRESQL_VERSION /var/lib/postgresql/$POSTGRESQL_VERSION /var/ramfs/postgresql/$POSTGRESQL_VERSION"}], "CartoDB/mobile-sdk": [], "CartoDB/CartoDB-basemaps": [{"start": "npm install", "end": "jsonlint data/imposm3_mapping.json", "alternative end": "GLOBIGNORE=\"layers.yml:.travis.yml\""}], "Catalysts/cat-boot": [], "CartoDB/Windshaft-cartodb": [{"start": "sudo apt-get install -y libpangocairo-1.0-0 libpango1.0-dev pkg-config", "end": "sudo apt-get remove postgresql-$POSTGRESQL_VERSION postgresql-client-$POSTGRESQL_VERSION postgresql-server-dev-$POSTGRESQL_VERSION postgresql-common postgresql-client-common postgresql-$POSTGRESQL_VERSION-postgis-$POSTGIS_VERSION postgresql-$POSTGRESQL_VERSION-postgis-$POSTGIS_VERSION-scripts postgis", "alternative end": "if [[ $POSTGRESQL_VERSION == '10' ]]; then sudo add-apt-repository -y ppa:cartodb/gis; fi;"}, {"start": "sudo apt-get install -y --allow-unauthenticated --no-install-recommends --no-install-suggests postgresql-$POSTGRESQL_VERSION postgresql-client-$POSTGRESQL_VERSION postgresql-server-dev-$POSTGRESQL_VERSION postgresql-common postgresql-$POSTGRESQL_VERSION-postgis-$POSTGIS_VERSION postgresql-$POSTGRESQL_VERSION-postgis-$POSTGIS_VERSION-scripts postgis -t $TRAVIS_DIST", "end": "for i in $(pg_lsclusters  | tail -n +2 | awk '{print $1}'); do sudo pg_dropcluster --stop $i main; done;", "alternative end": "sudo rm -rf /etc/postgresql/$POSTGRESQL_VERSION /var/lib/postgresql/$POSTGRESQL_VERSION /var/ramfs/postgresql/$POSTGRESQL_VERSION"}, {"start": "cd cartodb-postgresql && make && sudo make install && cd ..", "end": "createdb template_postgis", "alternative end": "psql -c \"CREATE EXTENSION postgis\" template_postgis"}], "CartoDB/CartoDB-SQL-API": [{"start": "sudo apt-get install -y --allow-unauthenticated --no-install-recommends --no-install-suggests postgresql-$POSTGRESQL_VERSION postgresql-client-$POSTGRESQL_VERSION postgresql-server-dev-$POSTGRESQL_VERSION postgresql-common postgresql-$POSTGRESQL_VERSION-postgis-$POSTGIS_VERSION postgresql-$POSTGRESQL_VERSION-postgis-$POSTGIS_VERSION-scripts postgis gdal-bin -t $TRAVIS_DIST", "end": "for i in $(pg_lsclusters  | tail -n +2 | awk '{print $1}'); do sudo pg_dropcluster --stop $i main; done;", "alternative end": "sudo rm -rf /etc/postgresql/$POSTGRESQL_VERSION /var/lib/postgresql/$POSTGRESQL_VERSION /var/ramfs/postgresql/$POSTGRESQL_VERSION"}, {"start": "cd cartodb-postgresql && make && sudo make install && cd ..", "end": "createdb template_postgis", "alternative end": "psql -c \"CREATE EXTENSION postgis\" template_postgis"}], "geomesa/geomesa-tutorials": [], "CartoDB/torque": [], "CEA-LIST/N2D2": [{"start": "sudo apt-get install -y lcov", "end": "lcov -b . -d . -c -o ./coverage.info --no-external", "alternative end": "lcov -r coverage.info \"tests/*\" -o coverage.info"}, {"start": "sudo apt-get update -qq", "end": "sudo -E ./.travis/install.sh", "alternative end": "./.travis/build.sh"}], "CartoDB/grainstore": [], "aymara/lima": [], "cea-hpc/clustershell": [{"start": "pip install coverage", "end": "ssh-keygen -f ~/.ssh/id_rsa -N \"\"", "alternative end": "cp ~/.ssh/{id_rsa.pub,authorized_keys}"}, {"start": "sudo apt-get -y install pdsh", "end": "sudo sh -c 'echo ssh > /etc/pdsh/rcmd_default'", "alternative end": "nosetests -v --all-modules --with-coverage --cover-tests --cover-erase --cover-package=ClusterShell tests"}], "CartoDB/camshaft": [{"start": "sudo apt-get install -y --allow-unauthenticated --no-install-recommends --no-install-suggests postgresql-$POSTGRESQL_VERSION postgresql-client-$POSTGRESQL_VERSION postgresql-server-dev-$POSTGRESQL_VERSION postgresql-common", "end": "sudo pg_dropcluster --stop $POSTGRESQL_VERSION main", "alternative end": "sudo rm -rf /etc/postgresql/$POSTGRESQL_VERSION /var/lib/postgresql/$POSTGRESQL_VERSION"}], "zmap/zgrab2": [{"start": "git clone https://github.com/zmap/zschema && pushd zschema && pip install --user . && popd", "end": "docker ps -a", "alternative end": "make clean zgrab2 test"}], "CartoDB/cartodb-postgresql": [{"start": "sudo apt-get install -y --allow-unauthenticated --no-install-recommends --no-install-suggests postgresql-$POSTGRESQL_VERSION postgresql-client-$POSTGRESQL_VERSION postgresql-server-dev-$POSTGRESQL_VERSION postgresql-common", "end": "sudo pg_dropcluster --stop $POSTGRESQL_VERSION main", "alternative end": "sudo rm -rf /etc/postgresql/$POSTGRESQL_VERSION /var/lib/postgresql/$POSTGRESQL_VERSION /var/ramfs/postgresql/$POSTGRESQL_VERSION"}, {"start": "sudo make install", "end": "pg_lsclusters", "alternative end": "cat regression.out"}], "AliceO2Group/AliceO2": [], "cartologic/Cartoview": [{"start": "sudo apt-get install -y gcc gettext python3-pip libpq-dev sqlite3 git gdal-bin lsof psmisc", "end": "sudo update-java-alternatives --set java-1.8.0-openjdk-amd64;", "alternative end": "export JAVA_HOME=$(readlink -f /usr/bin/java | sed \"s:bin/java::\");"}, {"start": "pip install celery", "end": "paver setup_geoserver", "alternative end": "paver start_geoserver"}, {"start": "pip install coveralls", "end": "psql -U postgres -c \"create extension postgis\"", "alternative end": "chmod +x scripts/database/setup.sh"}], "root-project/root": [], "lwtnn/lwtnn": [{"start": "pip install h5py", "end": "$BUILD", "alternative end": "./tests/test-highway.sh"}], "AIDASoft/DD4hep": [{"start": "sudo apt-get update", "end": "rm -f cvmfs-release-latest_all.deb", "alternative end": "wget --no-check-certificate https://lcd-data.web.cern.ch/lcd-data/CernVM/default.local"}], "scikit-hep/awkward-array": [{"start": "pip install --upgrade setuptools_scm", "end": "python -c 'import numpy; print(numpy.__version__)'", "alternative end": "pip install pytest pytest-runner"}, {"start": "pip install pytest pytest-runner", "end": "python -c 'import uproot_methods; print(uproot_methods.__version__)'", "alternative end": "python -c 'import awkward; print(awkward.__version__)'"}, {"start": "if [[ $TRAVIS_PYTHON_VERSION != pypy*  &&  $NUMPY == \"numpy==1.13.1\" ]] ; then pip install h5py ; fi", "end": "export AWKWARD_DEPLOYMENT=awkward", "alternative end": "pip install --upgrade pyOpenSSL"}, {"start": "pip install --upgrade pyOpenSSL", "end": "scikit-hep:b6cgBXwccPoaCNLn5VKFJFVy", "alternative end": "echo \"DEPLOYING\" $AWKWARD_DEPLOYMENT"}], "cms-analysis/HiggsAnalysis-CombinedLimit": [{"start": "pip install mkdocs", "end": "skip", "alternative end": "mkdocs build --verbose --clean"}], "root-project/VecCore": [], "chaitin/strapdown-zeta": [{"start": "npm install -g grunt-cli", "end": "./build.sh && make -C server test", "alternative end": "[ -n \"$TRAVIS_TAG\" ] && server/upload_github_release.py"}], "SysBioChalmers/GECKO": [{"start": "pip install --upgrade pip setuptools wheel tox", "end": "travis_wait tox", "alternative end": "never"}], "reanahub/reana": [{"start": "travis_retry pip install --upgrade pip setuptools py", "end": "mkdir bin", "alternative end": "wget https://get.helm.sh/helm-v3.2.1-linux-amd64.tar.gz -O helm.tar.gz"}], "ShipSoft/FairShip": [], "ChaosGroup/json-ws": [{"start": "npm install", "end": "ubuntu-toolchain-r-test", "alternative end": "gcc-4.8"}], "PyCOMPLETE/PyHEADTAIL": [{"start": "pip install -r requirements.txt", "end": "pytest"}], "chartbeat-labs/textacy": [{"start": "pip install .", "end": "python -m spacy download en_core_web_sm", "alternative end": "python -m spacy link en_core_web_sm en"}], "indico/indico": [{"start": "pip install -U pip setuptools", "end": "npm ci", "alternative end": "FORCE_COLOR=1 npx react-jsx-i18n extract --ext jsx indico/web/client/ indico/modules/ > /dev/null"}], "c2mon/c2mon": [], "cernanalysispreservation/analysispreservation.cern.ch": [{"start": "travis_retry pip install kwalitee --pre", "end": "echo ${TRAVIS_COMMIT_RANGE}", "alternative end": "travis_retry pip install --upgrade pip setuptools==45.3.0 py"}, {"start": "travis_retry pip install --upgrade pip setuptools==45.3.0 py", "end": "cat requirements.txt > .travis-lowest-requirements.txt", "alternative end": "cd ui/cap-react && yarn install"}, {"start": "travis_retry pip install -r .travis-${REQUIREMENTS}-requirements.txt", "end": "sleep 15", "alternative end": "travis_retry pip install kwalitee GitPython --pre"}, {"start": "travis_retry pip install kwalitee GitPython --pre", "end": "./run-tests.sh"}], "UCATLAS/xAODAnaHelpers": [], "cernopendata/opendata.cern.ch": [{"start": "npm install -g jsonlint", "end": "./run-tests.sh --check-fixtures-only", "alternative end": "docker version"}], "chef-cookbooks/jenkins": [], "chef-cookbooks/erlang": [], "chef-cookbooks/perl": [], "SixTrack/SixTrack": [], "GooFit/GooFit": [{"start": "python -m pip install --user --upgrade pip", "end": ".ci/travis.sh", "alternative end": "if [[ -n \"${TRAVIS_TAG}\" ]] ; then echo \"Updating docs\" &&  cd \"${TRAVIS_BUILD_DIR}\" && .ci/build_docs.sh ; fi"}], "indico/flask-pluginengine": [{"start": "[[ \"$DEPS\" == \"lowest\" ]] && pip install jinja2==2.8 || :", "end": "python setup.py develop", "alternative end": "py.test --pep8"}], "xrootd/xrootd": [{"start": "make install", "end": "popd"}], "indico/flask-multipass": [{"start": "pip install -U pip setuptools", "end": "pytest --pep8", "alternative end": "coveralls"}], "chef-cookbooks/audit": [{"start": "CHEF_LICENSE=\"accept-no-persist\" sudo chef gem install webmock", "end": "eval \"$(chef shell-init bash)\"", "alternative end": "chef --version"}], "chef-cookbooks/docker": [], "chef/knife-ec-backup": [{"start": "gem update --system", "end": "gem --version", "alternative end": "bundle exec rake"}], "chef-cookbooks/users": [], "chef-cookbooks/ssh_known_hosts": [], "miketheman/knife-community": [], "chef-cookbooks/chef-ingredient": [], "cerner/common-kafka": [], "cerner/terra-core": [], "cerner/bunsen": [], "cerner/beadledom": [{"start": "sudo apt-get install -y gnupg2", "end": "./mvnw install -Dmaven.javadoc.skip=true -B -V -e", "alternative end": "if [[ \"$(echo 'VERSION=${project.version}' | ./mvnw org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate | grep '^VERSION')\" == *-SNAPSHOT ]]; then export IS_SNAPSHOT=true; fi"}], "chef-cookbooks/sudo": [], "chef-cookbooks/chef-server": [], "chef-cookbooks/auditd": [], "chef-cookbooks/cron": [], "chef-cookbooks/homebrew": [], "Cimpress-MCP/postal-codes-js": [{"start": "npm install", "end": "npm run test", "alternative end": "npm run coverage"}], "cibotech/evilplot": [], "chef-cookbooks/openssh": [], "Cinnober/semver-git": [], "chef-cookbooks/push-jobs": [], "cisco-system-traffic-generator/trex-core": [{"start": "pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib", "end": "python3 -u travis_files/wait_for_results.py", "alternative end": "2nd check"}, {"start": "pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib", "end": "python3 -u travis_files/wait_for_results.py", "alternative end": "3rd check"}, {"start": "pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib", "end": "python3 -u travis_files/wait_for_results.py", "alternative end": "4th check"}, {"start": "pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib", "end": "python3 -u travis_files/wait_for_results.py", "alternative end": "5th check"}, {"start": "pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib", "end": "python3 -u travis_files/wait_for_results.py", "alternative end": "6th check"}, {"start": "pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib", "end": "export IS_LAST=True", "alternative end": "python3 -u travis_files/wait_for_results.py"}], "chef-cft/wombat": [], "chef-cookbooks/chef_client_updater": [{"start": "gem install bundler", "end": "bundle --version", "alternative end": "gem update --system"}, {"start": "gem update --system", "end": "gem --version", "alternative end": "CHEF_LICENSE=accept"}], "chef-cookbooks/git": [], "chef-cookbooks/postfix": [], "cisco/ChezScheme": [], "seth/ej": [], "chef-cookbooks/rsyslog": [], "chef-cookbooks/chef-client": [], "CiscoDevNet/ydk-py": [], "chxdeng/mabain": [{"start": "sudo apt-get install libao-dev", "end": "cd /var/tmp", "alternative end": "sudo wget https://github.com/google/googletest/archive/release-1.7.0.tar.gz"}, {"start": "sudo make install", "end": "make unit-test", "alternative end": "cd $TRAVIS_BUILD_DIR/examples"}], "xenserver/xscontainer": [{"start": "pip install tox coveralls flake8", "end": "tox", "alternative end": "flake8 ."}], "chef-cookbooks/aws": [], "cisco/cisco-network-puppet-module": [{"start": "gem update --system $RUBYGEMS_VERSION", "end": "gem --version", "alternative end": "bundle -v"}], "cisco/cisco-network-chef-cookbook": [], "cisco/cisco-network-node-utils": [{"start": "gem install bundler -v '< 2'", "end": "bundle exec rake", "alternative end": "BUNDLE_FORCE_RUBY_PLATFORM=1"}], "mirage/ocaml-vchan": [], "citusdata/django-multitenant": [{"start": "pip install tox", "end": "tox"}], "cisco/libsrtp": [{"start": "pip3 install meson ninja", "end": "CC=gcc-6 EXTRA_CFLAGS=-Werror ./configure", "alternative end": "make"}, {"start": "pip3 install meson ninja", "end": "CC=gcc-6 EXTRA_CFLAGS=-Werror ./configure --enable-openssl", "alternative end": "make"}, {"start": "pip3 install meson ninja", "end": "CC=clang EXTRA_CFLAGS=-Werror ./configure --enable-openssl", "alternative end": "make"}, {"start": "pip3 install meson ninja", "end": "CC=gcc-6 EXTRA_CFLAGS=-Werror ./configure --enable-nss", "alternative end": "make"}, {"start": "pip3 install meson ninja", "end": "EXTRA_CFLAGS=-Werror ./configure", "alternative end": "make"}, {"start": "pip3 install meson ninja", "end": "make", "alternative end": "make runtest"}, {"start": "cmake -DOPENSSL_ROOT_DIR=$(brew --prefix openssl@1.1) -DENABLE_OPENSSL=ON ..", "end": "make", "alternative end": "make test"}, {"start": "PKG_CONFIG_PATH=$(brew --prefix openssl@1.1)/lib/pkgconfig meson setup --werror -Dcrypto-library=openssl builddir", "end": "meson compile -C builddir", "alternative end": "meson test -v -C builddir"}, {"start": "pip3 install meson ninja", "end": "make", "alternative end": "make runtest"}, {"start": "PKG_CONFIG_PATH=$(brew --prefix nss)/lib/pkgconfig meson setup --werror -Dcrypto-library=nss builddir", "end": "meson compile -C builddir", "alternative end": "meson test -v -C builddir"}, {"start": "sudo docker exec --tty mipsX apt-get update", "end": "sudo docker exec --tty mipsX bash -c 'EXTRA_CFLAGS=-static CC=mips-linux-gnu-gcc ./configure --host=mips-linux-gnu'", "alternative end": "sudo docker exec --tty mipsX make"}, {"start": "pip3 install meson", "end": "TEST=\"windows\"", "alternative end": "PATH=/c/Python38:/c/Python38/Scripts:$PATH"}, {"start": "pip3 install meson ninja", "end": "wget -q https://dl.google.com/android/repository/android-ndk-r20b-linux-x86_64.zip", "alternative end": "unzip -qq android-ndk-r20b-linux-x86_64.zip"}, {"start": "pip3 install meson ninja", "end": "wget -q https://raw.githubusercontent.com/leetal/ios-cmake/master/ios.toolchain.cmake", "alternative end": "mkdir build && cd build"}, {"start": "CFLAGS=\"-arch arm64 --sysroot=$(xcrun --sdk iphoneos --show-sdk-path) -miphoneos-version-min=8.0 -fembed-bitcode\" LDFLAGS=\"-arch arm64 --sysroot=$(xcrun --sdk iphoneos --show-sdk-path) -miphoneos-version-min=8.0 -fembed-bitcode\" AR=\"$(xcrun --find --sdk iphoneos ar)\" AS=\"$(xcrun --find --sdk iphoneos as)\" CC=\"$(xcrun --find --sdk iphoneos clang)\" CXX=\"$(xcrun --find --sdk iphoneos clang++)\" LD=\"$(xcrun --find --sdk iphoneos ld)\" RANLIB=\"$(xcrun --find --sdk iphoneos ranlib)\" STRIP=\"$(xcrun --find --sdk iphoneos strip)\" ./configure --host arm-apple-darwin", "end": "make", "alternative end": "make shared_library"}, {"start": "cat > ios-cross-file.txt <<EOF\n[host_machine]\nsystem = 'darwin'\ncpu_family = 'aarch64'\ncpu = 'aarch64'\nendian = 'little'\n\n[properties]\nc_args =      ['-arch', 'arm64', '--sysroot=$(xcrun --sdk iphoneos --show-sdk-path)', '-miphoneos-version-min=8.0']\nc_link_args = ['-arch', 'arm64', '--sysroot=$(xcrun --sdk iphoneos --show-sdk-path)', '-miphoneos-version-min=8.0']\n\n[binaries]\nar        = '$(xcrun --find --sdk iphoneos ar)'\nc         = '$(xcrun --find --sdk iphoneos clang)'\ncpp       = '$(xcrun --find --sdk iphoneos clang++)'\nranlib    = '$(xcrun --find --sdk iphoneos ranlib)'\nstrip     = '$(xcrun --find --sdk iphoneos strip)'\npkgconfig = 'false'\nEOF\n", "end": "meson setup --werror -Db_bitcode=true --cross-file ios-cross-file.txt builddir", "alternative end": "meson compile -C builddir"}], "citusdata/docker": [], "xapi-project/xen-api": [], "xenserver/xe-guest-utilities": [], "cisco/openh264": [{"start": "sudo apt-get update -qq", "end": "make gmp-bootstrap", "alternative end": "make gtest-bootstrap"}], "xenserver/planex": [{"start": "pip install --upgrade -r requirements.txt", "end": "pycodestyle --show-source --show-pep8 setup.py planex tests", "alternative end": "pylint setup.py planex tests"}], "citusdata/postgresql-topn": [], "xenserver/packer-builder-xenserver": [], "citusdata/activerecord-multi-tenant": [{"start": "gem install bundler -v 2.1.4", "end": "bundle exec rake spec"}], "cjdev/kafka-rx": [], "civisanalytics/civisml-extensions": [{"start": "pip install --upgrade pip setuptools", "end": "pip list", "alternative end": "flake8 civismlext"}], "civisanalytics/civis-python": [{"start": "pip install --upgrade pip setuptools", "end": "CIVIS_API_KEY=FOOBAR", "alternative end": "flake8 civis"}], "cisco/elsy": [{"start": "sudo apt-get update && sudo apt-get install -y curl apt-transport-https ca-certificates python-software-properties", "end": "sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -", "alternative end": "sudo apt-key fingerprint 0EBFCD88"}, {"start": "sudo apt-get update", "end": "sudo apt-get purge lxc-docker docker docker-engine docker.io", "alternative end": "sudo apt-get install docker-ce=${DOCKER_VERSION}~ce-0~ubuntu"}, {"start": "sudo apt-get install docker-ce=${DOCKER_VERSION}~ce-0~ubuntu", "end": "curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose", "alternative end": "chmod +x docker-compose"}], "Clarifai/clarifai-android-starter": [], "ClearcodeHQ/pytest-elasticsearch": [{"start": "pip install \"setuptools>=18.5.0\" coveralls", "end": "bash .travis.install-elasticsearch.sh", "alternative end": "py.test -n 0 -k \"not test_external_elastic\""}, {"start": "pip install -r requirements-lint.txt", "end": "skip", "alternative end": "pycodestyle"}], "Clarifai/lambdafai": [], "Clarifai/clarifai-javascript": [], "HdrHistogram/HdrHistogram_py": [{"start": "pip install -r requirements.txt", "end": "python setup.py build", "alternative end": "python setup.py install"}], "ClearcodeHQ/pytest-redis": [{"start": "pip install -r requirements-test.txt", "end": "py.test -v --cov pytest_redis tests/", "alternative end": "coveralls"}, {"start": "pip install -r requirements-lint.txt", "end": "pycodestyle", "alternative end": "pydocstyle"}], "cisco/open-nFAPI": [{"start": "sudo apt-get install doxygen", "end": "autoreconf -i", "alternative end": "cisco-open-nFAPI"}], "Clarifai/clarifai-python": [{"start": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then\n  brew update\n  brew install openssl readline\n  brew outdated pyenv || brew upgrade pyenv\n  brew install pyenv-virtualenv\n  pyenv install $PYTHON\n  export PYENV_VERSION=$PYTHON\n  export PATH=\"/Users/travis/.pyenv/shims:${PATH}\"\n  pyenv-virtualenv venv\n  source venv/bin/activate\n  python --version\nfi\n", "end": "./assert-code-quality.sh", "alternative end": "export PYTHONPATH=."}], "ClearcodeHQ/pytest-postgresql": [{"start": "pip install -r requirements-test.txt", "end": "py.test -n 0", "alternative end": "coveralls"}, {"start": "pip install -r requirements-lint.txt", "end": "pycodestyle", "alternative end": "pydocstyle"}, {"start": "pip3 install virtualenv", "end": "virtualenv venv -p python3", "alternative end": "source venv/bin/activate"}], "cisco/node-jose": [], "cisco/joy": [{"start": "sudo apt-get install -y build-essential libssl-dev libpcap-dev libcurl4-openssl-dev", "end": "./configure --enable-gzip", "alternative end": "make clean"}, {"start": "make install DESTDIR=/tmp/joyinstall prefix=/tmp/joy", "end": "make dist", "alternative end": "bin/unit_test"}], "Clarifai/clarifai-java": [], "clearmatics/mobius": [], "CleverCloud/clever-tools": [], "husky/husky": [], "cliqz-oss/keyvi": [], "serby/uber-cache": [], "skeymeulen/swangular": [{"start": "npm install", "end": "npm test", "alternative end": "SAUCE_USERNAME=sanderkeymeulen"}], "cloudant/python-cloudant": [{"start": "pip install -r requirements.txt && pip install -r test-requirements.txt", "end": "while [ $? -ne 0 ]; do sleep 1 && curl -v http://localhost:5984; done", "alternative end": "curl -X PUT http://localhost:5984/_users"}], "cloudant/swift-cloudant": [{"start": "brew install couchdb", "end": "swift build && swift test", "alternative end": "couchdb"}], "cliqz-oss/browser-core": [], "cloudera-ps/prereq-checks": [], "cloudera/navigator-sdk": [], "cloudinary/cloudinary_scala": [], "cloudinary/cloudinary_ios": [], "cloudinary/cloudinary_android": [], "cloudinary/cloudinary-react": [], "cloudinary/cloudinary_gem": [{"start": "gem install bundler -v 1.17.3", "end": "Ruby 2.5.3", "alternative end": "xenial"}, {"start": "gem install bundler", "end": "export CLOUDINARY_URL=$(bash tools/get_test_cloud.sh); echo cloud_name: \"$(echo $CLOUDINARY_URL | cut -d'@' -f2)\"\n", "alternative end": "bundle exec rspec"}], "cloudinary/cloudinary_angular": [], "cloudlinux/libcare": [], "cloudinary/cloudinary_php": [], "cloudinary/cloudinary_js": [{"start": "npm install", "end": "npm run build"}], "cloudinary/cloudinary_java": [], "cloudinary/cloudinary-vue": [], "cloudinary/cloudinary_npm": [], "cloudinary/pycloudinary": [{"start": "pip install tox", "end": "export CLOUDINARY_URL=$(bash tools/get_test_cloud.sh); echo cloud_name: \"$(echo $CLOUDINARY_URL | cut -d'@' -f2)\"\n", "alternative end": "tox -e $TOXENV"}], "cloudius-systems/capstan": [{"start": "sudo apt-get update -qq", "end": "export PATH=/home/travis/gopath/bin:$PATH", "alternative end": "go get gopkg.in/check.v1"}], "cloudius-systems/osv": [], "cloudflare/cfdeploy": [], "joeynmt/joeynmt": [{"start": "if [[ $TRAVIS_PYTHON_VERSION == 3.6 ]]; then pip install https://download.pytorch.org/whl/cpu/torch-1.1.0-cp36-cp36m-linux_x86_64.whl; fi", "end": "python setup.py install", "alternative end": "pytest"}], "3DGenomes/tadbit": [{"start": "pip install coveralls", "end": "python --version", "alternative end": "export COVERALLS_SERVICE_NAME=travis-ci"}], "I2PC/scipion": [], "riatelab/magrit": [{"start": "pip install --upgrade \"setuptools>=25.1\" pip", "end": "python setup.py install", "alternative end": "python setup.py build_ext --inplace"}], "xcat2/xcat-core": [{"start": "sudo apt-get install -y git fakeroot reprepro devscripts debhelper libcapture-tiny-perl libjson-perl libsoap-lite-perl libdbi-perl quilt openssh-server dpkg looptools genometools software-properties-common", "end": "perl -v", "alternative end": "echo $TRAVIS_BUILD_ID"}], "ClusterHQ/flocker": [{"start": "pip install tox awscli", "end": "FLOCKER_BUILDER=test-admin", "alternative end": "FLOCKER_BUILDER=test-benchmark"}], "Cocoanetics/DTLoupe": [{"start": "not valid", "stop": "not valid"}], "codecentric/spring-boot-starter-batch-web": [], "Codebrahma/React-Lite-UI": [{"start": "npm install", "end": "npm run test", "alternative end": "branch = master"}], "codecentric/chaos-monkey-spring-boot": [], "jonashackt/kubernetes-the-ansible-way": [{"start": "pip install ansible", "end": "ansible --version", "alternative end": "printf '[defaults]\\nroles_path=../' >ansible.cfg"}], "apache/mynewt-newt": [], "codeclimate/javascript-test-reporter": [{"start": "npm install -g codeclimate-test-reporter", "end": "codeclimate-test-reporter < ./coverage/lcov.info"}], "apache/mynewt-nimble": [{"start": "if [ \"${TEST}\" == \"STYLE\" ]; then\n  pip3 install requests\nelse\n  $HOME/ci/${TRAVIS_OS_NAME}_travis_install.sh\nfi\n", "end": "if [ \"${TEST}\" == \"STYLE\" ]; then\n  $HOME/ci/install_uncrustify.sh\nelse\n  newt version\n  gcc --version\n  if [ \"${TEST}\" != \"TEST_ALL\" ]; then arm-none-eabi-gcc --version; fi\n  cp -R $HOME/ci/mynewt-nimble-project.yml project.yml\n  mkdir -p targets\n  cp -R $HOME/ci/mynewt-nimble-targets targets\n  $HOME/ci/prepare_test.sh $VM_AMOUNT\n  mkdir -p repos && pushd repos/\n  git clone --depth=1 https://github.com/apache/mynewt-core apache-mynewt-core\n  git clone --depth=1 https://github.com/JuulLabs-OSS/mcuboot mcuboot\n  git clone --depth=1 https://github.com/apache/mynewt-mcumgr apache-mynewt-mcumgr\n  popd\nfi\n", "alternative end": "if [ \"${TEST}\" == \"STYLE\" ]; then\n  python3 $HOME/ci/check_style.py\nelse\n  $HOME/ci/run_test.sh\nfi\n"}], "codeclimate/php-test-reporter": [], "codeplaysoftware/computecpp-sdk": [{"start": "sudo apt-get update -q", "end": "bash .travis/build_computecpp.sh", "alternative end": "mkdir build && cd build"}], "codeplaysoftware/sycl-blas": [], "codeplaysoftware/visioncpp": [], "codecombat/esper.js": [], "codecombat/aether": [], "codecombat/codecombat": [{"start": "npm install -g npm@6.x", "end": "export DISPLAY=:99.0", "alternative end": "sh -e /etc/init.d/xvfb start"}], "codeship/shipyard": [], "CodeYellowBV/mobx-spine": [], "CodeYellowBV/chartist-plugin-legend": [{"start": "npm install", "end": "cat coverage/report-lcov/lcov.info | node_modules/.bin/coveralls", "alternative end": "npm test"}], "codurance/task-list": [], "codus/codelog": [], "COEXCZ/django-translation-manager": [{"start": "pip install tox coveralls", "end": "tox -e $TOX_ENV", "alternative end": "coverage report -m"}], "coi-gov-pl/spring-clean-architecture": [], "Cognifide/bobcat": [], "coi-gov-pl/puppet-jboss": [{"start": "bundler --version || gem install bundler", "end": "True", "alternative end": "1.8"}], "Cognifide/Slice": [], "Coding/WebIDE-Backend": [{"start": "sudo apt-get update", "end": "sudo apt-get -y -o Dpkg::Options::=\"--force-confnew\" install docker-ce", "alternative end": "if [ -f ${DOCKER_CACHE_FILE} ]; then gunzip -c ${DOCKER_CACHE_FILE} | docker load; fi"}], "Coding/WebIDE": [{"start": "sudo apt-get update", "end": "sudo apt-get -y -o Dpkg::Options::=\"--force-confnew\" install docker-ce", "alternative end": "nvm install 7"}], "Cognifide/AEM-Rules-for-SonarQube": [], "Cognifide/AET": [], "Coding/WebIDE-Frontend": [{"start": "sudo apt-get update", "end": "sudo apt-get -y -o Dpkg::Options::=\"--force-confnew\" install docker-ce", "alternative end": "if [ -f ${DOCKER_CACHE_FILE} ]; then gunzip -c ${DOCKER_CACHE_FILE} | docker load; fi"}], "Collaborne/paper-fab-speed-dial": [{"start": "npm install web-component-tester bower polylint", "end": "$(npm bin)/bower install", "alternative end": "$(npm bin)/polylint --no-recursion"}], "Collaborne/paper-search": [{"start": "npm install web-component-tester bower polylint", "end": "$(npm bin)/bower install", "alternative end": "$(npm bin)/polylint --no-recursion"}], "Collaborne/paper-bottom-sheet": [], "Collaborne/paper-date-picker-item": [{"start": "npm install web-component-tester bower polylint", "end": "$(npm bin)/bower install", "alternative end": "$(npm bin)/polylint --no-recursion"}], "Collaborne/paper-stepper": [{"start": "npm install web-component-tester bower polylint", "end": "$(npm bin)/bower install", "alternative end": "$(npm bin)/polylint --no-recursion"}], "Collaborne/paper-contact": [{"start": "npm install web-component-tester bower polylint", "end": "$(npm bin)/bower install", "alternative end": "$(npm bin)/polylint --no-recursion"}], "Collaborne/d3-progress-meter": [{"start": "npm install web-component-tester bower polylint", "end": "$(npm bin)/bower install", "alternative end": "$(npm bin)/polylint --no-recursion"}], "pxscene/pxCore": [], "Collaborne/paper-collapse-item": [{"start": "npm install", "end": "npm run lint", "alternative end": "xvfb-run npm test || echo 'Tests are broken on Travis due to Selenium/Chrome/Firefox/WebComponentTester/Polymer incompatibilities'"}], "Comcast/jrugged": [], "Comcast/Xooie": [], "vinyldns/vinyldns": [{"start": "gem update --system", "end": "du -h -d 1 $HOME/.ivy2/", "alternative end": "du -h -d 2 $HOME/.sbt/"}], "comindware/core-ui": [], "SphereIO/sphere-scala-libs": [], "commercetools/commercetools-sunrise-java": [], "commercetools/commercetools-jvm-sdk": [], "HenriqueCaires/ZabbixApi": [], "pezra/exhal": [], "ConfettiFX/The-Forge": [], "ConsenSys/EthOn": [], "ConSol/docker-headless-vnc-container": [], "consoleau/kotlin-jpa-specification-dsl": [], "confluentinc/bottledwater-pg": [{"start": "gem install bundler", "end": "make -j5 test-bundle", "alternative end": "make -j5 docker-compose"}], "confluentinc/confluent-kafka-dotnet": [], "ctxis/django-admin-view-permission": [{"start": "pip install -r requirements-debug.txt", "end": "pip freeze", "alternative end": "flake8 ."}], "ctxis/cvsslib": [{"start": "pip install --upgrade pip wheel", "end": "export PYTHONPATH=./tests/:$PYTHONPATH", "alternative end": "cd tests && py.test . -l -n auto"}], "Contiamo/react-connect-context": [], "confluentinc/confluent-kafka-go": [{"start": "if [[ $TRAVIS_OS_NAME == linux ]]; then sudo apt-get update -q ; fi", "end": "rm -rf tmp-build", "alternative end": "if [[ -n $BUILD_TYPE ]]; then bash mk/bootstrap-librdkafka.sh ${LIBRDKAFKA_VERSION} tmp-build ; fi"}], "ConsenSys/solidity-parser": [], "ContinuumIO/cyberpandas": [], "Conda/conda-build": [{"start": "pip install pkginfo", "end": "conda info -a", "alternative end": "./ci/travis/run.sh"}], "confluentinc/confluent-kafka-python": [{"start": "if [[ -n $TRAVIS_TAG && -n $CIBW_BEFORE_BUILD ]]; then pip install -U -r tools/requirements-manylinux.txt --force-reinstall ; fi", "end": "tools/install-interceptors.sh", "alternative end": "pip install -r tests/requirements.txt"}, {"start": "pip install -r tests/requirements.txt", "end": "flake8", "alternative end": "if [[ $MK_DOCS == y ]]; then pip install -r docs/requirements.txt; fi"}, {"start": "if [[ $MK_DOCS == y ]]; then pip install -r docs/requirements.txt; fi", "end": "if [[ -n $TRAVIS_TAG && -n $CIBW_BEFORE_BUILD ]]; then cibuildwheel --output-dir wheelhouse1 && tools/fixup-wheels.sh wheelhouse1 wheelhouse; fi", "alternative end": "ldd staging/libs/* || otool -L staging/libs/* || true"}], "Contrast-Security-OSS/DjanGoat": [{"start": "make install", "end": "ci/travis_before_script.sh", "alternative end": "make lint"}], "ContinuumIO/elm": [], "Conda/constructor": [], "Wirecloud/wirecloud": [], "ContinuumIO/ciocheck": [], "ContinuumIO/earthio": [], "CoorpAcademy/docker-pyspark": [], "mirakui/ec2ssh": [{"start": "gem install bundler -v 1.14.3", "end": "CYxJDs0jJkrgXfbOyHuF+gJtxgK5JjS0GAFRNOlkWlDUmpEErtcnPuBOrlzkIBJS4eXaDOuSvpyRJSuJZJjEhmp94GEI98GEcyvByHuaehUWhzhUrhXstX/gg/Ntt6jiFR5dC6NrRWAnmKb7cDsfvagGAVNAuNzAtX0Z9iXWQDo="}], "CopernicaMarketingSoftware/AMQP-CPP": [{"start": "docker exec -t ubuntu-test-container bash -c \"apt-get update -y && apt-get --no-install-recommends install -y software-properties-common cmake ninja-build libboost-all-dev libev-dev libuv1-dev ninja-build libssl-dev $COMPILER_PACKAGE && apt-get -y clean && rm -rf /var/lib/apt/lists/*\"", "end": "docker exec -t ubuntu-test-container bash -c \"cd /travis && export CC=/usr/bin/$C_COMPILER && export CXX=/usr/bin/$CXX_COMPILER && mkdir build.release && cd build.release && cmake ${CMAKE_OPTIONS} -DAMQP-CPP_BUILD_EXAMPLES=ON -DAMQP-CPP_LINUX_TCP=ON --config Release -GNinja .. && cmake --build . && cd ..\""}], "CopernicaMarketingSoftware/PHP-CPP": [], "badoo/MVICore": [], "badoo/Chatto": [], "badoo/ios-collection-batch-updates": [], "ladybirdDEV/ui-nuclear-mobile": [], "mailru/fest": [], "loopfz/gadgeto": [], "Devatoria/go-mesos-executor": [], "mailru/go-clickhouse": [], "globocom/alchemetrics": [], "thumbor/thumbor-plugins": [{"start": "sudo apt-get update -y", "end": "cd ~", "alternative end": "wget https://github.com/uclouvain/openjpeg/archive/version.2.0.1.tar.gz"}, {"start": "sudo make install", "end": "sudo make clean", "alternative end": "sudo ldconfig /usr/lib"}, {"start": "sudo make install", "end": "cd ~", "alternative end": "sudo apt-get install imagemagick libgraphicsmagick1-dev libmagickwand-dev perlmagick apache2-prefork-dev"}, {"start": "sudo apt-get install imagemagick libgraphicsmagick1-dev libmagickwand-dev perlmagick apache2-prefork-dev", "end": "wget https://github.com/rflynn/imgmin/archive/v1.1.tar.gz", "alternative end": "tar xf v1.1.tar.gz"}, {"start": "sudo make install", "end": "cd $PROJECT_DIR", "alternative end": "LDFLAGS=-lm sudo aptitude install -y $(< requirements)"}, {"start": "LDFLAGS=-lm sudo aptitude install -y $(< requirements)", "end": "make setup", "alternative end": "cd ~"}, {"start": "sudo make install", "end": "cd $PROJECT_DIR", "alternative end": "make test"}], "globocom/pluct": [], "globocom/tornado-es": [{"start": "sudo apt-get install oracle-java8-set-default", "end": "sudo apt-get purge elasticsearch -fy", "alternative end": "sudo dpkg -i --force-confnew elasticsearch-5.0.0.deb"}, {"start": "sudo apt-get install oracle-java8-set-default", "end": "sudo apt-get purge elasticsearch -fy", "alternative end": "sudo dpkg -i --force-confnew elasticsearch-5.5.1.deb"}], "mailru/tarantool-authman": [], "NE-LOAN-FED/NE-Component": [{"start": "npm install -g eslint", "end": "node_modules", "alternative end": "npm run lint"}], "globocom/share-bar": [], "JJ/IV-18-19": [], "globocom/tapioca": [{"start": "pip install -r requirements.txt --use-mirrors", "end": "make test"}], "NSFI/ppfish-components": [{"start": "npm install", "end": "npm run test", "alternative end": "npm run lint"}], "JJ/IV": [{"start": "sudo apt-get update -qq", "end": "curl https://raw.githubusercontent.com/JJ/Test-Text/master/data/Spanish.aff -o Spanish.aff", "alternative end": "curl https://raw.githubusercontent.com/SublimeText/Dictionaries/master/Spanish.dic -o Spanish.dic"}], "tsuru/tsuru-autoscale": [], "globocom/derpconf": [{"start": "sudo apt-get install -y librtmp-dev libevent-dev", "end": "make setup", "alternative end": "make test"}], "CenterForOpenScience/osf.io": [{"start": "travis_retry pip install --upgrade pip", "end": "travis_retry invoke wheelhouse --dev --addons", "alternative end": "if [ \"$TEST_BUILD\" = \"api1_and_js\" ]; then\n nvm install 8.6.0\n nvm use 8.6.0\n curl -o- -L https://yarnpkg.com/install.sh | bash\n export PATH=$HOME/.yarn/bin:$PATH\n travis_retry invoke assets --dev\nfi\n"}, {"start": "travis_retry pip install psycopg2==2.7.3 --no-binary psycopg2", "end": "travis_retry invoke requirements --dev --addons", "alternative end": "pip uninstall uritemplate.py --yes"}, {"start": "pip install uritemplate.py==0.3.0", "end": "inv remove_failures_from_testmon --db-path=$HOME/.cache/testmon/.testmondata_$TEST_BUILD", "alternative end": "export COVERAGE=`if [ \"$TRAVIS_BRANCH\" == \"master-w-coverage\" ]; then echo \"--coverage\"; else echo \"\"; fi`"}], "codeskyblue/gohttpserver": [], "thumbor/ruby-thumbor": [], "CenterForOpenScience/waterbutler": [{"start": "travis_retry pip install --upgrade pip", "end": "travis_retry invoke wheelhouse --develop", "alternative end": "travis_retry invoke install --develop"}], "thumbor/opencv-engine": [{"start": "sudo apt-get update", "end": "INSTALLDIR=$(python -c \"import os; import numpy; import cv2; print(os.path.dirname(cv2.__file__))\")", "alternative end": "make setup"}], "thumbor/thumbor": [{"start": "pip install --upgrade pip", "end": "cd $TRAVIS_BUILD_DIR && make setup", "alternative end": "pip install coveralls"}, {"start": "pip install coveralls", "end": "sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 379CE192D401AB61", "alternative end": "echo \"deb https://dl.bintray.com/loadimpact/deb stable main\" | sudo tee -a /etc/apt/sources.list"}, {"start": "sudo apt-get -y install k6", "end": "cd $TRAVIS_BUILD_DIR && make redis", "alternative end": "make ci_test"}], "netease-im/NIM_iOS_UIKit": [{"start": "gem install cocoapods -v  1.3.1", "end": "echo Install Example pod dependence", "alternative end": "pushd Example"}], "thumbor/libthumbor": [{"start": "pip install --upgrade pip", "end": "cd $TRAVIS_BUILD_DIR && make setup", "alternative end": "pip install coveralls"}, {"start": "pip install coveralls", "end": "make ci_test", "alternative end": "coveralls"}], "globocom/alf": [], "CenterForOpenScience/ember-osf": [], "globocom/GloboNetworkAPI": [], "CenterForOpenScience/modular-file-renderer": [{"start": "travis_retry pip install --upgrade pip", "end": "travis_retry invoke wheelhouse --develop", "alternative end": "travis_retry invoke install --develop"}], "CenterForOpenScience/pydocx": [{"start": "pip install tox", "end": "tox -v -e $TOX_ENV -- --verbose", "alternative end": "False"}], "tsuru/tsuru-dashboard": [], "tsuru/gandalf": [{"start": "python -m pip install --user virtualenv", "end": "virtualenv -p python2 venv", "alternative end": "source venv/bin/activate && make doc"}], "CoSMoSoftware/OBS-studio-webrtc": [], "CenterForOpenScience/SHARE": [{"start": "travis_retry pip install --upgrade pip", "end": "wget -q --waitretry=1 --retry-connrefused -T 10 -O - http://127.0.0.1:9200", "alternative end": "flake8 ."}], "tsuru/healthcheck-as-a-service": [], "CenterForOpenScience/scrapi": [{"start": "travis_retry pip install -U invoke==0.11.1 coveralls", "end": "travis_retry invoke wheelhouse --develop", "alternative end": "travis_retry invoke requirements --develop"}], "couchbase/couchbase-lite-ios": [{"start": "brew update", "end": "xcodebuild test -project CouchbaseLite.xcodeproj -scheme \"$SCHEME\" -sdk iphonesimulator -destination \"platform=iOS Simulator,name=iPhone 11\" -enableCodeCoverage YES -quiet", "alternative end": "test \"$SCHEME\" = \"CBL_ObjC\" && slather"}], "CenterForOpenScience/ember-osf-web": [], "tsuru/docker-cluster": [], "couchbase/moss": [], "tsuru/monsterqueue": [], "couchbaselabs/fleece": [], "coupang/spring-data-requery": [], "globocom/megadraft": [], "CovenantSQL/CovenantSQL": [], "globocom/react-native-draftjs-render": [{"start": "cd sample && npm install && npm run sync-lib && cd ../", "end": "npm run test-coveralls"}], "tsuru/tsuru": [], "Coveo/react-vapor": [], "globocom/gothumbor": [], "Coveo/Search-UI": [{"start": "npm install -g npm@5.5.1", "end": "source read.version.sh", "alternative end": "echo $PACKAGE_JSON_VERSION"}], "thumbor/remotecv": [{"start": "pip install coveralls", "end": "cd $TRAVIS_BUILD_DIR && poetry install", "alternative end": "pip install coveralls"}, {"start": "pip install coveralls", "end": "make ci-test", "alternative end": "coveralls"}], "covermymeds/fetching-gem": [], "tsuru/rpaas": [{"start": "pip install -U pip", "end": "make deps", "alternative end": "curl -k -LO https://releases.hashicorp.com/consul/0.6.4/consul_0.6.4_linux_amd64.zip"}], "covermymeds/rubocop-thread_safety": [{"start": "gem install --remote bundler", "end": "bundle install --retry=3", "alternative end": "bundle exec rspec"}], "emerleite/tsuru-bluegreen": [{"start": "pip install -r test_requirements.txt", "end": "nosetests test/config_test.py test/bluegreen_test.py", "alternative end": "False"}], "Coveros/zap-sonar-plugin": [], "luizbafilho/fusis": [], "globocom/content-gateway-ruby": [], "globocom/tornado-cors": [], "globocom/m3u8": [], "CoxAutomotiveDataSolutions/waimak": [], "cozy/cozy-banks": [], "Cox-Automotive/terraform-provider-alks": [], "globocom/redis-healthy": [{"start": "sudo apt-get update", "end": "sudo apt-get -o Dpkg::Options::=\"--force-confdef\" \\\n -o Dpkg::Options::=\"--force-confold\" --assume-yes install docker-engine\n", "alternative end": "docker version"}, {"start": "sudo pip install docker-compose", "end": "docker-compose version", "alternative end": "make test"}], "Cox-Automotive/ALKS-CLI": [], "cozy/cozy-ui": [], "tsuru/planb": [], "cozy/cozy-drive": [{"start": "sudo apt-get install nodejs", "end": "curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version 1.22.4", "alternative end": "export PATH=\"$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH\""}], "Crate/crate-admin": [{"start": "pip install --user codecov", "end": "npm run travis", "alternative end": "/.*\\/.*/"}, {"start": "pip install --user codecov", "end": "npm run travis", "alternative end": "/.*\\/.*/"}], "tsuru/postgres-api": [{"start": "sudo apt-get update -qq", "end": "psql -c \"CREATE ROLE ptest WITH SUPERUSER LOGIN PASSWORD 'ptest'\" -U postgres", "alternative end": "psql -c \"CREATE DATABASE ptest WITH OWNER ptest\" -U postgres"}], "tsuru/platforms": [], "globocom/database-as-a-service": [], "globocom/measures": [{"start": "pip install -r test_requirements.txt", "end": "make tests"}], "open-vv/vv": [{"start": "if test $TRAVIS_OS_NAME == osx ; then brew update; fi", "end": "if test $TRAVIS_OS_NAME == linux ; then sudo add-apt-repository --yes ppa:kubuntu-ppa/backports; fi", "alternative end": "if test $TRAVIS_OS_NAME == linux ; then sudo apt-get update -qq; fi"}, {"start": "if test $TRAVIS_OS_NAME == linux ; then sudo apt-get update -qq; fi", "end": "export NUM_THREADS=2", "alternative end": "export cwd=$(pwd)"}, {"start": "if test $TRAVIS_OS_NAME == linux ; then sudo apt-get install -y -qq build-essential cmake; fi", "end": "$SCRIPTS/travis_build_qt.sh", "alternative end": "if test $TRAVIS_OS_NAME == linux; then sudo apt-get -y install libgdcm2-dev libpq-dev; fi"}, {"start": "if test $TRAVIS_OS_NAME == linux; then sudo apt-get -y install libgdcm2-dev libpq-dev; fi", "end": "if test $TRAVIS_OS_NAME == linux; then if [[ \"$QT_VERSION\" == \"5.5.1\" ]] ; then QTDIR=\"/opt/qt55\" && PATH=\"$PATH:$QTDIR/bin\" && qt55-env.sh ; fi; fi", "alternative end": "if test $TRAVIS_OS_NAME == linux; then cd $HOME && wget https://cmake.org/files/v3.11/cmake-3.11.4-Linux-x86_64.tar.gz && tar -xzf cmake-3.11.4-Linux-x86_64.tar.gz && export PATH=$HOME/cmake-3.11.4-Linux-x86_64/bin:${PATH} ; fi"}, {"start": "if test $TRAVIS_OS_NAME == osx ; then export HOMEBREW_QT_VERSION=$(brew list --versions qt | rev | cut -d' ' -f1 | rev); fi", "end": "if test $TRAVIS_OS_NAME == osx ; then export PATH=\"/usr/local/opt/qt/bin:/usr/local/opt/ccache/libexec:$PATH\"; fi", "alternative end": "if test $TRAVIS_OS_NAME == osx ; then qmake -v; fi"}], "hastic/hastic-server": [{"start": "npm install", "end": "npm test", "alternative end": "node_js"}, {"start": "npm install", "end": "npm run build", "alternative end": "python"}, {"start": "pip install -r requirements.txt", "end": "python -m unittest discover", "alternative end": "False"}], "Crate/crate-pdo": [], "Crate/crate-mesos-framework": [], "Crate/crate_ruby": [], "Crate/docker-crate": [{"start": "pip install -r requirements.txt", "end": "VERSION=$(curl -s https://crate.io/versions.json | grep crate_testing | tr -d '\" ' | cut -d \":\" -f2)", "alternative end": "./update.py --cratedb-version ${VERSION} > Dockerfile"}], "Crate/activerecord-crate-adapter": [], "Crate/crate-dbal": [], "edp963/wormhole": [], "crobox/clickhouse-scala-client": [], "Criteo/loop": [], "crs4/most-voip": [], "Criteo/biggraphite": [{"start": "if [ -n \"$TOXENV\" ]; then pip install tox coveralls; fi", "end": "if $JAVA; then mvn verify -B -V ; fi", "alternative end": "if [ -n \"$TOXENV\" ]; then tox; fi"}], "Criteo/graphite-remote-adapter": [], "crs4/hl7apy": [{"start": "pip install coveralls", "end": "python setup.py install", "alternative end": "nosetests tests hl7apy --with-doctest --with-coverage --cover-package hl7apy"}], "crs4/pydoop": [{"start": "pip install flake8", "end": "True", "alternative end": "flake8 -v ."}], "Criteo/cuttle": [{"start": "sudo apt-get install -y yarn=1.13.0-1", "end": "openssl aes-256-cbc -K $encrypted_fb9a491fd14b_key -iv $encrypted_fb9a491fd14b_iv -in .travis/keys.tar.enc -out .travis/keys.tar -d", "alternative end": "tar xvf .travis/keys.tar"}], "Criteo/consul-templaterb": [], "Criteo/slab": [{"start": "sudo apt-get update && sudo apt-get -y install yarn", "end": "yarn", "alternative end": "yarn run lint"}], "Criteo/tf-yarn": [{"start": "pip install -U pip setuptools", "end": "pip freeze", "alternative end": "pytest tests"}], "Criteo/Spark-RSVD": [], "Criteo/vizsql": [], "criteo-cookbooks/choregraphie": [], "Criteo/lolhttp": [], "criteo-cookbooks/ms_dotnet": [], "cryptape/ruby-bitcoin-secp256k1": [{"start": "gem install bundler", "end": "git submodule update --init --recursive", "alternative end": "./install_lib.sh"}, {"start": "gem install code_quality --no-ri --no-rdoc", "end": "bundle install", "alternative end": "code_quality security_audit:bundler_audit"}], "Criteo/garmadon": [], "cryptape/bft-rs": [], "Criteo/kerberos-docker": [{"start": "make install OS_CONTAINER=${OS_CONTAINER}", "end": "make test TEST_ON_HOST_MACHINE=yes", "alternative end": "cat /tmp/krb5-test-${OS_CONTAINER}.log"}], "Criteo/vagrant-winrm": [], "Criteo/findjars": [], "Criteo/kafka-sharp": [], "CSCfi/shibboleth-idp-oidc-extension": [], "eth-cscs/reframe": [{"start": "pip install -r requirements.txt", "end": "coverage run --source=reframe,unittests ./test_reframe.py", "alternative end": "coverage report -m"}], "ElmerCSC/elmerfem": [], "aehrc/VariantSpark": [], "SRI-CSL/PVS": [], "potassco/guide": [], "moves-rwth/storm": [], "cksystemsgroup/scal": [], "ctidigital/magento2-configurator": [], "culqi/Culqi-PHP": [], "culturagovbr/salic-minc": [], "cultureamp/elm-css-modules-loader": [], "ctripcorp/x-pipe": [], "cvent/octopus-deploy-cookbook": [{"start": "gem install bundler -v '1.17.3'", "end": "bundle exec rake travis"}], "CWISoftware/eventos": [], "CumulusNetworks/cumulus-linux-ansible-modules": [], "cypress-io/cypress-example-kitchensink": [], "dabapps/django-email-as-username": [{"start": "pip install -q Django==$DJANGO_VERSION", "end": "python manage.py test"}], "dabapps/django-user-streams": [{"start": "pip install $DJANGO", "end": "export PYTHONPATH=.", "alternative end": "python manage.py test user_streams"}], "dachcom-digital/pimcore-toolbox": [], "dabapps/django-geosimple": [{"start": "pip install tox", "end": "tox -e $TOX_ENV"}], "dachcom-digital/pimcore-formbuilder": [], "dabapps/django-log-request-id": [{"start": "pip install -U Django==$DJANGO_VERSION", "end": "./manage.py test", "alternative end": "pip install ."}], "dabapps/django-private-views": [{"start": "pip install -q Django==$DJANGO_VERSION", "end": "python manage.py test privateviews"}], "dachcom-digital/pimcore-members": [], "dalibo/workshops": [], "darkskyapp/astro": [], "Dataman-Cloud/crane": [{"start": "sudo apt-get update", "end": "sleep 5", "alternative end": "ping $CRANE_IP -c 4"}], "databricks/spark-perf": [{"start": "pip install -t $HOME/lib/site-python nose", "end": "$HOME/.ivy2", "alternative end": "./run-tests.sh"}], "databricks/spark-sklearn": [{"start": "sudo apt-get update", "end": "if [[ \"$TRAVIS_PYTHON_VERSION\" == \"2.7\" ]]; then curl -s https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh > miniconda.sh; else curl -s https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh > miniconda.sh; fi", "alternative end": "bash miniconda.sh -b -p $HOME/miniconda"}], "graphframes/graphframes": [{"start": "pip install -r ./python/requirements.txt", "end": "sbt ++$SCALA_VERSION -Dspark.version=$SPARK_VERSION \"set test in assembly := {}\" assembly", "alternative end": "sbt ++$SCALA_VERSION -Dspark.version=$SPARK_VERSION coverage test coverageReport"}], "databricks/spark-deep-learning": [], "Dataman-Cloud/swan": [], "DataDog/dogapi": [], "databricks/spark-sql-perf": [], "databricks/databricks-cli": [{"start": "pip install --upgrade pip", "end": "pip list", "alternative end": "tox"}], "datastax/java-driver": [], "datastax/php-driver": [{"start": "pip install --user ccm", "end": "composer self-update", "alternative end": "composer install -n"}], "datastax/simulacron": [], "datacamp/funneljoin": [], "datacamp/pythonwhat": [{"start": "pip install -r requirements.txt", "end": "pytest -m \"not compiled\" --cov=pythonwhat", "alternative end": "codecov --token=$CODECOV_TOKEN"}], "DataDog/pupernetes": [{"start": "sudo apt-get update", "end": "ls -l ~/util-linux/nsenter || bash -xec \"mkdir -pv ~/util-linux && curl -Lf https://www.kernel.org/pub/linux/utils/util-linux/v2.24/util-linux-2.24.1.tar.gz | tar -xz --strip-component 1 -C ~/util-linux && ~/util-linux/autogen.sh && pushd ~/util-linux/ && ./configure --without-python --disable-all-programs --enable-nsenter && popd\"", "alternative end": "make -C ~/util-linux -j nsenter"}], "datacamp/testwhat": [], "DataDog/kafka-kit": [], "DataDog/datadog-go": [], "datacamp/Rdocumentation": [], "datacamp/tutorial": [], "DataDog/jmxfetch": [], "DBCDK/morph": [], "hivemq/hivemq-spi": [], "deptofdefense/move.mil": [], "deInternetJongens/Lighthouse-Utils": [], "dbsystel/DBNetworkStack": [{"start": "gem install jazzy", "end": "set -o pipefail && xcodebuild -scheme DBNetworkStack -destination \"platform=macOS\" test | xcpretty", "alternative end": "set -o pipefail && xcodebuild -scheme DBNetworkStack -destination \"platform=tvOS Simulator,name=Apple TV\" test | xcpretty"}], "Despark/ignicms": [], "develersrl/git-externals": [{"start": "sudo apt-get install -y git-svn", "end": "tox"}], "DevExpress/testcafe": [{"start": "travis_retry npm install", "end": "/^build-bot-temp-.*$/", "alternative end": "/^\\(testbot-only\\)/"}], "DevExpress/DevExtreme": [], "devsu/condor-framework": [{"start": "npm install", "end": "npm test", "alternative end": "npm run coveralls"}], "diennea/herddb": [], "dianping/cat": [], "digiaonline/react-foundation": [], "didi/booster": [], "digiaonline/react-flow-types": [], "didi/cube-ui": [], "digiaonline/lumen-cors": [], "digiaonline/graphql-php": [], "didi/chameleon": [], "digiaonline/react-boilerplate": [], "digiaonline/lumen-graphql": [], "dlcs/elucidate-server": [{"start": "sudo apt-get update -yqq", "end": "pre-commit run --all-files --verbose", "alternative end": "mvn -f elucidate-parent/pom.xml clean package install -U -B"}], "didi/Gendry": [], "digitalbazaar/php-json-ld": [], "UKHomeOffice/kd": [], "digitalbazaar/pyld": [{"start": "pip install -r requirements.txt", "end": "git clone --depth 1 https://github.com/w3c/json-ld-api.git _json-ld-api", "alternative end": "git clone --depth 1 https://github.com/w3c/json-ld-framing.git _json-ld-framing"}], "digitalocean/logtalez": [{"start": "( cd libsodium; ./autogen.sh; ./configure; make check; sudo make install; sudo ldconfig )", "end": "git clone git://github.com/zeromq/libzmq.git", "alternative end": "( cd libzmq; ./autogen.sh; ./configure; make check; sudo make install; sudo ldconfig )"}, {"start": "( cd libzmq; ./autogen.sh; ./configure; make check; sudo make install; sudo ldconfig )", "end": "git clone git://github.com/zeromq/czmq.git", "alternative end": "( cd czmq; ./autogen.sh; ./configure; make check; sudo make install; sudo ldconfig )"}, {"start": "( cd czmq; ./autogen.sh; ./configure; make check; sudo make install; sudo ldconfig )", "end": "go get gopkg.in/zeromq/goczmq.v4", "alternative end": "go test -v ./..."}], "didi/mand-mobile": [], "digitalocean/digitalocean-cloud-controller-manager": [], "digitalbazaar/jsonld-signatures": [{"start": "npm install", "end": "if [ \"x$BUNDLER\" = \"x\" ]; then npm run test; fi", "alternative end": "if [ \"x$BUNDLER\" != \"x\" ]; then npm run test-karma; fi"}], "digitalocean/ceph_exporter": [{"start": "sudo apt-get update", "end": "go get github.com/ceph/go-ceph", "alternative end": "go get github.com/prometheus/client_golang/prometheus"}], "digitalbazaar/jsonld.js": [{"start": "npm install", "end": "npm run fetch-test-suites", "alternative end": "if [ \"x$BUNDLER\" = \"x\" ]; then npm run test; fi"}], "digitalbazaar/forge": [{"start": "npm install", "end": "if [ \"x$BUNDLER\" = \"x\" ]; then npm test; fi", "alternative end": "if [ \"x$BUNDLER\" != \"x\" ]; then npm run test-karma; fi"}], "digitalocean/doctl": [{"start": "sudo snap install goreleaser --classic", "end": "script", "alternative end": "./scripts/release_travis.sh"}], "alphagov/govuk-design-system": [{"start": "npm install --no-optional", "end": "export PATH=$HOME:$PATH", "alternative end": "travis_retry curl -L -o $HOME/cf.tgz \"https://cli.run.pivotal.io/stable?release=linux64-binary&source=github\""}], "gds-operations/vcloud-walker": [], "gds-operations/puppet-aptly": [{"start": "gem update --system", "end": "gem --version", "alternative end": "bundle -v"}], "DigitalRiver/react-atlas": [{"start": "npm install", "end": "npm run build:prd", "alternative end": "npm run lint"}], "alphagov/verify-frontend": [], "digitalocean/go-smbios": [], "gds-operations/puppet-auditd": [], "alphagov/govuk-frontend": [{"start": "npm install -g node-sass@v3.4.0", "end": "node-sass --version", "alternative end": "time node-sass src/govuk/all.scss > /dev/null"}, {"start": "npm install -g sass@v1.0.0", "end": "sass --version", "alternative end": "time sass src/govuk/all.scss > /dev/null"}, {"start": "gem install sass -v 3.4.0", "end": "sass --version", "alternative end": "time sass src/govuk/all.scss > /dev/null"}], "digitalocean/go-openvswitch": [{"start": "sudo apt update", "end": "sudo ovs-vsctl add-br ovsbr0", "alternative end": "go get -u golang.org/x/lint/golint"}], "digitalocean/go-libvirt": [{"start": "sudo make install", "end": "ccache --show-stats", "alternative end": "popd"}], "dimagi/jsonobject": [{"start": "pip install .", "end": "python setup.py test", "alternative end": "if [[ $TRAVIS_PYTHON_VERSION = 2.7 ]]; then .travis/install_cython.sh; fi"}], "digitalocean/kartograph": [], "digitalocean/go-qemu": [{"start": "sudo make install", "end": "popd", "alternative end": "curl -O -s https://libvirt.org/sources/libvirt-${LIBVIRT}.tar.${LIBVIRT_EXT}"}, {"start": "sudo make install", "end": "popd", "alternative end": "sudo libvirtd -d -l -f .travis/libvirtd.conf"}], "andmos/Stratos": [], "digitalocean/do-agent": [], "DISID/springlets": [], "digitalocean/vulcan": [], "digitalocean/resource_kit": [], "wdas/ptex": [{"start": "make install", "end": "make test", "alternative end": "./src/tests/check_version.sh"}], "digitalocean/netbox": [{"start": "pip install -r requirements.txt", "end": "psql --version", "alternative end": "psql -U postgres -c 'SELECT version();'"}], "dragonchain/dragonchain": [], "digitalocean/captainslog": [], "madgik/exareme": [{"start": "sudo apt-get install -y python-apsw", "end": "java", "alternative end": "mvn clean install -f Exareme-Docker/src/exareme/pom.xml -DskipTests=false cobertura:cobertura coveralls:report"}], "MIC-DKFZ/trixi": [{"start": "sudo apt-get install -qq graphviz", "end": "pytest", "alternative end": "pypi"}], "DLR-SC/tixi": [{"start": "sudo apt-get update -qq", "end": "mkdir build", "alternative end": "cd build"}], "dnadesign/silverstripe-elemental": [{"start": "if [[ $NPM_TEST ]]; then nvm install $TRAVIS_NODE_VERSION && nvm use $TRAVIS_NODE_VERSION && npm install -g yarn && yarn install --network-concurrency 1 && (cd vendor/silverstripe/admin && yarn install --network-concurrency 1) && yarn run build; fi", "end": "if [[ $PHPUNIT_TEST ]]; then vendor/bin/phpunit tests/; fi", "alternative end": "if [[ $PHPUNIT_COVERAGE_TEST ]]; then phpdbg -qrr vendor/bin/phpunit --coverage-clover=coverage.xml; fi"}], "dnadesign/silverstripe-populate": [], "dnanexus/parliament2": [{"start": "sudo apt-get update && sudo apt-get install --only-upgrade openssl", "end": "tar -czf resources.tar.gz resources/", "alternative end": "docker build -t dnanexus/parliament2:$TAG ."}], "doc-AI/net-runner-ios": [{"start": "gem install cocoapods", "end": "travis_wait pod repo update --silent", "alternative end": "pod install"}], "dolittle/Bifrost": [{"start": "if test \"$TRAVIS_OS_NAME\" == \"osx\"; then brew update; brew install openssl; ln -s /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib /usr/local/lib/; ln -s /usr/local/opt/openssl/lib/libssl.1.0.0.dylib /usr/local/lib/; fi", "end": "chmod +x build.sh", "alternative end": "export DOTNET_INSTALL_DIR=\"$PWD/.dotnetcli\""}], "docusign/DocuSign-Java-Client": [], "haxetink/tink_core": [], "docusign/DocuSign-Node-Client": [], "docusign/docusign-csharp-client": [], "yabwe/medium-editor-tables": [{"start": "npm install -g grunt-cli", "end": "npm run test:ci"}], "dooApp/FXForm2": [{"start": "sudo apt update", "end": "False"}], "dotCMS/core-web": [], "hongqn/codecli": [{"start": "pip install tox-travis", "end": "tox"}], "douban/rexxar-ios": [], "douban/Rexxar-Android": [], "TeHikuMedia/nga-kupu": [{"start": "pip install -r requirements.txt", "end": "pytest"}], "douban/FRDIntent": [], "dpla/ingestion3": [], "dowjones/fiveby": [{"start": "npm install -g gulp", "end": "gulp test", "alternative end": "TsncCt1cAd6J3kv3+THWGs9qC0r5HP0PqB0PAZVFLfNJKorogSgvIFUWf3ZMsMlN9nfAbbliv0nRBLs9DdU7Pz5kB+klCJko6iUGA0InnLC4XwUtzCVQxe/GK/eCES3+BkowSeCGRdy6jkw4jCJc8KJP5QENq+5gaEI454oW8qY="}], "dowjones/react-dropdown-tree-select": [], "dowjones/react-cellblock": [], "dowjones/gulp-bundle-assets": [], "dreamfactorysoftware/.net-sdk": [], "dowjones/react-picture-show": [], "dreipol/django-scarface": [{"start": "pip install tox tox-travis codecov", "end": "tox", "alternative end": "codecov -e TOXENV,DJANGO"}], "dropbox/stopwatch": [], "dropbox/godropbox": [], "dstl/baleen": [], "duckduckgo/duckduckgo-privacy-extension": [{"start": "npm install -g grunt-cli", "end": "npm run test-ci"}], "verapdf/veraPDF-library": [{"start": "sudo apt-get install jq", "end": "wget -O ~/codacy-coverage-reporter-assembly-latest.jar http://resources.openpreservation.org/codacy-coverage-reporter-assembly-latest.jar", "alternative end": "bash <(curl -s https://codecov.io/bash)"}], "duosecurity/duo_api_php": [], "duosecurity/duo_python": [{"start": "pip install -r requirements-dev.txt", "end": "flake8", "alternative end": "nose2"}], "duosecurity/duo_client_python": [{"start": "pip install -r requirements.txt", "end": "flake8", "alternative end": "nose2"}], "duosecurity/duo_unix": [{"start": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then brew update; fi", "end": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then export OS_SPECIFIC_ARGS=\"--with-openssl=/usr/local/opt/openssl\"; fi", "alternative end": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then sudo apt-get -qq update; fi"}, {"start": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then sudo apt-get install -y libpam-dev; fi", "end": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then export OS_SPECIFIC_ARGS=\"\"; fi", "alternative end": "./bootstrap"}], "dwango/moyo": [], "Dwolla/dwolla-v2-ruby": [{"start": "gem install bundler -v 2.0.2", "end": "1.9.3", "alternative end": "2.0.0"}], "duosecurity/duo_api_golang": [], "Dwolla/dwolla-python": [{"start": "pip install requests && python setup.py install", "end": "python -m unittest discover tests/"}], "dwarvesf/glod": [{"start": "sudo apt-get update -qq", "end": "go get github.com/axw/gocov/gocov", "alternative end": "go get github.com/mattn/goveralls"}], "Dwolla/dwolla-php": [], "dwavesystems/dwave-cloud-client": [{"start": "pip3 install virtualenv", "end": "virtualenv env -p python3", "alternative end": "source env/bin/activate"}, {"start": "pip install --upgrade setuptools", "end": "coverage run -m unittest discover", "alternative end": "coveralls"}], "Dwolla/dwolla-node": [], "Dwolla/dwolla-ruby": [], "Dwolla/dwolla-v2-python": [{"start": "pip install -r requirements.txt", "end": "python setup.py test"}], "dwavesystems/qbsolv": [], "Dwolla/dwolla-v2-node": [], "spearhead-ea/island": [{"start": "npm install", "end": "ISLAND_USE_DEV_MODE=true RABBITMQ_HOST=amqp://localhost:5672 ISLAND_TRACEMQ_QUEUE=trace ISLAND_TRACEMQ_HOST=amqp://localhost:5672", "alternative end": "docker run -d -p 5672:5672 --name rabbitmq rabbitmq"}], "EasyinnovaSL/DPFManager": [], "EasyPost/easypost-ruby": [], "dyninc/dyn-python": [], "easemob/kefu-webim": [{"start": "npm install", "end": "step1", "alternative end": "packing"}], "EasyPost/easypost-node": [], "easemob/web-im": [], "EasyPost/syslog-rfc5424-parser": [{"start": "pip install -r requirements.txt -r requirements-tests.txt", "end": "py.test --cov=syslog_rfc5424_parser --cov-report=term-missing --cov-fail-under=90 -v tests/"}], "EasyPost/easypost-python": [{"start": "pip install six requests", "end": "python setup.py install", "alternative end": "py.test --cov=easypost --cov-report=term-missing --vcr-record=none --cov-fail-under=60 tests/"}], "brazanation/php-documents": [], "ebay/skin": [], "easemob/emchat-server-examples": [], "easemob/kefu-android-demo": [], "eBayClassifiedsGroup/marathon_deploy": [], "ebizmarts/magemonkey": [], "mailchimp/mc-magento": [{"start": "test -n \"$NODE_JS_VERSION\" && npm install || true", "end": "if [ \"$TEST_SUITE\" = \"phpunit\" ]; then\n  wget http://ebizmartsbackup.s3.amazonaws.com/$MAGENTO_ARCHIVE &&\n  tar xjf $MAGENTO_ARCHIVE &&\n  cd magento &&\n  modman init &&\n  modman link $TRAVIS_BUILD_DIR &&\n  cd $TRAVIS_BUILD_DIR\nfi\n", "alternative end": "phpcs --config-set installed_paths vendor/magento-ecg/coding-standard,vendor/magento/marketplace-eqp"}], "easemob/kefu-ios-demo": [], "eBayClassifiedsGroup/PanteraS": [{"start": "sudo apt-get update", "end": "apt-cache policy docker-ce || true", "alternative end": "sudo apt-get install -y --force-yes -o Dpkg::Options::=\"--force-confdef\" -o Dpkg::Options::=\"--force-confold\" docker-ce=${DOCKER_APP_VERSION}"}, {"start": "sudo apt-get install -y --force-yes -o Dpkg::Options::=\"--force-confdef\" -o Dpkg::Options::=\"--force-confold\" docker-ce=${DOCKER_APP_VERSION}", "end": "sudo iptables -L DOCKER || sudo iptables -N DOCKER", "alternative end": "sudo apt-get install -y curl ruby-dev build-essential python-dev"}, {"start": "sudo apt-get install -y curl ruby-dev build-essential python-dev", "end": "docker pull ubuntu:16.04", "alternative end": "docker ps"}], "ebay/ebayui-core": [], "easemob/webim": [], "gpgpu-sim/gpgpu-sim_distribution": [], "ebay/griffin": [], "eclipsesource/jsonforms": [], "ecometrica/django-hashedfilenamestorage": [{"start": "pip install tox-travis", "end": "tox", "alternative end": "xenial"}], "ecreall/nova-ideo": [], "PnX-SI/GeoNature": [{"start": "sudo apt-get install -y libgdal1-dev libgdal-dev", "end": "python -c \"import fcntl; fcntl.fcntl(1, fcntl.F_SETFL, 0)\"", "alternative end": "cd backend"}, {"start": "pip install -r requirements-dev.txt", "end": "cd tests/travis_test", "alternative end": "./travis_test.sh"}], "ecmwf/eccodes": [{"start": "make install > /dev/null", "end": "codes_info", "alternative end": "ls $(codes_info -s)"}], "cassproject/CASS": [], "EdmundsAPI/edmundsapi.github.com": [{"start": "sudo apt-get install openjdk-7-jdk", "end": "java -version", "alternative end": "mvn -version"}], "OCA/stock-logistics-warehouse": [{"start": "pip install pre-commit", "end": "pre-commit run --all --show-diff-on-failure --verbose --color always", "alternative end": "test"}], "OCA/operating-unit": [], "hps/heartland-php": [], "EiffelSoftware/EiffelStudio": [], "OCA/manufacture-reporting": [], "efigence/cache_key_for": [], "openl-tablets/openl-tablets": [], "ekumenlabs/terminus": [{"start": "sudo apt-get install python-virtualenv pkg-config zlib1g-dev libssl-dev build-essential protobuf-compiler libprotobuf-dev libgeos-dev python-matplotlib python-scipy gfortran libblas-dev liblapack-dev libatlas-base-dev libjpeg-dev libfreetype6-dev", "end": "python setup.py -q install", "alternative end": "find . -name \\*.py -exec pep8 --ignore=E501 --exclude='*/procedural_city_generation/*' {} +"}], "ekylibre/ekylibre": [], "ekino/EkinoNewRelicBundle": [], "ekino/veggies": [], "ekino/EkinoDrupalBundle": [], "ekino/phpstan-banned-code": [], "ekino/EkinoWordpressBundle": [], "Elao/ElaoJsonHttpFormBundle": [], "ekino/php-hal-client": [], "Elao/PhpEnums": [], "Elao/ElaoFormTranslationBundle": [], "ElemeFE/element": [], "logstash-plugins/logstash-filter-translate": [], "ElemeFE/page-skeleton-webpack-plugin": [{"start": "npm install -g xvfb-maybe", "end": "$CC --version", "alternative end": "$CXX --version"}], "ElemeFE/cooking": [], "ElemeFE/mint-ui": [], "ElemeFE/react-amap": [], "ElemeFE/postcss-salad": [], "mageec/beebs": [{"start": "sudo apt-get install dejagnu texinfo", "end": "./travis_test.sh"}], "emc-openstack/storops": [{"start": "pip install codecov", "end": "flake8 storops storops_test storops_comptest", "alternative end": "py.test -n2 --cov=storops --cov-config coverage.ini  --cov-report=xml --cov-report term --junit-xml=junit-result.xml storops_test"}], "pravega/pravega": [], "ElemeFE/v-charts": [], "Eleme-IMF/DRDNetworking": [], "ElemeFE/vue-Amap": [], "nasa/earthdata-search": [{"start": "npm install", "end": "npm run copy-secrets", "alternative end": "npm run silent-test"}], "engineyard/ey-cloud-recipes": [], "spagobilabs/SpagoBI": [], "enioka/jqm": [], "elementary/appcenter-web": [], "enkidevs/react-search-input": [], "elementary/shortcut-overlay": [], "enkidevs/approve-ci": [], "enova/sidekiq-rate-limiter": [], "ensc/dietlibc": [], "elementary/calculator": [], "elementary/switchboard": [{"start": "docker run -v \"$PWD\":/tmp/build-dir elementary/docker:odin-unstable /bin/sh -c \"apt-get update && apt-get -y install $DEPENDENCY_PACKAGES && cd /tmp/build-dir && meson build --prefix=/usr && cd build && ninja\"", "end": "echo BUILDS PASSED"}], "enthought/codetools": [{"start": "edm run -- pip install codecov", "end": "edm run -- codecov", "alternative end": "travis-ci@enthought.com"}], "enthought/enable": [{"start": "edm run -- pip install codecov", "end": "edm run -- codecov"}], "enthought/apptools": [{"start": "edm run -- pip install codecov", "end": "edm run -- codecov", "alternative end": "travis-ci@enthought.com"}], "enthought/graphcanvas": [], "elementary/camera": [], "elementary/houston": [], "Envoy/Embassy": [], "Envoy/Ambassador": [], "geoscixyz/gpg": [{"start": "pip install -r requirements.txt", "end": "nosetests $TEST_DIR", "alternative end": "if [ \"$TRAVIS_BRANCH\" = \"master\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then mkdir lib ; pip install -t lib/ flask ; ls lib ; fi"}, {"start": "if [ \"$TRAVIS_BRANCH\" = \"master\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then mkdir lib ; pip install -t lib/ flask ; ls lib ; fi", "end": "if [ \"$TRAVIS_BRANCH\" = \"master\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then openssl aes-256-cbc -K $encrypted_240ec7086ddb_key -iv $encrypted_240ec7086ddb_iv -in credentials.tar.gz.enc -out credentials.tar.gz -d ; tar -xzf credentials.tar.gz ; GAE_PYTHONPATH=${HOME}/.cache/google_appengine ; export PATH=$PATH:${HOME}/google-cloud-sdk/bin ; export PYTHONPATH=${PYTHONPATH}:${GAE_PYTHONPATH} ; python _ext/fetch_gae_sdk.py $(dirname \"${GAE_PYTHONPATH}\"); if [ ! -d ${HOME}/google-cloud-sdk ]; then curl https://sdk.cloud.google.com | bash; fi ; gcloud auth activate-service-account --key-file credentials/client-secret.json ; gcloud config set project gpggeosci ; gcloud -q components update gae-python ; gcloud -q app deploy ./app.yaml --version ${TRAVIS_COMMIT} --promote; fi", "alternative end": "ubcgif:1Z2lR3XYRSM3GHflG71ZHEN6"}], "geoscixyz/em": [{"start": "pip install -r requirements.txt", "end": "pytest $TEST_DIR -v", "alternative end": "if ! [ \"$TRAVIS_BRANCH\" = \"master\" -o \"$TRAVIS_TAG\" = \"true\" ]; then echo \"Not deploying (because this is not a deployment branch)\" ; exit 0 ; fi"}, {"start": "pip install -t lib/ flask", "end": "ls lib", "alternative end": "curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-228.0.0-linux-x86_64.tar.gz | bash; fi ;"}, {"start": "pip install google-compute-engine;", "end": "openssl aes-256-cbc -K $encrypted_69967e53c837_key -iv $encrypted_69967e53c837_iv -in credentials.tar.gz.enc -out credentials.tar.gz -d;", "alternative end": "tar -xzf credentials.tar.gz ;"}], "elementary/music": [], "it-shark-pro/js-assignments": [], "epam/NGB": [{"start": "sudo apt-get update", "end": "sudo rm -f /usr/bin/python && sudo ln -s $(which python3) /usr/bin/python", "alternative end": "wget https://bootstrap.pypa.io/get-pip.py"}, {"start": "sudo python3 -m pip install mkdocs", "end": "./gradlew buildJar buildWar buildCli buildDoc buildDocker -PbuildNumber=${TRAVIS_JOB_NUMBER} ${CLIENT_PATH}", "alternative end": "./gradlew jacocoTestReport"}], "epam/pipeline-builder": [], "alanzanattadev/atom-molecule-dev-environment": [], "epam/Indigo": [], "epam/road-ios-framework": [{"start": "brew update", "end": "sudo easy_install cpp-coveralls", "alternative end": "chmod +x ./script_simian.sh"}, {"start": "gem install cocoapods", "end": "if [[ $PROJECT_SCHEME == Simian ]]; then ./script_simian.sh; else ./script_general.sh; fi", "alternative end": "if [[ $PROJECT_SCHEME != Simian ]]; then ./coveralls.rb --extension m --exclude-folder ROADGeneratedAttributes --current-scheme $PROJECT_SCHEME; fi"}], "epam/miew": [], "lean-delivery/ansible-role-java": [{"start": "pip3 install --upgrade ansible==2.9.* docker molecule==2.22", "end": "ansible --version", "alternative end": "ansible-lint --version"}], "epam/lib-obj-c-attr": [{"start": "brew update", "end": "sudo easy_install cpp-coveralls", "alternative end": "chmod +x ./script_simian.sh"}], "epam/nfstrace": [{"start": "pip install --user --upgrade cpp-coveralls", "end": "if [ ! -f \"$LCOV\" ]; then\n  wget -O - --no-check-certificate http://ftp.de.debian.org/debian/pool/main/l/lcov/lcov_1.11.orig.tar.gz | tar xz && cp -r lcov-1.11 $DEPS_DIR\n  make -C $LCOV_DIR\nelse \n  echo \"Using cached lcov\"\nfi\n", "alternative end": "gcov --version"}], "ericsson/ecaudit": [], "EricssonResearch/calvin-base": [{"start": "pip install tox", "end": "tox", "alternative end": "TOXENV=py27"}], "esl/ex_rabbit_pool": [], "epam/cloud-pipeline": [{"start": "pip install --user awscli==1.14.56", "end": "Build", "alternative end": "Tests"}, {"start": "pip install mkdocs --user", "end": "java", "alternative end": "bash deploy/travis/travis_pack_dist.sh"}, {"start": "pip install mkdocs --user", "end": "java", "alternative end": "bash deploy/travis/travis_publish_docs.sh"}], "kajf/bozr": [], "esl/elarm": [], "epam/JDI": [], "esl/escalus": [], "epam/Wilma": [], "esl/MongooseICE": [], "esl/amoc": [], "ericsson-mts/mts": [], "NLeSC/scriptcwl": [{"start": "pip install -q cwltool$CWLTOOL_VERSION", "end": "python setup.py -q install", "alternative end": "python setup.py test"}], "esendex/esendex-php-sdk": [], "NLeSC/structure-from-motion": [{"start": "docker exec test apt-get update", "end": "travis_wait docker exec -t test coverage run --source=/sfm /sfm/run-sfm.py", "alternative end": "docker exec test coverage report"}], "NLeSC/mcfly": [{"start": "pip install --upgrade pip", "end": "conda list", "alternative end": "pip install ."}, {"start": "pip install .", "end": "echo done", "alternative end": "if [[ \"$PYTHON_VERSION\" == \"3.6\" ]]; then coverage run --source=mcfly -m pytest; else py.test  ; fi"}, {"start": "pip install scrutinizer-ocular", "end": "ocular"}], "Tiramisu-Compiler/tiramisu": [], "NLeSC/python-template": [{"start": "pip install -r requirements.txt", "end": "pytest"}], "vasole/pymca": [{"start": "python -m pip install --upgrade pip", "end": "python ./ci/info_platform.py", "alternative end": "pip list"}, {"start": "pip install --upgrade setuptools", "end": "python ci/info_platform.py", "alternative end": "pip list"}], "silx-kit/fabio": [{"start": "python -m pip install --upgrade pip", "end": "if [ $TRAVIS_ARCH = 'ppc64le' ]; then source ci/ppc64le_installer; fi", "alternative end": "pip install -r ci/requirements_travis.txt --upgrade"}, {"start": "pip install -r ci/requirements_travis.txt --upgrade", "end": "python ci/info_platform.py", "alternative end": "pip list"}, {"start": "pip install .", "end": "python setup.py build test", "alternative end": "python ./run_tests.py --installed"}], "ESSS/ng-xform": [{"start": "npm install --quiet -g gulp-cli", "end": "gulp build", "alternative end": "npm run setup:demo"}], "silx-kit/silx": [{"start": "python -m pip install ${PIP_OPTIONS} --upgrade pip", "end": "python ./ci/info_platform.py", "alternative end": "pip list"}, {"start": "if [ -s \"ci/requirements-pinned.txt\" ]; then pip install ${PIP_OPTIONS} -r ci/requirements-pinned.txt; fi", "end": "python ci/info_platform.py", "alternative end": "pip list"}, {"start": "if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then pip install ${PIP_OPTIONS} --upgrade pynput; python ci/close_popup.py; fi", "end": "if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then export SILX_TEST_LOW_MEM=True; fi", "alternative end": "echo \"QT_BINDING=\"$QT_BINDING"}], "espressif/arduino-esp32": [], "Etersoft/uniset2": [{"start": "sudo apt-get install libcomedi-dev libpoco-dev libmysqlclient-dev libomniorb4-dev libev-dev omniidl xsltproc libpqxx3-dev librrd-dev libsigc++-2.0-dev libsqlite3-dev python-dev libmosquittopp-dev", "end": "wget https://github.com/catchorg/Catch2/releases/download/v1.11.0/catch.hpp -O include/catch.hpp", "alternative end": "export CXXFLAGS='-pipe -O2 -pedantic -Wall'"}], "etsy/Conjecture": [], "etsy/phpunit-extensions": [], "etsy/TryLib": [], "eucalyptus/eutester": [{"start": "pip install -q boto==$BOTO_VERSION", "end": "python setup.py -q install", "alternative end": "nosetests -w tests"}], "europeana/corelib": [], "eclipse/kapua": [], "Esri/geometry-api-java": [], "eventbrite/pysoa": [{"start": "pip install -U pip tox", "end": "build", "alternative end": "Functional Tests"}, {"start": "pip install -U pip setuptools pyopenssl", "end": "pypi", "alternative end": "eventbrite"}], "yduartep/angular-full-sample": [{"start": "npm install -g @angular/cli", "end": "ng build --prod"}], "eventespresso/event-espresso-core": [{"start": "npm install npm@^6.13 -g", "end": "if [[ \"$SKIP_XDEBUG_REMOVE\" != \"true\" ]]; then\n  cp $HOME/.phpenv/versions/$(phpenv global)/etc/conf.d/xdebug.ini /tmp\n  phpenv config-rm xdebug.ini\n  echo \"xdebug removed\";\nfi\n", "alternative end": "bash tests/bin/install-wp-tests.sh wordpress_test root '' localhost $WP_VERSION"}], "everit-org/jira-timetracker-plugin": [], "everit-org/jira-worklog-query-plugin": [], "evodeck/angular-linkedin-sdk": [{"start": "pip install --user codecov", "end": "export CHROME_BIN=chromium-browser", "alternative end": "export DISPLAY=:99.0"}], "EverythingMe/geodis": [{"start": "pip install -r test/requirements.txt", "end": "python", "alternative end": "2.7"}], "evojam/play-elastic4s": [], "Evolution-Gaming/akka-http-documenteddsl": [], "Tirasa/ConnId": [], "Evolveum/midpoint": [], "exactonline/exactonline-api-ruby-client": [], "excellaco/open-cabinet": [], "ExpediaDotCom/haystack-ui": [{"start": "sudo apt-get update", "end": "sudo apt-get -y -o Dpkg::Options::=\"--force-confnew\" install docker-ce", "alternative end": "sudo apt-get install libcairo2-dev libjpeg8-dev libpango1.0-dev libgif-dev build-essential g++"}, {"start": "sudo apt-get install libcairo2-dev libjpeg8-dev libpango1.0-dev libgif-dev build-essential g++", "end": "if ([ \"$TRAVIS_BRANCH\" == \"master\" ] && [ \"$TRAVIS_PULL_REQUEST\" == \"false\" ]) || [ -n \"$TRAVIS_TAG\" ];  then make release; else make all; fi", "alternative end": "haystack-notifications@expedia.com"}], "esrlabs/bake": [{"start": "gem install coveralls $FLAGS", "end": "rake travis"}], "ExpediaDotCom/haystack": [], "exosite/exoline": [{"start": "sudo pip install --upgrade -r requirements.txt", "end": "cd test", "alternative end": "sudo pip install --upgrade -r requirements.txt"}, {"start": "sudo pip install --upgrade -r requirements.txt", "end": "cd ..", "alternative end": "./test.sh"}], "express-labs/pure-react-carousel": [], "ExtraHop/metalsmith-sitemap": [], "F5Networks/f5-icontrol-rest-python": [{"start": "pip install -r requirements.test.txt", "end": "tox", "alternative end": "if [[ $TRAVIS_PYTHON_VERSION == 2.7 ]]; then ${DIST_REPO}/scripts/package.sh \"redhat\" \"7\"; fi"}], "F5Networks/f5-ansible": [{"start": "travis_retry sudo apt-get update", "end": "Tests", "alternative end": "branch = devel AND type = pull_request"}, {"start": "travis_retry pip install pytest --upgrade", "end": "pytest -x -s $TRAVIS_BUILD_DIR/ansible_collections/f5networks/f5_modules/tests/unit/modules/network/f5/", "alternative end": "3.7"}], "F5Networks/k8s-bigip-ctlr": [], "ezsystems/docker-php": [], "ezsystems/ezplatform": [], "ezsystems/ezplatform-http-cache": [], "ezsystems/ez-support-tools": [], "ezsystems/ezplatform-design-engine": [], "F5Networks/f5-common-python": [{"start": "pip install tox", "end": "tox -e flake", "alternative end": "tox -e pycodestyle"}], "F5Networks/f5-openstack-lbaasv2-driver": [{"start": "pip install hacking pytest coverage", "end": "flake8 ./f5lbaasdriver", "alternative end": "coverage run --source f5lbaasdriver -m py.test f5lbaasdriver/v2/bigip/"}], "F5Networks/f5-cloud-libs": [], "fairfaxmedia/flywheel": [], "archesproject/arches": [{"start": "pip install -e .", "end": "wget ${ES_DOWNLOAD_URL}", "alternative end": "tar -xzf elasticsearch-${ES_VERSION}-linux-x86_64.tar.gz"}, {"start": "npm install cypress --save-dev", "end": "wait-on http://localhost:9200/", "alternative end": "python manage.py setup_db --force"}], "fastly/go-utils": [], "RRZE-HPC/likwid": [{"start": "make && sudo make install", "end": "/usr/local/bin/likwid-topology -c -C -g", "alternative end": "/usr/local/bin/likwid-pin -p"}], "fastly/fastly-rails": [], "fauna/faunadb-jvm": [], "fastly/fastly-ruby": [], "fastly/ftw": [{"start": "pip install -e .", "end": "py.test test/unit/ -s -v", "alternative end": "py.test test/integration/test_logcontains.py -s -v --rule=test/integration/LOGCONTAINSFIXTURE.yaml"}], "facebookexperimental/doh-proxy": [{"start": "pip install flake8", "end": "python setup.py flake8", "alternative end": "flake8 test"}], "VietOpenCPS/OpenCPS": [{"start": "not valid", "stop": "not valid"}], "flowtype/flow-bin": [], "klaxalk/linux-setup": [], "yuantiku/YTKNetwork": [{"start": "brew update\nbrew install carthage\ncarthage bootstrap\nif [ \"$TEST_TYPE\" = iOS ] || [ \"$TEST_TYPE\" = macOS ] || [ \"$TEST_TYPE\" = tvOS ]; then\n  gem install xcpretty --no-ri --no-rdoc --no-document --quiet\nelif [ \"$TEST_TYPE\" = CocoaPods ]; then\n  gem install cocoapods --no-ri --no-rdoc --no-document --quiet\nfi\n", "end": "if [ \"$TEST_TYPE\" = iOS ]; then\n  set -o pipefail\n  xcodebuild test -scheme \"YTKNetwork iOS\" -sdk iphonesimulator -destination \"platform=iOS Simulator,name=iPhone 6\" -skip-testing:\"YTKNetwork iOSTests\"/YTKPerformanceTests -skip-testing:\"YTKNetwork iOSTests\"/YTKResumableDownloadTests | xcpretty -c\nelif [ \"$TEST_TYPE\" = macOS ]; then\n  set -o pipefail\n  xcodebuild test -scheme \"YTKNetwork macOS\" -sdk macosx -skip-testing:\"YTKNetwork macOSTests\"/YTKPerformanceTests -skip-testing:\"YTKNetwork macOSTests\"/YTKResumableDownloadTests | xcpretty -c\nelif [ \"$TEST_TYPE\" = tvOS ]; then\n  set -o pipefail\n  xcodebuild test -scheme \"YTKNetwork tvOS\" -sdk appletvsimulator -destination \"platform=tvOS Simulator,name=Apple TV 1080p\" -skip-testing:\"YTKNetwork tvOSTests\"/YTKPerformanceTests -skip-testing:\"YTKNetwork tvOSTests\"/YTKResumableDownloadTests | xcpretty -c\nfi\n"}], "facebook/proxygen": [], "facebook/folly": [], "libbpf/libbpf": [{"start": "sudo apt-get update", "end": "sudo apt-get -y build-dep libelf-dev", "alternative end": "sudo apt-get install -y libelf-dev pkg-config"}, {"start": "sudo apt-get install -y libelf-dev pkg-config", "end": "scripts/coverity.sh || travis_terminate 1", "alternative end": "KERNEL=x.x.x"}], "holderdeord/hdo-site": [], "facebook/ThreatExchange": [{"start": "pip install -r pytx/requirements.txt", "end": "TEST_DIR=pytx", "alternative end": "pip install tox"}, {"start": "pip install tox", "end": "cd $TEST_DIR && make test", "alternative end": "pypi"}], "facebook/mcrouter": [], "firewalla/firewalla": [{"start": "sudo npm install -g mocha", "end": "sudo -u pi git clone https://github.com/firewalla/firewalla_nodemodules.x86_64 /home/pi/.node_modules", "alternative end": "sudo -u pi /home/pi/firewalla/scripts/travis_setup.sh"}], "airlift/airbase": [], "fireeye/flare-floss": [{"start": "pip install https://github.com/williballenthin/vivisect/zipball/master", "end": "echo \"__version__ = '$(git describe --tags --always)'\" > floss/version.py", "alternative end": "cat floss/version.py"}, {"start": "pip install -e .", "end": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then git clone https://github.com/tpoechtrager/wclang.git ../wclang;                              fi", "alternative end": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then pushd ../wclang; cmake -DCMAKE_INSTALL_PREFIX=/usr/local && make && sudo make install; popd; fi"}, {"start": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then pushd ../wclang; cmake -DCMAKE_INSTALL_PREFIX=/usr/local && make && sudo make install; popd; fi", "end": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then pushd tests/src; make all; popd;                                                             fi", "alternative end": "pyinstaller floss.spec"}], "seznam/SuperiorMySQLpp": [], "facebook/redex": [{"start": "sudo apt-get install -y automake autoconf autoconf-archive libtool liblz4-dev liblzma-dev make zlib1g-dev binutils-dev libjemalloc-dev libiberty-dev libjsoncpp-dev wget", "end": "export CXX='g++-5'", "alternative end": "sudo sh get_boost.sh"}], "fireeye/gocrack": [], "fireeye/flare-wmi": [{"start": "pip install pep8", "end": "find . -name \\*.py -exec pep8 --ignore=E501 {} \\;", "alternative end": "py.test ./python-cim/tests/ -v"}], "facebook/draft-js": [], "citizenfx/fivem": [], "Fitbit/webpack-config": [], "citizenfx/natives": [{"start": "sudo apt-get update -qq", "end": "sudo ln -s /usr/lib/x86_64-linux-gnu/libclang-7.so.1 /usr/lib/x86_64-linux-gnu/libclang.so", "alternative end": "bash .travis/setup-builder"}], "Fitbit/webpack-cluster": [], "torch/threads": [{"start": "make && make install", "end": "cd $ROOT_TRAVIS_DIR", "alternative end": "export LD_LIBRARY_PATH=${INSTALL_PREFIX}/lib:$LD_LIBRARY_PATH"}], "fiverr/passable": [], "fizyr/keras-maskrcnn": [{"start": "pip install 'numpy>=1.14'", "end": "pip", "alternative end": "py.test --pep8"}], "fkie-cad/cwe_checker": [{"start": "sudo apt-get update", "end": "./.travis_prepare.sh", "alternative end": "./.travis_run_tests.sh"}], "fizyr/keras-retinanet": [{"start": "pip install -r requirements.txt", "end": "pip", "alternative end": "python setup.py check -m -s"}], "fkie/multimaster_fkie": [], "Flagbit/Magento-ChangeAttributeSet": [], "flant/pam_docker": [{"start": "sudo apt-get update", "end": "sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D", "alternative end": "echo \"deb https://apt.dockerproject.org/repo ubuntu-trusty main\" | sudo tee /etc/apt/sources.list.d/docker.list"}, {"start": "sudo apt-get update", "end": "sudo apt-get -o dpkg::options::=\"--force-confnew\" install -y --force-yes docker-engine=1.9.1-0~trusty", "alternative end": "echo \"docker-engine hold\" | sudo dpkg --set-selections"}, {"start": "gem install bundler", "end": "bundle install", "alternative end": "bundle exec buildizer prepare"}], "flexport/mutation-sentinel": [], "flexport/reflective-bind": [], "FlexTradeUKLtd/jfixture": [], "fs/android-base": [{"start": "not valid", "stop": "not valid"}], "flipkart-incubator/flux": [], "fs/backbone-base": [], "flipkart-incubator/proteus": [], "fs/react-base": [], "LearnPress/LearnPress": [], "flyingcircusio/vulnix": [], "FormidableLabs/nodejs-dashboard": [], "FormidableLabs/reason-urql": [], "FormidableLabs/chai-jq": [], "fraunhoferfokus/acsl-by-example": [{"start": "sudo apt update -qq", "end": "which opam || ( wget --no-clobber https://github.com/ocaml/opam/releases/download/2.0.6/opam-2.0.6-x86_64-linux -O $HOME/bin/opam && chmod +x $HOME/bin/opam )", "alternative end": "opam init --auto-setup --disable-sandboxing --comp=4.09.1"}], "FormidableLabs/react-native-app-auth": [], "FormidableLabs/component-playground": [], "FormidableLabs/converter-react": [{"start": "npm install --production", "end": "npm run build"}], "lirown/graphql-custom-directives": [], "FortnoxAB/reactive-wizard": [], "FormidableLabs/pull-report": [], "FormidableLabs/victory-chart-native": [{"start": "npm install -g npm@3", "end": "npm run lint", "alternative end": "npm run test"}], "francelabs/datafari": [], "FormidableLabs/inspectpack": [], "franzinc/agraph-java-client": [], "Fraudmarc/fraudmarc-ce": [], "FormidableLabs/full-stack-testing": [], "franzinc/agraph-python": [{"start": "pip install -r requirements.txt", "end": "pytest", "alternative end": "AGRAPH_VERSION=6.6.0"}], "FormidableLabs/radium": [], "FormidableLabs/victory-native": [], "FormidableLabs/spectacle": [{"start": "pip install --user awscli", "end": "yarn install --frozen-lockfile", "alternative end": "change"}], "FormidableLabs/webpack-stats-plugin": [], "FormidableLabs/formidable-charts": [{"start": "npm install -g npm@3", "end": "npm --version", "alternative end": "node_modules/.bin/builder run check-ci"}], "ODMDev/odm-ondocker": [], "FormidableLabs/victory": [{"start": "pip install --user awscli", "end": "yarn --version", "alternative end": "yarn nps check.ci"}], "froglogic/tracetool": [], "biolab/orange3-text": [{"start": "pip install -U setuptools pip wheel", "end": "mkdir -p /home/travis/.local/share/Orange", "alternative end": "pip install pyqt5 pyqtwebengine"}, {"start": "pip install pyqt5 pyqtwebengine", "end": "source $TRAVIS_BUILD_DIR/.travis/install_orange.sh", "alternative end": "travis_wait pip install -r requirements.txt"}, {"start": "travis_wait pip install -r requirements.txt", "end": "XVFBARGS=\"-screen 0 1280x1024x24\"", "alternative end": "catchsegv xvfb-run -a -s \"$XVFBARGS\" coverage run -m unittest discover -v"}], "biolab/orange3-network": [{"start": "pip install -U setuptools pip wheel", "end": "mkdir -p /home/travis/.local/share/Orange", "alternative end": "source $TRAVIS_BUILD_DIR/.travis/install_orange.sh"}, {"start": "pip install sip pyqt5==5.11.*", "end": "python setup.py develop", "alternative end": "XVFBARGS=\"-screen 0 1280x1024x24\""}], "FormidableLabs/multibot": [], "biolab/orange3-imageanalytics": [{"start": "pip install -U pip wheel setuptools", "end": "source $TRAVIS_BUILD_DIR/.travis/install_orange.sh", "alternative end": "pip install -e ."}, {"start": "pip install -e .", "end": "mkdir -p $(python -c 'from Orange.misc.environ import cache_dir; print(cache_dir())')", "alternative end": "XVFBARGS=\"-screen 0 1280x1024x24\""}], "Froiden/laravel-rest-api": [], "FormidableLabs/publish-diff": [], "trhura/python-myanmar": [{"start": "pip install -r requirements.txt", "end": "curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter", "alternative end": "chmod +x ./cc-test-reporter"}], "biolab/orange3": [], "FormidableLabs/formidable-playbook": [], "thefrontside/frontmacs": [], "FormidableLabs/react-progressive-image": [], "FormidableLabs/appr": [], "markovmodel/molPX": [], "fullcontact/fullcontact4j": [], "FormidableLabs/eslint-plugin-react-native-a11y": [], "fullcontact/fullcontact-api-ruby": [], "FormidableLabs/builder-react-component": [{"start": "npm install -g builder-init", "end": "npm link", "alternative end": "mkdir .builder-init-tmp"}, {"start": "npm install --no-optional", "end": "node_modules/.bin/builder run check-ci", "alternative end": "npm prune --production || echo \"Pruning failed. Continuing...\""}], "fullstorydev/hauser": [], "FormidableLabs/builder": [], "savonarola/pulse-meter": [], "fullcontact/full.async": [], "FormidableLabs/radium-grid": [{"start": "npm install -g npm@3", "end": "npm --version", "alternative end": "node_modules/.bin/builder run check-ci"}], "funbox/fitting": [], "funkwerk/gherkin_lint": [], "FormidableLabs/formidable-react-starter": [{"start": "npm install -g npm@3", "end": "export DISPLAY=:99.0", "alternative end": "sh -e /etc/init.d/xvfb start"}], "funkwerk/accessors": [], "funkwerk/compose_plantuml": [{"start": "pip install pyaml flake8 pylint", "end": "rake test"}], "funkwerk/compose_format": [{"start": "pip install ruamel.yaml flake8 pylint", "end": "rake test"}], "FormidableLabs/react-native-svg-mock": [{"start": "npm install -g npm@3", "end": "npm run lint", "alternative end": "npm run test"}], "FormidableLabs/react-game-kit": [], "future-architect/uroborosql": [], "FormidableLabs/electron-webpack-dashboard": [], "fusioncharts/redraphael": [], "FormidableLabs/victory-docs": [], "FormidableLabs/redux-little-router": [], "FormidableLabs/rowdy": [], "FormidableLabs/nuka-carousel": [], "futurice/haskell-mega-repo": [], "FormidableLabs/webpack-dashboard": [], "FormidableLabs/babel-plugin-transform-define": [], "fuzz-productions/CutoutViewIndicator": [], "FormidableLabs/ecology": [{"start": "npm install --production", "end": "npm run build"}], "fuzz-productions/CoreDataDandy": [], "Gaia3D/mago3djs": [{"start": "npm install", "end": "gulp", "alternative end": "master"}], "spirit-code/spirit": [{"start": "sudo pip install --upgrade pip six pyOpenSSL", "end": "if [[ \"${LLVM_VERSION}\" == \"default\" ]]; then LLVM_VERSION=3.9.0; fi", "alternative end": "if [[ \"${TRAVIS_OS_NAME}\" == \"linux\" ]]; then\n  DEPS_DIR=\"${TRAVIS_BUILD_DIR}/deps\"\n  mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}\n  CMAKE_URL=\"http://www.cmake.org/files/v3.5/cmake-3.5.2-Linux-x86_64.tar.gz\"\n  mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake\n  export PATH=${DEPS_DIR}/cmake/bin:${PATH}\n  export CC=${COMPILER_C} CXX=${COMPILER_CXX}\n  source /opt/qt57/bin/qt57-env.sh\nelse\n  if ! brew ls --version cmake &>/dev/null; then brew install cmake; fi\n  brew install cppcheck qt\n  brew link --force qt\n  export PATH=/usr/local/opt/qt/bin:${PATH}\nfi\n"}, {"start": "if [[ \"${TRAVIS_OS_NAME}\" == \"linux\" ]]; then\n  DEPS_DIR=\"${TRAVIS_BUILD_DIR}/deps\"\n  mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}\n  CMAKE_URL=\"http://www.cmake.org/files/v3.5/cmake-3.5.2-Linux-x86_64.tar.gz\"\n  mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake\n  export PATH=${DEPS_DIR}/cmake/bin:${PATH}\n  export CC=${COMPILER_C} CXX=${COMPILER_CXX}\n  source /opt/qt57/bin/qt57-env.sh\nelse\n  if ! brew ls --version cmake &>/dev/null; then brew install cmake; fi\n  brew install cppcheck qt\n  brew link --force qt\n  export PATH=/usr/local/opt/qt/bin:${PATH}\nfi\n", "end": "cd ${TRAVIS_BUILD_DIR}", "alternative end": "mkdir -p build\ncd build\ncmake ${CMAKE_OPTIONS} ..\ncd ..\n"}], "jdereg/n-cube": [], "codership/galera": [], "GaloisInc/lean-protocol-support": [], "GaloisInc/saw-script": [{"start": "sudo apt-get update -q", "end": "wget -t 3 https://github.com/Z3Prover/z3/releases/download/z3-4.8.7/z3-4.8.7-x64-ubuntu-16.04.zip", "alternative end": "unzip z3-4.8.7-x64-ubuntu-16.04.zip"}], "GaloisInc/crucible": [], "GaloisInc/parameterized-utils": [], "gamonoid/icehrm": [], "gameduell/duell": [{"start": "if [ \"${TRAVIS_OS_NAME}\" = \"linux\" ]; then export DISPLAY=:99.0; export AUDIODEV=null; elif [ \"${TRAVIS_OS_NAME}\" = \"osx\" ]; then brew update; brew install mono; brew install phantomjs; brew install python3; fi", "end": "haxelib install hxcpp", "alternative end": "haxelib install hxjava"}], "Gandi/gandi.cli": [{"start": "pip install -e \".[test]\"", "end": "python ./setup.py test", "alternative end": "coveralls"}], "bliblidotcom/vue-rangedate-picker": [], "dalehenrich/tode": [{"start": "pip install --user benchupload", "end": ".smalltalk.ston", "alternative end": "GemStone-2.4.8"}], "gmbecker/gRAN": [{"start": "not valid", "stop": "not valid"}], "gengo/gengo-python": [{"start": "pip install -e .[test]", "end": "flake8 gengo", "alternative end": "nosetests --rednose --with-coverage --cover-package=gengo"}], "gengo/gengo-php": [], "gengo/gengo-ruby": [], "gengo/decanter": [{"start": "sudo apt-get update", "end": "python setup.py coverage", "alternative end": "irc.freenode.net#Gengo"}], "devgeniem/wp-sanitize-accented-uploads": [], "gengo/goship": [], "genialis/django-rest-framework-reactive": [{"start": "pip install tox", "end": "tox -e $TOX_ENV", "alternative end": "test"}, {"start": "pip install setuptools_scm", "end": "skip", "alternative end": "pypi"}], "genomoncology/rigor": [{"start": "pip install tox", "end": "tox", "alternative end": "pip install codecov pipenv"}, {"start": "pip install codecov pipenv", "end": "tox -e coverage-report", "alternative end": "codecov"}], "CGAL/cgal": [{"start": "/usr/bin/time -f 'Spend time of %C -- %E (real)' sudo make install &>/dev/null", "end": "cd ..", "alternative end": "cd ./.travis"}], "geosolutions-it/jai-ext": [], "geosolutions-it/geostore": [], "geosolutions-it/http-proxy": [], "KeepSafe/ReLinker": [], "geosolutions-it/geoserver-manager": [], "geosolutions-it/imageio-ext": [], "KeepSafe/Cashier": [], "KeepSafe/android-resource-remover": [{"start": "pip install -r requirements-dev.txt", "end": "flake8 android_clean_app.py test", "alternative end": "nosetests"}], "geosolutions-it/MapStore2": [], "postmanlabs/newman": [], "getvero/vero": [], "postmanlabs/postman-runtime": [], "postmanlabs/npm-cli-login": [], "gettyimages/gettyimages-api_nodejs": [{"start": "npm install", "end": "./node_modules/.bin/eslint ./lib", "alternative end": "npm test"}], "postmanlabs/postman-collection": [], "pyrocko/pyrocko": [{"start": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then brew update; fi", "end": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then xcode-select --install || true ; fi", "alternative end": "pip install --upgrade pip setuptools wheel"}, {"start": "pip install --upgrade pip setuptools wheel", "end": "git clone https://github.com/pyrocko/fomosto-qseis", "alternative end": "cd fomosto-qseis; autoreconf -i; ./configure; make; export PATH=$PATH:`pwd`/src; cd .."}, {"start": "pip install .", "end": "travis_wait nosetests run --with-coverage --cover-package=pyrocko test/", "alternative end": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then coveralls; fi"}], "postmanlabs/openapi-to-postman": [], "postmanlabs/newman-docker": [{"start": "npm install", "end": "npm test", "alternative end": "echo \"All done!\""}], "postmanlabs/swagger2-to-postman": [], "xap/xap": [], "postmanlabs/postman-sandbox": [{"start": "if [[ `npm -v` < 4 ]]; then npm install -g npm; fi", "end": "Coverage", "alternative end": "stable"}], "Orchextra/orchextra-ios-sdk": [], "postmanlabs/sails-mysql-transactions": [], "mbryzek/schema-evolution-manager": [], "gini/dexter": [], "PetrPPetrov/beautiful-capi": [{"start": "if [ \"$TRAVIS_OS_NAME\" = \"linux\" ]; then sudo apt-get update -qq && sudo apt-get install -qq libboost-dev; fi", "end": "gcc", "alternative end": "clang"}], "gini/dropwizard-gelf": [], "shoov/shoov": [], "asilvas/node-image-steam": [], "godaddy/node-cluster-service": [], "goalgorilla/drupal_social": [], "godaddy/datastar": [], "freerange/oauth2-provider": [], "freerange/mocha": [], "goalgorilla/open_social": [], "freerange/method_log": [], "godaddy/warehouse.ai": [{"start": "npm install", "end": "AWS_ACCESS_KEY_ID=foobar AWS_SECRET_ACCESS_KEY=foobar"}], "gooddata/gooddata-react-components": [], "gooddata/gooddata-ruby": [{"start": "gem install gooddata\nruby -e \"require 'gooddata';GoodData.version\"\n", "end": "gem-smoke-test", "alternative end": "smoke test JRuby gem"}, {"start": "gem install gooddata\nruby -e \"require 'gooddata';GoodData.version\"\n", "end": "openjdk8", "alternative end": "AMTssALc5Qt4ApAoI7gCmqP3d7AL0dGyZ+DsxYYlas2T0tjXdOH97XlY2jRzFSxZU1P3JKJkjHLmxu0m908Q28SQVcdBlK29Ofyl2pwGnniExY4wdQJLmqNW9eKa2dmSMUsntR6DryNThKVn9mqUACdXgpT8X2CnQl/DWMGpo80="}], "goodeggs/librato-node": [], "golemfactory/golem-unlimited": [], "goodeggs/chai-webdriver": [], "goodow/realtime-android": [], "goodrain/rainbond-install": [{"start": "sudo apt-get update", "end": "curl -L http://bootstrap.saltstack.org | sudo sh -E -s -- -P stable", "alternative end": "sudo mkdir -p /srv && sudo ln -sfn $PWD/tests /srv/formula"}], "goodeggs/fibrous": [], "goodrain/rainbond-ui": [], "goodrain/rainbond": [], "goodeggs/angular-cached-resource": [], "goodeggs/teacup": [], "PolymerElements/iron-scroll-threshold": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "goshippo/shippo-php-client": [], "spring-guides/gs-serving-web-content": [], "goshippo/shippo-python-client": [], "goshippo/shippo-ruby-client": [{"start": "gem install bundler --no-ri --no-rdoc; bundle exec rspec", "end": "shippo:JOD4pUgjGlhSJ1s8mNKUTxKB#devcistatus", "alternative end": "wissam@goshippo.com"}], "tensorflow/tensorboard": [{"start": "pip install -U pip", "end": "pip uninstall -y numpy", "alternative end": "pip install \\\n  -r tensorboard/pip_package/requirements.txt \\\n  -r tensorboard/pip_package/requirements_dev.txt \\\n  ;\n"}, {"start": "pip install \\\n  -r tensorboard/pip_package/requirements.txt \\\n  -r tensorboard/pip_package/requirements_dev.txt \\\n  ;\n", "end": "nvm use v11", "alternative end": "# Install TensorFlow if requested\nif [ -n \"${TF_VERSION_ID}\" ]; then\n  pip install -I \"${TF_VERSION_ID}\"\nfi\n"}, {"start": "# Install TensorFlow if requested\nif [ -n \"${TF_VERSION_ID}\" ]; then\n  pip install -I \"${TF_VERSION_ID}\"\nfi\n", "end": "sudo rm -f /etc/boto.cfg", "alternative end": "pip freeze"}], "goshippo/shippo-node-client": [], "dart-lang/bazel": [], "google/trillian": [{"start": "sudo apt-get update", "end": "./integration/integration_test.sh && HAMMER_OPTS=\"--operations=50\" ./integration/maphammer.sh 3", "alternative end": "integration (mariaDB)"}], "google/transitfeed": [{"start": "pip install -r requirements.txt", "end": "nosetests"}], "bcgov/bcgroundwater": [], "gradle/gradle": [], "Polymer/polymer-modulizer": [], "kageiit/android-studio-gradle-test": [], "melix/japicmp-gradle-plugin": [], "GoogleCloudPlatform/container-engine-accelerators": [], "bazelbuild/rules_webtesting": [], "google/closure-compiler": [], "DynamoRIO/drmemory": [{"start": "if [[ \"`uname`\" == \"Darwin\" ]]; then brew update; brew install nasm; fi", "end": "if [[ \"`uname`\" == \"Linux\" && \"$DRMEMORY_CROSS_ANDROID_ONLY\" == yes ]]; then\n    cd /tmp\n    wget https://dl.google.com/android/repository/android-ndk-r10e-linux-x86_64.zip\n    unzip -q android-ndk-r10e-linux-x86_64.zip\n    android-ndk-r10e/build/tools/make-standalone-toolchain.sh --arch=arm \\\n        --toolchain=arm-linux-androideabi-4.9 \\\n        --platform=android-21 \\\n        --install-dir=/tmp/android-gcc-arm-ndk-10e\n    # Manually force using ld.bfd, setting CMAKE_LINKER does not work.\n    ln -sf ld.bfd /tmp/android-gcc-arm-ndk-10e/arm-linux-androideabi/bin/ld\n    ln -sf arm-linux-androideabi-ld.bfd /tmp/android-gcc-arm-ndk-10e/bin/arm-linux-androideabi-ld\n    cd -\nfi\n", "alternative end": "tests/runsuite_wrapper.pl travis"}], "grammarly/rocker": [{"start": "sudo apt-get update", "end": "sudo apt-get -qqy -o Dpkg::Options::=\"--force-confdef\" -o Dpkg::Options::=\"--force-confold\" install docker-engine=${DOCKER_VERSION}~precise", "alternative end": "echo 'DOCKER_OPTS=\"-H tcp://127.0.0.1:2375 -H unix:///var/run/docker.sock -s '${DOCKER_FS}'\"' | sudo tee /etc/default/docker > /dev/null"}, {"start": "make install", "end": "make test_integration", "alternative end": "set +e"}], "grammarly/focal": [], "google/monologue": [], "GoogleCloudPlatform/appengine-plugins-core": [], "grammarly/rocker-compose": [], "subscriptions-project/swg-js": [], "google/gtm-oauth2": [], "bazelbuild/rules_docker": [], "grandcentrix/thirtyinch": [], "graphaware/graph-aided-search": [{"start": "sudo apt-get update > /dev/null", "end": "oraclejdk8", "alternative end": "oraclejdk7"}], "graze/telnet-client": [], "Polymer/polymer": [{"start": "npm install -g gulp-cli@1", "end": "gulp lint-eslint", "alternative end": "node ./node_modules/.bin/polymer test --npm --module-resolution=node -l chrome"}], "graphaware/reco4php": [{"start": "sudo apt-get update > /dev/null", "end": "sh -c ./build/install-jdk8.sh", "alternative end": "sh -c ./build/install-neo.sh"}], "graphaware/neo4j-expire": [], "graze/guzzle-jsonrpc": [{"start": "sudo apt-get update", "end": "sudo apt-get -y -o Dpkg::Options::=\"--force-confnew\" install docker-ce", "alternative end": "make deps-js"}], "graphaware/neo4j-algorithms": [], "graphaware/neo4j-bolt-php": [{"start": "sudo apt-get update > /dev/null", "end": "sh -c ./build/install-jdk8.sh", "alternative end": "sh -c ./build/install-neo.sh"}], "graphaware/neo4j-timetree": [], "renggli/dart-xml": [], "graze/dog-statsd": [], "graphaware/neo4j-to-elasticsearch": [], "graze/parallel-process": [], "graphaware/neo4j-uuid": [], "graze/supervisor": [], "GoogleCloudPlatform/google-cloud-datastore": [{"start": "pip install --upgrade pip", "end": "TEST_DIR=java TEST_CMD='mvn test'", "alternative end": "TEST_DIR=python TEST_CMD='tox -e py27'"}], "graphaware/neo4j-reco": [], "graze/cucumber-rest-bdd": [], "graphaware/neo4j-php-ogm": [{"start": "sudo apt-get update > /dev/null", "end": "sh -c ./build/install-jdk.sh", "alternative end": "sh -c ./build/install-neo.sh"}], "google/cap-library": [], "graze/queue": [], "graphaware/neo4j-noderank": [], "graphaware/neo4j-changefeed": [], "graze/docker-php-alpine": [], "graphaware/neo4j-nlp": [], "google/certificate-transparency-go": [], "graphaware/neo4j-framework": [], "graphaware/recommendations-meetup": [], "graphaware/neo4j-nlp-stanfordnlp": [], "graphaware/neo4j-importer": [], "dart-lang/rpc": [], "conversationai/perspectiveapi-js-client": [], "Greentube/localize-router": [], "PolymerElements/iron-list": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "icing/mod_h2": [], "Greentube/ngx-modal": [], "Greentube/ngx-typeahead": [], "material-foundation/material-text-accessibility-ios": [{"start": "gem install xcpretty --no-rdoc --no-ri --no-document --quiet", "end": "set -o pipefail", "alternative end": "xcodebuild -version"}], "apache/ignite": [], "dialogflow/dialogflow-fulfillment-nodejs": [], "dart-lang/protobuf": [], "groupon/grox": [], "google/trillian-examples": [], "groupon/sparklint": [], "groupon/cson-parser": [], "google/vulkan_test_applications": [], "spring-cloud/spring-cloud-gcp": [], "groupon/assertive": [], "groupon/monsoon": [], "18F/concourse-compliance-testing": [], "groupon/nlm": [], "groupon/gofer": [], "groupon/ansible-silo": [{"start": "gem install awesome_bot", "end": "ssh-keygen -b 2048 -t rsa -f ~/.ssh/id_rsa -q -N \"\"", "alternative end": "eval `ssh-agent -s`"}], "18F/dolores-landingham-slack-bot": [], "groupon/codeburner": [], "googleapis/discovery-artifact-manager": [{"start": "pip3 install flask gunicorn six", "end": "sudo sh -c 'echo \"deb [arch=amd64] https://apt-mo.trafficmanager.net/repos/dotnet-release/ trusty main\" > /etc/apt/sources.list.d/dotnetdev.list'", "alternative end": "sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 417A0893"}, {"start": "sudo apt-get update", "end": "nvm install node", "alternative end": "nvm use node"}], "groupon/DotCi": [], "18F/jekyll_pages_api_search": [], "groupon/backbeat": [{"start": "gem install bundler", "end": "bundle install", "alternative end": "psql -c \"CREATE ROLE backbeat with SUPERUSER LOGIN PASSWORD 'backbeat';\" -U postgres"}], "google/mobly": [], "groupon/node-cached": [], "google/shipshape": [], "Polymer/lit-html": [], "groupon/FeatureAdapter": [], "18F/continua11y": [{"start": "npm install -g pa11y-crawl", "end": "pa11y-crawl --run \"npm start\" --ci http://localhost:3000", "alternative end": "False"}], "dart-lang/mockito": [], "groupon/javascript": [], "goldmansachs/gs-collections": [], "tensorflow/tensor2tensor": [], "conversationai/wikidetox": [], "GSI-HPC/sys-chef-cookbook": [{"start": "gem install bundler", "end": "--without vagrant", "alternative end": "sudo modprobe autofs4"}], "google/martian": [], "18F/linkify-citations": [], "guidesmiths/rascal": [], "googledatalab/datalab": [{"start": "pip install -U pip --user travis", "end": "cd $TRAVIS_BUILD_DIR/containers/datalab", "alternative end": "./build.sh"}, {"start": "npm install -s -q --depth 0", "end": "npm test"}], "google/auto": [], "GoogleCloudPlatform/compute-image-packages": [{"start": "pip install \"virtualenv<14.0.0\"", "end": "cd packages/python-google-compute-engine", "alternative end": "tox"}], "h2oai/datatable": [{"start": "pip install --upgrade pip", "end": "python ci/ext.py wheel", "alternative end": "pip install --upgrade dist/*.whl"}, {"start": "pip install --upgrade dist/*.whl", "end": "python -m pytest -ra --showlocals -Werror tests"}], "GoogleChrome/samples": [{"start": "npm install", "end": "npm run lint", "alternative end": "bundle exec jekyll build"}], "18F/ffd-microsite": [{"start": "npm install", "end": "npm test", "alternative end": "npm run build"}], "GoogleCloudPlatform/app-gradle-plugin": [], "GoogleCloudPlatform/repository-gardener": [], "GoogleCloudPlatform/compute-image-windows": [], "18F/automated-testing-playbook": [], "hablapps/puretest": [], "mbrukman/autogen": [{"start": "brew cleanup", "end": "bazel test --config=ci //..."}], "dart-lang/pub": [], "googlesamples/google-services": [{"start": "gem install bundler", "end": "cd ios/$SAMPLE", "alternative end": "bundle install"}, {"start": "gem install xcpretty", "end": "bundle exec pod install --repo-update", "alternative end": "sed -i '' 's/YOUR_REVERSED_CLIENT_ID/com.googleusercontent.apps.123456789000-hjugbg6ud799v4c49dim8ce2usclthar/' \"$SAMPLE\"Example/Info.plist"}], "18F/micropurchase": [], "18F/jekyll_pages_api": [], "linkedin/dexmaker": [], "wearehanno/riggings": [{"start": "npm install -g bower", "end": "bower install", "alternative end": "bundle exec rake build"}], "GoogleCloudPlatform/k8s-stackdriver": [], "dart-lang/cli_util": [], "18F/methods": [], "google/caliper": [], "18F/content-guide": [{"start": "gem install bundler", "end": "./go ci_build", "alternative end": "18f-pages"}], "actions-on-google/actions-on-google-nodejs": [], "hashedin/jinjasql": [], "google/containerregistry": [], "terraform-providers/terraform-provider-azuread": [], "18F/html-proofer-docker": [], "PolymerElements/paper-scroll-header-panel": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "18F/autoapi": [{"start": "pip install -r requirements.txt", "end": "py.test test*.py"}], "GoogleCloudPlatform/k8s-service-catalog": [], "PolymerElements/gold-phone-input": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "18F/pages": [], "PolymerElements/neon-animation": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "terraform-providers/terraform-provider-github": [], "terraform-providers/terraform-provider-opc": [], "PolymerElements/paper-dialog": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "PolymerElements/iron-a11y-keys": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "PolymerElements/iron-form": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "hashrocket/gatling": [], "hashicorp/faas-nomad": [{"start": "sudo apt-get update", "end": "curl https://releases.hashicorp.com/nomad/0.7.1/nomad_0.7.1_linux_amd64.zip -o nomad.zip", "alternative end": "curl https://releases.hashicorp.com/consul/1.0.0/consul_1.0.0_linux_amd64.zip -o consul.zip"}], "connectbot/connectbot": [], "hashrocket/decent_exposure": [], "PolymerElements/paper-fab": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "google/dart-sync-webdriver": [], "PolymerElements/paper-slider": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "google/google-java-format": [], "androidthings/contrib-drivers": [], "WebComponents/template": [], "mackerelio/mackerel-agent-plugins": [{"start": "sudo apt-get update", "end": "mkdir -p ~/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}", "alternative end": "make all"}], "material-components/material-components-ios": [{"start": "gem install cocoapods xcpretty --no-rdoc --no-ri --no-document --quiet", "end": "git lfs install", "alternative end": "git lfs pull"}], "mackerelio/go-check-plugins": [], "mackerelio/mackerel-client-ruby": [{"start": "gem install bundler", "end": "2.7", "alternative end": "2.6"}], "mackerelio/mackerel-agent": [], "mackerelio/mkr": [{"start": "sudo apt-get update", "end": "mkdir -p ~/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}", "alternative end": "make all"}], "GoogleCloudPlatform/PerfKitBenchmarker": [{"start": "pip install tox", "end": "tox -r -e $TOX_ENV"}], "terraform-providers/terraform-provider-azurerm": [], "PolymerElements/paper-progress": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "terraform-providers/terraform-provider-postgresql": [], "cuba-platform/yarg": [], "kubernetes/dns": [], "google/shaka-packager": [], "cuba-platform/cuba-cli": [], "cuba-platform/cuba": [], "dart-lang/pub_server": [], "hashicorp/nomad-java-sdk": [], "hashicorp/hcl2": [], "hazelcast/hazelcast-docker": [], "googleapis/gax-php": [], "google/webdriver.dart": [], "PolymerElements/prism-element": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "GoogleCloudPlatform/cloud-bigtable-examples": [], "dart-lang/linter": [], "hashicorp/terraform-website": [{"start": "gem install bundler -v '1.17.3' --no-document", "end": "bundle _1.17.3_ install --jobs=3 --retry=3", "alternative end": "False"}], "DSI-HUG/dejajs-components": [{"start": "npm install -g yarn", "end": "rm -rf node_modules", "alternative end": "bash ./scripts/test-latest-versions.sh"}], "GoogleCloudPlatform/python-docs-samples": [{"start": "pip install --upgrade pip wheel virtualenv", "end": "./scripts/travis.sh"}], "hdiv/hdiv": [], "sakitam-fdd/HMap": [{"start": "npm install", "end": "latest", "alternative end": "export DISPLAY=:99.0"}], "WebComponents/html-imports": [{"start": "npm install -g bower", "end": "bower install", "alternative end": "xvfb-run wct"}], "google/guice": [], "headwirecom/peregrine-cms": [], "PolymerElements/paper-icon-button": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "hashicorp/atlas-go": [], "HealthCatalyst/Fabric.Cashmere": [], "PolymerElements/paper-toast": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "PolymerElements/iron-pages": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "PolymerElements/iron-resizable-behavior": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "HealthCatalyst/healthcareai-r": [], "terraform-providers/terraform-provider-ignition": [], "PolymerElements/paper-dialog-behavior": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "PolymerElements/iron-overlay-behavior": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "HedvigInsurance/app": [], "hashicorp/atlas-upload-cli": [], "google/guava": [], "census-instrumentation/opencensus-java": [], "dart-lang/graphs": [], "terraform-providers/terraform-provider-mysql": [], "terraform-providers/terraform-provider-bitbucket": [], "PolymerElements/iron-demo-helpers": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "Firebase/quickstart-js": [{"start": "npm install -g lerna", "end": "lerna bootstrap", "alternative end": "npm test"}], "helium/plumtree": [], "kubernetes/node-problem-detector": [{"start": "sudo apt-get install -y libsystemd-journal-dev", "end": "mkdir -p $HOME/gopath/src/k8s.io", "alternative end": "mv $TRAVIS_BUILD_DIR $HOME/gopath/src/k8s.io/node-problem-detector"}], "hashicorp/go-discover": [], "google/codeu_project_2017": [], "helium/airship": [], "PolymerElements/iron-fit-behavior": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "google/mozc": [{"start": "if [ $TRAVIS_OS_NAME == linux ]; then sudo apt-get update; fi", "end": "if [ $TRAVIS_OS_NAME == linux ]; then git -C src/third_party clone https://chromium.googlesource.com/chromium/tools/depot_tools.git; fi", "alternative end": "if [ $TRAVIS_OS_NAME == linux ]; then export PATH=\"$PATH\":`pwd`/src/third_party/depot_tools; fi"}, {"start": "if [ $TARGET_PLATFORM == Mac ]; then brew update && brew install qt5; fi", "end": "if [ $TARGET_PLATFORM == NaCl ]; then cd src/third_party && curl -LO http://storage.googleapis.com/nativeclient-mirror/nacl/nacl_sdk/nacl_sdk.zip && unzip nacl_sdk.zip && rm nacl_sdk.zip && cd nacl_sdk && ./naclsdk install pepper_49 && cd ../../../; fi", "alternative end": "if [ ${TARGET_PLATFORM:0:7} == Android ]; then jdk_switcher use openjdk7; fi"}], "hellofresh/goengine": [], "google/fleetspeak": [{"start": "sudo apt-get update", "end": "python3 -m venv \"${HOME}/FSENV\"", "alternative end": "mysql --print-defaults"}, {"start": "source \"${HOME}/FSENV/bin/activate\" && pip install --upgrade pip wheel && pip install -e ./fleetspeak_python", "end": "mkdir -p \"$(go env GOPATH)/src/git.apache.org\"", "alternative end": "git clone https://github.com/apache/thrift.git \"$(go env GOPATH)/src/git.apache.org/thrift.git\""}, {"start": "pip install wheel", "end": "powershell Install-WindowsFeature Net-Framework-Core", "alternative end": "cinst -y wixtoolset --version 3.11.1"}, {"start": "pip3 install wheel", "end": "go build -o fleetspeak-client ./fleetspeak/src/client/client/client.go", "alternative end": "BUILD_TIMESTAMP=$(git show -s --format=%ci ${TRAVIS_COMMIT} | sed -e \"s/[ :\\\\+]/_/g\")"}], "hashicorp/consul-replicate": [], "google/j2cl": [], "hellofresh/engine": [], "PolymerElements/paper-spinner": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "PolymerElements/app-layout": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "terraform-providers/terraform-provider-rancher": [], "Firebase/firebase-jobdispatcher-android": [], "terraform-providers/terraform-provider-docker": [{"start": "sudo apt-get update", "end": "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -", "alternative end": "sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\""}, {"start": "sudo apt-get update", "end": "docker version", "alternative end": "sudo sed 's/DOCKER_OPTS=\"/DOCKER_OPTS=\"--insecure-registry=127.0.0.1:15000 /g' -i /etc/default/docker"}], "terraform-providers/terraform-provider-rabbitmq": [], "google/google-toolbox-for-mac": [], "hashicorp/otto": [], "google/uri.dart": [], "hashicorp/go-multierror": [], "PolymerElements/iron-input": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "ICB-DCM/AMICI": [{"start": "python -m pip install --upgrade pip", "end": "git clone -c core.symlinks=true https://github.com/AMICI-dev/AMICI.git && cd AMICI", "alternative end": "if [[ \"$TRAVIS_PULL_REQUEST\" == \"false\" ]]; then git checkout -qf $TRAVIS_COMMIT; elif [[ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]]; then git fetch --update-head-ok origin pull/$TRAVIS_PULL_REQUEST/head:$TRAVIS_BRANCH && git checkout $TRAVIS_BRANCH; fi"}, {"start": "pip install -v $(ls -t dist/amici-*.tar.gz | head -1)", "end": "export FOLD=$BASE_DIR/scripts/travis_wrap.sh", "alternative end": "cd $BASE_DIR"}, {"start": "pip install pytest petab", "end": "python -m pytest --ignore-glob=*petab* ./python/tests"}], "dart-league/sass_builder": [], "terraform-providers/terraform-provider-spotinst": [], "NatLibFi/Skosmos": [], "PolymerElements/paper-input": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "NatLibFi/bib-rdf-pipeline": [], "NatLibFi/annif": [{"start": "pip install .[dev]", "end": "travis_wait 30 python -m nltk.downloader punkt", "alternative end": "if [[ $TRAVIS_PYTHON_VERSION != '3.7' ]]; then pip install .[nn]; fi"}, {"start": "if [[ $TRAVIS_PYTHON_VERSION != '3.7' ]]; then pip install .[nn]; fi", "end": "pytest --cov=./", "alternative end": "codecov"}], "PolymerElements/paper-radio-group": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "helpshift/hydrox": [], "NatLibFi/Skosify": [{"start": "pip install Pygments collective.checkdocs", "end": "python setup.py test", "alternative end": "python setup.py checkdocs"}], "PolymerElements/iron-media-query": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "PolymerElements/iron-collapse": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "NatLibFi/RecordManager": [], "PolymerElements/paper-toolbar": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "heroku/heroku.jar": [], "heroku/heroku-buildpack-gradle": [], "heroku/heroku-buildpack-java": [], "heroku/heroku-buildpack-jvm-common": [{"start": "gem install bundler", "end": "bundle install", "alternative end": "bundle exec hatchet ci:setup"}], "heroku/heroku-deploy": [], "dart-lang/collection": [], "PolymerElements/paper-header-panel": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "PolymerElements/paper-drawer-panel": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "PolymerElements/paper-card": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "dart-lang/async": [], "sclasen/swfsm": [], "PolymerElements/paper-toggle-button": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "dart-lang/dev_compiler": [{"start": "npm install", "end": "if [[ -z \"$TEST\" ]]; then ./tool/presubmit.sh ; fi", "alternative end": "if [[ \"$TEST\" == coverage ]]; then ./tool/build_sdk.sh && ./tool/coverage.sh ; fi"}], "google/jsinterop-base": [], "google/gnxi": [], "Hirevue/hv-react-agenda": [], "node-red/node-red-nodegen": [], "google/cauliflowervest": [{"start": "brew update", "end": "bazel test --test_output=all cauliflowervest:all_smoke_tests", "alternative end": "required"}], "google/python-fire": [{"start": "pip install --upgrade setuptools pip", "end": "python setup.py develop", "alternative end": "python -m pytest"}, {"start": "pip install ipython", "end": "python -m pytest", "alternative end": "pylint fire --ignore=test_components_py3.py,parser_fuzz_test.py,console"}, {"start": "if [[ $TRAVIS_PYTHON_VERSION != 3.4 ]]; then pip install pytype; fi", "end": "if [[ $TRAVIS_PYTHON_VERSION == 2.7 ]]; then pytype -x fire/fire_test.py fire/inspectutils_test.py fire/test_components_py3.py; elif [[ $TRAVIS_PYTHON_VERSION != 3.4 ]]; then pytype; fi"}], "bettyblocks/sql_dust": [], "googlegenomics/gcp-variant-transforms": [{"start": "python -m pip install --upgrade .", "end": "./run_presubmit.sh", "alternative end": "coveralls"}], "WebComponents/webcomponents.org": [{"start": "npm install", "end": "if [ ! -d $HOME/gcloud/google-cloud-sdk ]; then mkdir -p $HOME/gcloud && wget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz --directory-prefix=$HOME/gcloud && cd $HOME/gcloud && tar xzf google-cloud-sdk.tar.gz && printf '\\ny\\n\\ny\\ny\\n' | ./google-cloud-sdk/install.sh && cd $TRAVIS_BUILD_DIR; fi", "alternative end": "printf '\\ny\\n' | $HOME/gcloud/google-cloud-sdk/bin/gcloud components install app-engine-python"}], "holidayextras/jsonapi-server": [{"start": "npm install -g npm@latest", "end": "greenkeeper-lockfile-update", "alternative end": "npm run ci"}], "parsingdata/metal": [{"start": "pip install --user codecov", "end": "mvn clean verify sonar:sonar -Dsonar.projectKey=parsingdata_metal", "alternative end": "codecov"}], "holidayextras/jsonapi-client": [], "holidayextras/esq": [], "holidayextras/jsonapi-store-relationaldb": [], "PolymerElements/paper-radio-button": [{"start": "npm install -g polymer-cli", "end": "git checkout package-lock.json", "alternative end": "npm run format && git diff --exit-code || (echo -e '\\n\\033[31mERROR:\\033[0m Project is not formatted. Please run \"npm run format\".' && false)"}], "census-instrumentation/opencensus-go": [{"start": "make install-tools", "end": "make travis-ci", "alternative end": "go run internal/check/version.go"}], "google/libprotobuf-mutator": [], "grpc/grpc-java": [], "liteos/LiteOS": [{"start": "sudo apt-get update -q", "end": "cd targets/Cloud_STM32F429IGTx_FIRE/GCC", "alternative end": "make"}], "hootsuite/grid": [], "hostnet/form-handler-bundle": [], "hortonworks-spark/spark-llap": [{"start": "pip install coverage pycodestyle", "end": "mkdir $TRAVIS_BUILD_DIR/spark", "alternative end": "curl -O http://mirrors.gigenet.com/apache/spark/spark-$TEST_SPARK_VERSION/spark-$TEST_SPARK_VERSION-bin-hadoop2.7.tgz"}], "Firebase/firebase-ios-sdk": [], "GoogleCloudPlatform/app-maven-plugin": [], "hostnet/hnDependencyInjectionPlugin": [], "google/elemental2": [], "HotelsDotCom/heat": [], "hortonworks/streamline": [], "google/keytransparency": [], "dart-lang/angular": [], "hoteltonight/shameless": [], "hortonworks/registry": [], "google/oauth2l": [], "google/pprof": [], "HewlettPackard/oneview-chef": [{"start": "gem update bundler", "end": "rake test", "alternative end": "bundle exec codeclimate-test-reporter"}], "grpc/grpc-proto": [], "Firebase/friendlyeats-web": [{"start": "npm install -g eslint", "end": "./test.sh"}], "devops-dojo/the-app": [{"start": "pip install -r requirements.txt", "end": "find vagrant/provision -name \"*.yml\" -exec ansible-lint -x ANSIBLE008,ANSIBLE0011,ANSIBLE0012,ANSIBLE0013  {} +"}], "ouxu/NEUQ-OJ": [], "HewlettPackard/oneview-ansible": [{"start": "if [[ $PYPI_VERSION ]]; then pip install ansible==$PYPI_VERSION; fi", "end": "export ANSIBLE_LIBRARY=$PWD/library", "alternative end": "export PYTHONPATH=$ANSIBLE_LIBRARY:$PYTHONPATH"}], "HewlettPackard/terraform-provider-oneview": [], "dart-lang/source_gen": [], "google/clusterfuzz": [], "HewlettPackard/python-hpOneView": [{"start": "pip install tox", "end": "tox", "alternative end": "./deploy.sh"}], "googleads/googleads-mobile-ios-examples": [], "HubSpot/Rosetta": [], "google/cmockery": [], "grpc-ecosystem/grpc-httpjson-transcoding": [], "HubSpot/Singularity": [], "HubSpot/Baragon": [], "HubSpot/jackson-jaxrs-propertyfiltering": [], "HubSpot/jackson-datatype-protobuf": [], "kubernetes-sigs/poseidon": [], "google/tracing-framework": [{"start": "sudo apt-get install -y g++-4.8 clang-3.8 libgtest-dev", "end": "./scripts/setup.sh", "alternative end": "./third_party/anvil-build/anvil-local.sh build -j1 :debug :release :lint"}], "HubSpot/NioImapClient": [], "HubSpot/slack-client": [], "kubeedge/kubeedge": [{"start": "sudo apt-get install jq -y", "end": "make verify", "alternative end": "make lint"}, {"start": "sudo apt-get install upx-ucl -y", "end": "export GOFLAGS=-mod=vendor", "alternative end": "make"}, {"start": "sudo apt-get update && sudo apt-get install -y apt-transport-https", "end": "curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -", "alternative end": "echo \"deb https://apt.kubernetes.io/ kubernetes-xenial main\" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list"}, {"start": "sudo apt-get update", "end": "travis_retry make e2e", "alternative end": "keadm e2e test"}, {"start": "sudo apt-get update && sudo apt-get install -y apt-transport-https", "end": "curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -", "alternative end": "echo \"deb https://apt.kubernetes.io/ kubernetes-xenial main\" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list"}, {"start": "sudo apt-get update", "end": "travis_retry make keadm_e2e", "alternative end": "build docker images on amd64"}, {"start": "sudo apt-get install upx-ucl -y", "end": "make", "alternative end": "make bluetoothdevice"}], "scalan/scalan": [], "dart-lang/stream_transform": [], "conversationai/perspective-viewership-extension": [], "sjbarag/brs": [], "google/eDistantObject": [], "IRATI/stack": [{"start": "sudo apt-get update -qq", "end": "[ ${KERNEL_VERSION} != local ] || ./ci/build-all", "alternative end": "[ ${KERNEL_VERSION} == local ] || ./ci/build-kernel"}], "OpenRoberta/robertalab": [], "googledatalab/notebooks": [], "kubernetes/gengo": [], "rwth-i6/returnn": [{"start": "pip install typing | cat", "end": "echo \"[global]\" >> ~/.theanorc", "alternative end": "echo \"device = cpu\" >> ~/.theanorc"}], "IBM/watson-waste-sorter": [{"start": "pip install -r server/requirements.txt", "end": "flake8 server", "alternative end": "pytest"}], "ibitcy/react-stores": [], "googlesamples/assistant-sdk-python": [{"start": "sudo apt-get install -y portaudio19-dev libffi-dev libssl-dev", "end": "nox -f google-assistant-grpc/noxfile.py -s lint", "alternative end": "nox -f google-assistant-sdk/noxfile.py -s lint unittest"}], "ibuildingsnl/qa-tools": [], "IBM/adversarial-robustness-toolbox": [{"start": "python -m pip install --upgrade pip==20.1.1 setuptools wheel", "end": "pip list", "alternative end": "./run_tests.sh"}], "google/vim-glaive": [{"start": "sudo apt-get update", "end": "wget https://github.com/google/vroom/releases/download/v${VROOM_VERSION}/vroom_${VROOM_VERSION}-1_all.deb", "alternative end": "sudo dpkg -i ./vroom_${VROOM_VERSION}-1_all.deb"}], "IBM/pixiedust-facebook-analysis": [{"start": "npm install -g markdownlint-cli", "end": "markdownlint --config $TRAVIS_BUILD_DIR/.markdownlint.json README.md", "alternative end": "if grep -n -T --before-context 2 --after-context 1 TODO README.md; then exit 1; fi"}], "IBM/watson-discovery-news-alerting": [], "Polymer/lit-element": [], "IBM/chatbot-deployer": [], "flutter/samples": [], "IBM/cognitive-social-crm": [], "IBM/watson-online-store": [{"start": "pip install -r requirements.txt", "end": "flake8 .", "alternative end": "py.test --cov=watsononlinestore"}], "Jigsaw-Code/intra": [], "IBM/tjbot-sports-buddy": [], "IcaliaLabs/acts_as_user": [], "cloudendpoints/endpoints-java": [], "dart-gde/chrome.dart": [], "icicletech/ember-cli-full-calendar": [], "GoogleContainerTools/jib": [], "icon-project/icon-sdk-python": [], "dart-lang/dartdoc": [], "deepmind/torch-hdf5": [{"start": "sudo apt-get update -qq >/dev/null", "end": "curl -s https://raw.githubusercontent.com/torch/ezinstall/master/install-all | bash", "alternative end": "echo \"==== Building torch-hdf5, using luarocks ====\""}], "icon-project/icon-sdk-java": [], "flutter/flutter-intellij": [{"start": "sudo apt-get update", "end": "echo $(ant -version)", "alternative end": "git clone --depth 1 https://github.com/flutter/flutter.git ../flutter"}], "icon-project/icon-service": [{"start": "pip install -e .[test]", "end": "python -m pytest -ra", "alternative end": "pypi"}], "icon-project/t-bears": [{"start": "pip install -r requirements.txt", "end": "python setup.py test", "alternative end": "pypi"}], "valotas/mustache4dart": [], "GoogleCloudPlatform/fluent-plugin-google-cloud": [{"start": "gem update bundler", "end": "google-fluentd-notifications+travis@google.com", "alternative end": "change"}], "Icinga/icingaweb2-module-director": [], "Icinga/puppet-icinga2": [], "ICTU/quality-report": [{"start": "pip install -r backend/requirements.txt", "end": "test", "alternative end": "3.6"}, {"start": "npm install", "end": "npm run build", "alternative end": "npm run cover"}], "google/pageloader": [], "google/googet": [], "Icinga/puppet-icingaweb2": [{"start": "[ -z \"$RUBYGEMS_VERSION\" ] || (yes || true) | gem update --system $RUBYGEMS_VERSION", "end": "gem --version", "alternative end": "bundle -v"}], "dart-lang/build": [], "Icinga/icingabeat": [], "kubernetes-sigs/controller-tools": [], "idealista/tlsh-js": [], "dart-lang/http2": [], "Icinga/chef-icinga2": [], "idealista/airflow-role": [{"start": "pip install ansible==${ansible_version}", "end": "molecule test --all", "alternative end": "https://galaxy.ansible.com/api/v1/notifications/"}], "idealista/prom2teams": [{"start": "pip install -r requirements.txt", "end": "python -m unittest discover tests", "alternative end": "python3 -m pip install --upgrade setuptools"}, {"start": "python3 -m pip install --upgrade setuptools", "end": "Deploy to PyPI", "alternative end": "skip"}], "Icinga/icingaweb2-module-businessprocess": [], "dart-lang/resource": [], "idealo/imageatm": [{"start": "pip install -e \".[tests, docs]\"", "end": "pytest -vs --cov=imageatm --show-capture=no --disable-pytest-warnings tests/", "alternative end": "cd mkdocs && sh build_docs.sh"}], "idealo/image-super-resolution": [{"start": "pip install flake8 -e \".[tests, docs]\"", "end": "flake8 . --count --show-source --statistics --select=E9,F63,F7,F82", "alternative end": "pytest -vs --cov=ISR --show-capture=no --disable-pytest-warnings tests/"}], "WebComponents/ShadyDOM": [], "idealo/logback-redis": [], "GoogleCloudPlatform/runtimes-common": [{"start": "pip install --user --upgrade -r requirements.txt", "end": "nvm install $NODE_VERSION", "alternative end": "export PATH=$PATH:$HOME/bin && mkdir -p $HOME/bin"}, {"start": "pip install wheel", "end": "./test.sh"}], "WebComponents/custom-elements": [], "iDevicesInc/SweetBlue": [], "Ifactory-Solutions/inside-client": [], "Ifactory-Solutions/inside-server": [], "Grafeas/kritis": [], "google/openhtf": [{"start": "pip install tox coveralls", "end": "wget https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protoc-3.6.1-linux-x86_64.zip", "alternative end": "unzip protoc-3.6.1-linux-x86_64.zip"}], "dart-lang/stream_channel": [], "aperezdc/revolt": [{"start": "pip install flake8 flake8-quotes", "end": "ln -s revolt revolt.py", "alternative end": "flake8 ."}], "IGNF/geoportal-sdk": [{"start": "npm install", "end": "npm run build:2d", "alternative end": "npm run build:3d"}], "IGNF/geoxygene": [], "conversationai/perspectiveapi-authorship-demo": [{"start": "npm install -g yarn typings typescript ts-node mocha protractor angular-cli karma-cli", "end": "npm run setup", "alternative end": "yarn install"}], "dart-lang/sample-pop_pop_win": [], "dart-lang/web_socket_channel": [], "semagrow/semagrow": [], "robotology/ycm": [], "robotology/how-to-export-cpp-library": [], "robotology/yarp": [{"start": "robotology/homebrew-formulae", "end": "ccache", "alternative end": "ycm"}, {"start": "$HOME/Library/Caches/Homebrew", "end": "True", "alternative end": "robotology/homebrew-formulae"}, {"start": "robotology/homebrew-formulae", "end": "ccache", "alternative end": "ycm"}, {"start": "$HOME/Library/Caches/Homebrew", "end": "True", "alternative end": "robotology/homebrew-formulae"}, {"start": "robotology/homebrew-formulae", "end": "ccache", "alternative end": "ycm"}, {"start": "$HOME/Library/Caches/Homebrew", "end": "True", "alternative end": "robotology/homebrew-formulae"}, {"start": "robotology/homebrew-formulae", "end": "ccache", "alternative end": "ycm"}], "dart-lang/code_builder": [], "google/charts": [], "robotology/event-driven": [{"start": "sudo apt update -qq", "end": "mkdir build", "alternative end": "cd build"}], "scientilla/scientilla": [], "a14n/dart-google-maps": [], "illumina/pyflow": [{"start": "if [ \"$PYVER\" == \"2.4\" ]; then sudo add-apt-repository -y ppa:fkrull/deadsnakes && sudo apt-get update -qq; fi", "end": "if [ \"$PYVER\" == \"2.4\" ]; then sudo rm -f /usr/bin/python && sudo ln -s /usr/bin/python2.4 /usr/bin/python; fi", "alternative end": "if [ \"$PYVER\" == \"2.4\" ]; then export PATH=/usr/bin:$PATH; fi"}], "googlefonts/gftools": [{"start": "pip install --upgrade pip", "end": "python ./Lib/gftools/tests/test_usage.py", "alternative end": "mypy ./Lib/gftools/packager.py"}], "ilscipio/scipio-erp": [], "GoogleCloudPlatform/appstart": [{"start": "pip install dist/appstart-0.8.tar.gz", "end": "./run_tests.sh"}], "illumina/strelka": [], "Jigsaw-Code/outline-server": [{"start": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then\n  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n  sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n  sudo apt-get update\n  sudo apt-get -y -o Dpkg::Options::=\"--force-confnew\" install docker-ce\nfi;\n", "end": "Server Daily Release", "alternative end": "type = cron"}], "GoogleCloudPlatform/gsutil": [{"start": "pip install .", "end": "gsutil version -l", "alternative end": "gsutil test -u"}], "illumina/manta": [], "Jigsaw-Code/outline-client": [{"start": "docker run --rm -v ${PWD}:/project -v ~/.cache/electron:/root/.cache/electron -v ~/.cache/electron-builder:/root/.cache/electron-builder electronuserland/builder:wine /bin/bash -c \"apt update && apt install -y rsync && yarn do src/electron/package_windows\" || travis_terminate $?", "end": "package", "alternative end": "osx"}], "illumina/interop": [{"start": "if [ \"$TRAVIS_OS_NAME != \"osx ] ; then sudo env \"PATH=$PATH\" pip install twine; fi", "end": "if [ \"$TRAVIS_TAG\" != \"\" ] && [ \"$DEPLOY_BUILD\" == \"true\" ] ; then twine upload --skip-existing $PWD/dist/*.whl; fi", "alternative end": "releases"}], "illumina/akt": [{"start": "sudo apt-get update -qq", "end": "cpp", "alternative end": "gcc"}], "ImaginaryLandscape/django-nocaptcha-recaptcha": [{"start": "pip install pip --upgrade", "end": "demo/manage.py test nocaptcha_recaptcha"}], "illumina/ExpansionHunter": [], "imgix/ember-cli-imgix": [], "imgix/imgix-core-js": [{"start": "npm install -g npm@latest", "end": "8.0", "alternative end": "10.0"}], "kubernetes-sigs/kubebuilder": [], "imgix/imgix-rb": [], "imgix/imgix-python": [{"start": "pip install .[dev]", "end": "tox -e $TOX_ENV"}], "imgix/imgix-swift": [], "imgix/drift": [{"start": "npm install", "end": "npm run build", "alternative end": "npm run test:ci"}], "immunant/selfrando": [], "google/go-containerregistry": [], "imgix/luminous": [{"start": "npm install", "end": "5", "alternative end": "npm run build"}], "immunant/c2rust": [{"start": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then\n  # HOMEBREW_NO_AUTO_UPDATE=1 brew upgrade python\n  ./scripts/provision_mac.sh\nelse\n  sudo -H ./scripts/provision_deb.sh\n  ./scripts/provision_rust.sh\nfi\n", "end": ". ~/.cargo/env", "alternative end": "case \"$CACHE_NAME\" in\n  LINUX_DEV_BUILD|OSX_DEV_BUILD)\n    ccache -s\n    python3 ./scripts/build_translator.py --debug || travis_terminate 1\n    ccache -s\n    # `ccache` needs to be disabled when running tests, because in some instances\n    # the cached result would differ from the actual result thus causing a failure.\n    # This issue would usually occur in the `test_shuffle_vectors` test.\n    export CCACHE_DISABLE=1\n    python3 ./scripts/test_translator.py --debug ./tests || travis_terminate 1\n    ;;\n  LINUX_FAST_BUILD|OSX_FAST_BUILD)\n    cargo build\n    python3 ./scripts/test_translator.py --debug ./tests || travis_terminate 1\n    ;;\nesac\n"}], "imgix/imgix-rails": [], "imgix/imgix.js": [{"start": "npm install", "end": "npm test", "alternative end": "CXX=g++-4.8"}], "imgix/imgix-php": [], "imgix/react-imgix": [], "Imperva/domain-directory-controller": [], "in2code-de/in2publish_core": [], "improbable-eng/go-httpwares": [], "mwitkow/grpc-proxy": [], "kubernetes/autoscaler": [{"start": "sudo apt-get install libseccomp-dev -qq", "end": "mkdir -p $HOME/gopath/src/k8s.io", "alternative end": "mv $TRAVIS_BUILD_DIR $HOME/gopath/src/k8s.io/autoscaler"}], "GoogleCloudPlatform/datastore-ndb-python": [{"start": "pip install tox", "end": "tox", "alternative end": "TOXENV=py27"}], "InCar/ali-mns": [{"start": "npm install -g typescript gulp-cli", "end": "gulp clean", "alternative end": "gulp"}], "google/cel-go": [], "indeedeng/status": [], "improbable-research/keanu": [], "indexdata/yaz": [{"start": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then brew update; fi", "end": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then XML_CATALOG_FILES=/usr/local/etc/xml/catalog; export XML_CATALOG_FILES; fi", "alternative end": "./buildconf.sh"}], "kubernetes/kube-openapi": [], "dart-lang/googleapis_auth": [], "IndieGoGo/apple-pay-js-stubs": [], "google/certificate-transparency": [], "grpc-ecosystem/go-grpc-middleware": [], "improbable-eng/ts-protoc-gen": [{"start": "npm install", "end": "./travis-ci-build.sh"}], "dart-lang/http": [], "infinitered/solidarity": [], "i-net-software/SetupBuilder": [{"start": "sudo apt-get install -y fakeroot", "end": "gradle wrapper", "alternative end": "./gradlew uploadArchives"}], "i-net-software/jlessc": [], "infinum/phrasing": [{"start": "gem install bundler -v '< 2'", "end": "RAILS_ENV=test bundle exec rake db:migrate --trace", "alternative end": "bundle exec rspec spec/"}], "googlegenomics/dataflow-java": [], "dart-lang/yaml": [], "infinitered/authority": [], "influxdata/influxdb-php": [], "infinitered/rmq": [], "google/licenseclassifier": [], "dart-lang/pool": [], "influxdata/influxdb-python": [{"start": "pip install tox-travis", "end": "mkdir -p \"influxdb_install/${INFLUXDB_VER}\"", "alternative end": "if [ -n \"${INFLUXDB_VER}\" ] ; then wget \"https://dl.influxdata.com/influxdb/releases/influxdb_${INFLUXDB_VER}_amd64.deb\" ; fi"}], "influxdata/influxdb-rails": [{"start": "gem update --system --no-doc", "end": "ruby-head", "alternative end": "2.7"}], "Jigsaw-Code/outline-shadowsocksconfig": [], "infinitered/cdq": [], "dart-lang/matcher": [], "influxdata/influxdb-java": [{"start": "sudo apt-get update -qq", "end": "aCFuNNixYILZZfcOp0jI66om4w8Cbr+qtz1FUOVgbxeipFA93y7KLoXtFajkE1qmbHOdz8SvPcloY5q6HKIOYuqv4/6at+OaTogXELfrR+oKfxf2t5PfB1D+1RxM90+wjsEPGQh+HmFOEnGCnJ8ZUfcx76Afs+mPzbpjzKeNz7w=", "alternative end": "dAJK41xM2dN3q3xJMqAOP6uvrOvpjjUzmHr8mYNyepER8Lpms9/GqVUxqJv12wzCBqv1XZk/CXxrv3iBc2XjlxlrzIJGQChTinwDEigv0BMl/Gh0821ja7gwzMEUmg9f79m5tJxIFQ306cWz1gyRDqM3fLzskvM2ayzvynsNc/w="}], "influxdata/influxdb-ruby": [{"start": "gem update --system --no-doc", "end": "bin/provision.sh", "alternative end": "2.3"}], "dart-lang/args": [], "infinitered/ProMotion": [], "google/physical-web": [], "kubernetes/minikube": [{"start": "sudo apt-get install -y libvirt-dev", "end": "make test", "alternative end": "go"}, {"start": "sudo apt-get install -y libvirt-dev", "end": "make test", "alternative end": "go"}], "influxdata/nginx-influxdb-module": [], "census-instrumentation/opencensus-cpp": [], "dart-lang/shelf": [], "conversationai/conversationai-models": [{"start": "pip install -r requirements.txt", "end": "bazel test --test_output=streamed ..."}], "infinitered/redpotion": [], "dart-lang/logging": [], "infobip/jira-version-generator": [], "GoogleCloudPlatform/marketplace-k8s-app-tools": [], "infobip/mobile-messaging-sdk-ios": [], "google/importlab": [{"start": "sudo apt-get update -q", "end": "pytype -V$TRAVIS_PYTHON_VERSION && ./tests/run_all.sh"}], "infor-design/enterprise": [{"start": "npm install -g grunt-cli", "end": "export TZ=America/New_York", "alternative end": "google-chrome --version"}], "infobloxopen/atlas-app-toolkit": [], "infor-design/enterprise-ng": [{"start": "npm install", "end": "if [ $TEST_SUITE != lint ]; then npm run build; fi", "alternative end": "if [ $TEST_SUITE = lint ]; then npm run lint; fi"}], "google/error-prone": [], "infobloxopen/protoc-gen-gorm": [], "google/data-transfer-project": [{"start": "npm install", "end": "ng test --no-watch --no-progress --browsers=ChromeHeadless --environment local", "alternative end": "npm run webdriver-update-ci"}, {"start": "npm install", "end": "cd ..", "alternative end": "./gradlew :distributions:demo-server:dockerize"}], "ultimate-pa/ultimate": [{"start": "not valid", "stop": "not valid"}], "google/fscrypt": [{"start": "sudo apt-get -y install shellcheck", "end": "make tools", "alternative end": "make gen"}, {"start": "sudo apt-get -y install gcc-multilib libpam0g-dev:i386", "end": "GO111MODULE=on go get github.com/google/fscrypt/cmd/fscrypt", "alternative end": "CGO_ENABLED=1 GOARCH=386 make"}, {"start": "sudo apt-get -y install e2fsprogs", "end": "go get -u github.com/mattn/goveralls", "alternative end": "make test-setup"}], "automl/SMAC3": [], "BackofenLab/IntaRNA": [{"start": "make -j 2 && make tests -j 2 && make install", "end": "$HOME/IntaRNA/bin/IntaRNA -h"}], "SANSA-Stack/SANSA-RDF": [], "Verites/verigraph": [], "IgniteUI/ignite-ui": [], "renatahodovan/grammarinator": [{"start": "pip install -U tox", "end": "tox -v", "alternative end": "eval $(powershell -NonInteractive -Command 'write(\"export PATH=`\"\" + ([Environment]::GetEnvironmentVariable(\"PATH\",\"Machine\") + \";\" + [Environment]::GetEnvironmentVariable(\"PATH\",\"User\")).replace(\"\\\",\"/\").replace(\"C:\",\"/c\").replace(\";\",\":\") + \":`$PATH`\"\")')"}, {"start": "pip install -U certifi", "end": "TOXENV=py3", "alternative end": "osx"}, {"start": "pip install -U coveralls", "end": "coveralls", "alternative end": "deploy"}], "googlegenomics/spark-examples": [], "FrontEndART/SonarQube-plug-in": [], "renatahodovan/picire": [{"start": "pip install -U tox", "end": "tox -v", "alternative end": "eval $(powershell -NonInteractive -Command 'write(\"export PATH=`\"\" + ([Environment]::GetEnvironmentVariable(\"PATH\",\"Machine\") + \";\" + [Environment]::GetEnvironmentVariable(\"PATH\",\"User\")).replace(\"\\\",\"/\").replace(\"C:\",\"/c\").replace(\";\",\":\") + \":`$PATH`\"\")')"}, {"start": "pip install -U certifi", "end": "TOXENV=py2", "alternative end": "windows"}, {"start": "pip install -U certifi", "end": "TOXENV=py3", "alternative end": "osx"}, {"start": "pip install -U coveralls", "end": "coveralls", "alternative end": "deploy"}], "renatahodovan/fuzzinator": [{"start": "pip install -U tox", "end": "tox -v", "alternative end": "eval $(powershell -NonInteractive -Command 'write(\"export PATH=`\"\" + ([Environment]::GetEnvironmentVariable(\"PATH\",\"Machine\") + \";\" + [Environment]::GetEnvironmentVariable(\"PATH\",\"User\")).replace(\"\\\",\"/\").replace(\"C:\",\"/c\").replace(\";\",\":\") + \":`$PATH`\"\")')"}, {"start": "pip install -U certifi", "end": "TOXENV=py3", "alternative end": "osx"}, {"start": "sudo apt-get install npm", "end": "3.6", "alternative end": "TOXENV=docs"}], "softlayer/softlayer-go": [], "szeged/csibe": [{"start": "sudo apt-get install -y cmake g++ gcc-arm-none-eabi libc6-dev libc6-dev-i386 python wget", "end": "python csibe.py native", "alternative end": "python csibe.py native CSiBE-v2.1.1 -w"}], "ibm-cloud/terraform-provider-ibm": [], "google/pytype": [{"start": "sudo apt-get install g++", "end": "ppa:deadsnakes/ppa", "alternative end": "python3.6"}, {"start": "pip install attrs", "end": "python build_scripts/travis_script.py"}], "InovaIT/NeatLE": [], "GoogleCloudPlatform/ruby-docker": [{"start": "sudo apt-get update", "end": "travis_retry bundle exec rake build", "alternative end": "bundle exec rake test:only"}], "ceres-solver/ceres-solver": [{"start": "if [ $TRAVIS_OS_NAME = linux ]; then sudo apt-get update -qq; fi", "end": "if [[ \"$CERES_BUILD_TARGET\" == \"ANDROID\" ]]; then\n  cd /tmp\n  wget https://dl.google.com/android/repository/android-ndk-r20b-linux-x86_64.zip\n  unzip -qq android-ndk-r20b-linux-x86_64.zip\nfi\n", "alternative end": "if [ $TRAVIS_OS_NAME = linux ]; then $TRAVIS_BUILD_DIR/travis/install_travis_linux_deps.sh; fi"}, {"start": "if [[ \"$CERES_BUILD_TARGET\" == \"LINUX\" || \"$CERES_BUILD_TARGET\" == \"OSX\" ]]; then\n  sudo make install\n  ctest --output-on-failure -j 4\nfi\n", "end": "alexs.mac@gmail.com", "alternative end": "sandwichmaker@gmail.com"}], "inloop/Styles": [{"start": "gem install cocoapods", "end": "set -o pipefail", "alternative end": "xcodebuild -version"}], "inovex/mqtt_blackbox_exporter": [], "lagadic/visp": [{"start": "if [ $TRAVIS_OS_NAME = 'osx' ]; then brew update; fi", "end": "if [ $TRAVIS_OS_NAME = 'osx' ]; then /usr/bin/yes | pip2 uninstall numpy; fi", "alternative end": "if [ $TRAVIS_OS_NAME = 'osx' ]; then brew install glog; fi"}, {"start": "if [ $TRAVIS_OS_NAME = 'osx' ]; then brew install glog; fi", "end": "if [ $TRAVIS_OS_NAME = 'osx' ]; then export OpenCV_DIR=/usr/local/opt/opencv; fi", "alternative end": "if [ $TRAVIS_OS_NAME = 'osx' ]; then brew install libxml2 libdc1394 gsl; fi"}, {"start": "if [ $TRAVIS_OS_NAME = 'osx' ]; then brew install libxml2 libdc1394 gsl; fi", "end": "if [ $TRAVIS_OS_NAME = 'linux' ] && [ $TRAVIS_COMPILER = 'clang' ]; then export LD_LIBRARY_PATH=/usr/local/clang-7.0.0/lib:$LD_LIBRARY_PATH; fi", "alternative end": "mkdir build"}], "neurospin/pypreprocess": [{"start": "pip install --upgrade pytest", "end": "source continuous_integration/install.sh", "alternative end": "make clean"}], "resibots/limbo": [], "preesm/preesm": [], "BeyondTheClouds/enos": [{"start": "pip install tox-travis", "end": "tox"}], "google/file.dart": [], "instana/ruby-sensor": [{"start": "gem update --system", "end": "gem --version", "alternative end": "psql -c 'create database travis_ci_test;' -U postgres"}], "Firebase/quickstart-ios": [{"start": "gem install xcpretty", "end": "bundle exec pod install --repo-update", "alternative end": "../scripts/install_prereqs/$SAMPLE.sh"}], "instructure-react/react-tokeninput": [], "dart-lang/isolate": [], "instructure/instructure-ui": [], "integer-net/Anonymizer": [], "pmem/vltrace": [{"start": "sudo apt-get install -y linux-headers-$(uname -r)", "end": "sudo find /usr -name \"syscalls_64.h\" 2>/dev/null | grep -e 'generated'", "alternative end": "export HOST_WORKDIR=`pwd`"}], "google/jsinterop-generator": [], "daos-stack/daos": [], "googleapis/gax-java": [], "intelygenz/Archit-iOS": [], "kata-containers/runtime": [], "intelygenz/Kommander-iOS": [], "intelygenz/NetClient-iOS": [], "intentionet/netconan": [], "RobotWebTools/ros2-web-bridge": [], "internap/netman": [{"start": "pip install tox", "end": "tox -r", "alternative end": "DOCKER_COMPOSE_VERSION=1.10.0"}], "intel-go/nff-go": [{"start": "sudo apt-get install -y linux-headers-$(uname -r)", "end": "docker pull ubuntu:disco", "alternative end": "docker build --build-arg https_proxy=${https_proxy} -t test-disco ."}], "orocos-toolchain/rtt": [{"start": "sudo apt-get update -qq", "end": "export EXTRA_CMAKE_ARGS=\"-DENABLE_TESTS=ON -DENABLE_CORBA=ON -DCORBA_IMPLEMENTATION=OMNIORB\"", "alternative end": "export CFLAGS=\"-std=c99 -Wall -Wextra -Wno-unused-parameter\""}], "orocos-toolchain/orocos_toolchain": [{"start": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then\n  brew update\n  brew reinstall boost cmake ccache gnu-getopt readline omniorb\n  brew link --force gnu-getopt\n  brew link --force readline\n  export PATH=\"/use/local/opt/ccache/libexec:$PATH\"\nfi\n", "end": "./configure --enable-corba --omniorb", "alternative end": "make -j2 install"}], "inthepocket/ibeacon-scanner-android": [], "ringo-framework/ringo": [{"start": "pip install git+https://github.com/ringo-framework/formbar", "end": "ringo-admin db init --config test.ini", "alternative end": "py.test --app-config test.ini"}], "intridea/multi_json": [], "crosswalk-project/crosswalk-test-suite": [{"start": "sudo apt-get install python-demjson", "end": "easy_install demjson", "alternative end": "python ./tools/lint/lint.py -p"}], "intuit/ami-query": [], "RobotWebTools/rclnodejs": [], "intuit/CardParts": [{"start": "gem install cocoapods", "end": "pod repo update", "alternative end": "xcodebuild test -workspace Example/CardParts.xcworkspace -scheme CardParts-Example -sdk iphonesimulator -destination \"platform=iOS Simulator,OS=13.3,name=iPhone 11 Pro Max\" ONLY_ACTIVE_ARCH=NO -quiet"}], "tpm2-software/tpm2-abrmd": [], "intuit/foremast": [], "intuit/tank": [], "OPAE/opae-sdk": [{"start": "python3 -m pip install --upgrade pip", "end": "clang-format-3.9", "alternative end": "python3"}, {"start": "python3 -m pip install --upgrade pip && python3 -m pip install --user pybind11 nose2", "end": "ccache", "alternative end": "BUILD_JOB=Build python distribution and upload to PyPI"}, {"start": "pip install --user jinja2", "end": "wget https://github.com/jgm/pandoc/releases/download/2.1.1/pandoc-2.1.1-1-amd64.deb", "alternative end": "sudo dpkg -i pandoc-2.1.1-1-amd64.deb"}], "QubesOS/qubes-gui-agent-linux": [], "inwinstack/s3-portal-ui": [{"start": "npm install -g bower grunt-cli karma", "end": "ubuntu-toolchain-r-test", "alternative end": "g++-4.8"}], "biocommons/eutils": [{"start": "pip install tox-travis", "end": "make tox", "alternative end": "coveralls"}], "kata-containers/documentation": [], "rib/gputop": [], "turnitin/moodle-plagiarism_turnitin": [], "input-output-hk/cardano-cli": [], "input-output-hk/mantis": [], "input-output-hk/stack2nix": [], "input-output-hk/pvss-haskell": [], "input-output-hk/scrypto": [], "input-output-hk/iodb": [], "input-output-hk/rust-cardano": [], "input-output-hk/cardano-crypto": [], "chipsec/chipsec": [{"start": "sudo apt-get install -y linux-headers-$(uname -r) nasm", "end": "sudo ln -s /usr/src/$(uname -r) /lib/modules/$(uname -r)/build", "alternative end": "Trusty - python2"}, {"start": "brew update", "end": "python setup.py test"}], "IntelRealSense/librealsense": [{"start": "npm install", "end": "cd test", "alternative end": "wget http://realsense-hw-public.s3.amazonaws.com/rs-tests/nodejs_records.rec"}, {"start": "if [[ \"$LRS_BUILD_NODEJS\" == \"true\" ]]; then nvm install 10.15.3; nvm use 10.15.3; npm install -g node-gyp; npm install -g mocha; git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git; export OLDPATH=$PATH && export PATH=$PATH:$(pwd)/depot_tools; cd wrappers/nodejs/tools && npm install && cd ..; node ./tools/linter.js; export PATH=$OLDPATH && unset OLDPATH && cd ../../; fi", "end": "if [[ \"$LRS_BUILD_ANDROID\" == \"true\" ]]; then wget https://dl.google.com/android/repository/android-ndk-r16b-linux-x86_64.zip; unzip -q android-ndk-r16b-linux-x86_64.zip -d ./; fi", "alternative end": "mkdir build && cd build"}, {"start": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then sudo add-apt-repository --yes ppa:ubuntu-toolchain-r/test; sudo apt-get update; sudo apt-get install -qq build-essential xorg-dev libgl1-mesa-dev libglu1-mesa-dev libglew-dev libglm-dev; sudo apt-get install -qq libusb-1.0-0-dev; sudo apt-get install -qq libgtk-3-dev; sudo apt-get install gcc-5 g++-5; sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 60 --slave /usr/bin/g++ g++ /usr/bin/g++-5; sudo apt-get install libglfw3-dev libglfw3; fi", "end": "if [[ \"$TRAVIS_OS_NAME\" == \"windows\" ]]; then choco install -y python3 --version 3.8.1; if [[ \"$VS15\" == \"true\" ]]; then choco install -y vcbuildtools --version 2015.4 --force; fi; fi", "alternative end": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then brew uninstall xctool; brew install xctool --HEAD; brew install homebrew/core/glfw3; brew list libusb || brew install libusb; fi"}], "crosswalk-project/demo-express": [{"start": "sudo apt-get install python-demjson", "end": "easy_install demjson", "alternative end": "pip install html5lib"}, {"start": "pip install html5lib", "end": "cd ../", "alternative end": "git clone https://github.com/crosswalk-project/crosswalk-test-suite.git"}], "ofiwg/libfabric": [{"start": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then brew update; brew upgrade automake || true; brew upgrade libtool || true; fi", "end": "./autogen.sh", "alternative end": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]] ; then RDMA_CORE_BRANCH=\"v27.0\"; git clone --depth 1 -b $RDMA_CORE_BRANCH https://github.com/linux-rdma/rdma-core.git && cd rdma-core && bash build.sh && cd -; RDMA_CORE_PATH=$PWD/rdma-core/build ; export LD_LIBRARY_PATH=\"$RDMA_CORE_PATH/lib:$LD_LIBRARY_PATH\" ; LIBFABRIC_CONFIGURE_ARGS=\"$LIBFABRIC_CONFIGURE_ARGS --enable-usnic --enable-verbs=$RDMA_CORE_PATH --enable-efa=$RDMA_CORE_PATH\"; fi"}, {"start": "make install", "end": "make test", "alternative end": "rm -rf $PREFIX"}, {"start": "make install", "end": "make test", "alternative end": "make distcheck"}, {"start": "make install", "end": "make test"}], "opcm/pcm": [{"start": "make install prefix=.", "end": "linux", "alternative end": "osx"}], "IntelPython/container-images": [], "trustedanalytics/spark-tk": [], "pmem/ndctl": [{"start": "sudo apt-get update -qq", "end": "sudo apt-get build-dep linux-image-$(uname -r)", "alternative end": "./autogen.sh"}, {"start": "sudo make install", "end": "True"}], "kata-containers/tests": [{"start": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then travis_retry brew install bash yamllint gnu-getopt; fi", "end": "bash .ci/static-checks.sh github.com/kata-containers/tests"}], "kata-containers/agent": [], "pmem/pmemfile": [], "kata-containers/proxy": [{"start": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then sudo apt-get update -qq              ; fi", "end": "cd ${TRAVIS_BUILD_DIR} && make", "alternative end": "cd ${TRAVIS_BUILD_DIR} && make test"}], "OpenVisualCloud/Dockerfiles": [], "kata-containers/community": [], "slimbootloader/slimbootloader": [], "pmem/valgrind": [], "pmem/pmemkv": [], "lucasmation/microdadosBrasil": [], "IPGP/scientific_python_cheat_sheet": [{"start": "sudo apt-get install pandoc", "end": "2.7", "alternative end": "pip install markdown"}, {"start": "pip install markdown", "end": "python create-index-html.py", "alternative end": "bash deploy.sh"}], "gearpump/gearpump": [], "kubeflow/pytorch-operator": [], "opensecuritycontroller/osc-core": [], "ihucos/plash": [{"start": "sudo apt-get install uidmap unionfs-fuse graphviz", "end": "test -z $(git ls-files | xargs file | grep -i ELF)", "alternative end": "sudo sh -c \"curl -Lf https://raw.githubusercontent.com/ihucos/plash/$TRAVIS_COMMIT/setup.sh | sh -s $TRAVIS_COMMIT\""}], "iRail/stations": [], "linkedconnections/gtfs2lc": [], "Intel-HLS/GenomicsDB": [{"start": "pip install -r requirements.txt", "end": "sudo pip2 install jsondiff", "alternative end": "sudo apt-get -y install lcov mpich zlib1g-dev libssl-dev rsync cmake uuid-dev libcurl4-openssl-dev"}, {"start": "sudo apt-get -y install lcov mpich zlib1g-dev libssl-dev rsync cmake uuid-dev libcurl4-openssl-dev", "end": "sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y", "alternative end": "sudo add-apt-repository -y ppa:openjdk-r/ppa"}, {"start": "sudo apt-get update -q", "end": "sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 60", "alternative end": "sudo apt-get install libdbi-dev libdbd-pgsql -y"}, {"start": "sudo apt-get install libdbi-dev libdbd-pgsql -y", "end": "jdk_switcher use openjdk8", "alternative end": "echo $JAVA_HOME"}, {"start": "sudo apt-get -y install libgtest-dev", "end": "cd /usr/src/gtest", "alternative end": "sudo cmake . -DBUILD_SHARED_LIBS=1"}, {"start": "gem install coveralls-lcov", "end": "mkdir -p $GENOMICSDB_BUILD_DIR", "alternative end": "cd $GENOMICSDB_BUILD_DIR && lcov --directory . --zerocounters"}, {"start": "make -j 4 && make install && make test ARGS=-V", "end": "cd $GENOMICSDB_INSTALL_DIR && lcov --list tests/coverage.info"}], "touist/touist": [{"start": "$HOME/Library/Caches/Homebrew", "end": "osx", "alternative end": "ARCH=mac-x86_64"}, {"start": "if [ $TRAVIS_OS_NAME = osx ]; then /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" >/dev/null; fi", "end": "if [ $TRAVIS_OS_NAME = linux ]; then sudo curl -L https://github.com/ocaml/opam/releases/download/2.0.2/opam-2.0.2-x86_64-linux -o /usr/local/bin/opam && sudo chmod +x /usr/local/bin/opam; fi", "alternative end": "opam init -y --auto-setup --reinit --disable-sandboxing --comp ocaml-base-compiler.4.07.1"}, {"start": "brew cleanup -s", "end": "jbuilder uninstall touist", "alternative end": "True"}], "hfp/libxsmm": [{"start": "if [ \"\" != \"${UPLOAD_ENABLED}\" ] && [ \"0\" != \"${UPLOAD_ENABLED}\" ] && [ \"1\" != \"${COVERITY_SCAN_BRANCH}\" ]; then ( cd /tmp && curl -O -L https://github.com/openssl/openssl/archive/OpenSSL_1_1_1d.tar.gz && tar xvf OpenSSL_1_1_1d.tar.gz && cd openssl-OpenSSL_1_1_1d && ./config --prefix=${HOME}/openssl && make ${MAKEJ} && make install && cd /tmp && curl -O -L https://www.libssh2.org/download/libssh2-1.9.0.tar.gz && tar xvf libssh2-1.9.0.tar.gz && cd libssh2-1.9.0 && ./configure --prefix=${HOME}/libssh2 --with-libssl-prefix=${HOME}/openssl && make ${MAKEJ} install && cd /tmp && curl -O -L https://github.com/curl/curl/archive/curl-7_67_0.tar.gz && tar xvf curl-7_67_0.tar.gz && cd curl-curl-7_67_0 && ./buildconf && ./configure --prefix=${HOME}/curl --with-ssl=${HOME}/openssl --with-libssh2=${HOME}/libssh2 && make ${MAKEJ} install && cd ${TRAVIS_BUILD_DIR} ) || true; fi", "end": "eval ${CODECOV}", "alternative end": "eval ${UPLOAD}"}], "irontec/sngrep": [{"start": "sudo apt-get install -y libncurses5-dev libpcap-dev libssl-dev", "end": "./bootstrap.sh", "alternative end": "./configure"}], "Sandia-OpenSHMEM/SOS": [{"start": "if [[ $SOS_TRANSPORT_OPTS = *\"with-portals4\"* ]]; then\n  cd $TRAVIS_SRC\n  git clone --depth 10 https://github.com/regrant/portals4.git portals4\n  cd portals4\n  ./autogen.sh\n  ./configure --prefix=$TRAVIS_INSTALL/portals4/ --enable-zero-mrs --enable-reliable-udp --disable-pmi-from-portals\n  # JSD: --enable-transport-shmem removed; it was causing tests to hang\n  make $TRAVIS_PAR_MAKE\n  make install\nfi\n", "end": "cd $TRAVIS_SRC", "alternative end": "git clone --depth 10 https://github.com/openshmem-org/tests-uh.git tests-uh"}, {"start": "if [[ $SOS_BUILD_OPTS = *\"with-pmix\"* ]]; then\n  cd $TRAVIS_SRC\n  git clone --depth 10 https://github.com/pmix/pmix pmix\n  cd pmix\n  ./autogen.pl\n  ./configure --prefix=$TRAVIS_INSTALL/pmix --disable-debug --with-libev CFLAGS=-O3\n  make install\nfi\n", "end": "cd $TRAVIS_BUILD_DIR", "alternative end": "./autogen.sh"}, {"start": "make install", "end": "$SOS_PM_PRE", "alternative end": "$SOS_PM -np 1 test/unit/hello"}, {"start": "make install", "end": "export PATH=$TRAVIS_INSTALL/sos/bin:$PATH", "alternative end": "if [[ $SOS_TRANSPORT_OPTS = *\"enable-profiling\"* ]]; then\n  missing_pshmem=$( nm src/.libs/libsma.so | grep shmem_ | grep -v -e shmem_internal -e shmem_transport -e shmem_free_list -e shmem_runtime -e shmem_util -e shmem_spinlock -e shmem_op -e '_$' | sed -e 's/^.*shmem_/shmem_/' | sort | uniq -u )\n  if [ -n \"$missing_pshmem\" ]; then\n    echo -ne \"Missing profiling symbols:\\n$missing_pshmem\\n\" ; false;\n    else true;\n  fi;\nfi\n"}, {"start": "make install", "end": "make oshmem_test", "alternative end": "$SOS_PM_PRE"}], "NervanaSystems/ngraph-onnx": [], "memkind/memkind": [], "tpm2-software/tpm2-pkcs11": [], "islog/liblogicalaccess": [{"start": "sudo apt-get install -y libpcsclite-dev", "end": "eval \"${MATRIX_EVAL}\"", "alternative end": "echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-"}, {"start": "pip install conan", "end": "conan user", "alternative end": "echo $PACKAGE_VERSION"}, {"start": "sudo apt-get install -y libpcsclite-dev", "end": "eval \"${MATRIX_EVAL}\"", "alternative end": "pip install conan"}, {"start": "pip install conan", "end": "conan user", "alternative end": "sudo ln -s /usr/bin/gcc-6 /usr/local/bin/gcc"}, {"start": "sudo apt-get install -y libpcsclite-dev", "end": "eval \"${MATRIX_EVAL}\"", "alternative end": "pip install conan"}, {"start": "pip install conan", "end": "conan user", "alternative end": "export CC=/usr/bin/clang-6.0"}], "pmem/syscall_intercept": [], "jolie/jolie": [], "Yakindu/statecharts": [], "iteratec/OpenSpeedMonitor": [{"start": "sudo apt-get install -y dpkg", "end": "wget -N https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -P ~/", "alternative end": "sudo dpkg -i ~/google-chrome*.deb"}], "ITDSystems/alvex": [], "Yakindu/solidity-ide": [], "iterate-ch/cyberduck": [], "ithouse/lolita": [], "it-projects-llc/pos-addons": [{"start": "pip install anybox.testing.openerp", "end": "git clone https://github.com/it-projects-llc/maintainer-quality-tools.git ${HOME}/maintainer-quality-tools", "alternative end": "export PATH=${HOME}/maintainer-quality-tools/travis:${PATH}"}], "it-projects-llc/odoo-saas-tools": [{"start": "pip install anybox.testing.openerp", "end": "git clone https://github.com/it-projects-llc/maintainer-quality-tools.git ${HOME}/maintainer-quality-tools", "alternative end": "export PATH=${HOME}/maintainer-quality-tools/travis:${PATH}"}], "it-projects-llc/odoo-telegram": [{"start": "pip install anybox.testing.openerp", "end": "git clone https://github.com/it-projects-llc/maintainer-quality-tools.git ${HOME}/maintainer-quality-tools", "alternative end": "export PATH=${HOME}/maintainer-quality-tools/travis:${PATH}"}], "iwayvietnam/zimbra-multi-tenancy": [{"start": "sudo apt-get update > /dev/null", "end": "export PATH=\"$HOME/.composer/vendor/bin:$PATH\"", "alternative end": "composer global require drush/drush:6.*"}], "it-projects-llc/odoo-development": [{"start": "pip install -r requirements.txt", "end": "mkdir docs/_static; cd docs; sphinx-build -nW -b html -D exclude_patterns=dev/docs/templates/*  -d _build/doctrees . _build/html", "alternative end": "False"}], "Atomistica/atomistica": [{"start": "pip install ase==3.15.0", "end": "cp setup.cfg.travis setup.cfg ; python setup.py install", "alternative end": "cd .. ; wget http://www.dftb.org/fileadmin/DFTB/public/slako/mio/mio-1-1.tar.xz ; tar -Jxf mio-1-1.tar.xz ; cd -"}], "iZettle/Presentation": [], "iyzico/iyzipay-node": [{"start": "npm install istanbul -g", "end": "npm", "alternative end": "iyzico-ci@iyzico.com"}], "iyzico/iyzipay-ruby": [], "iZettle/Flow": [], "iyzico/iyzipay-python": [{"start": "pip install unittest2", "end": "echo \"TODO\""}], "iyzico/iyzipay-java": [], "iZettle/dropwizard-metrics-influxdb": [], "iyzico/iyzipay-dotnet": [{"start": "not valid", "stop": "not valid"}], "iZettle/Form": [], "iyzico/iyzipay-php": [], "iyzico/boot-mon": [], "naver/arcus-java-client": [{"start": "sudo apt-get install -qq build-essential autoconf automake libtool libcppunit-dev python-setuptools python-dev ant", "end": "bash install-arcus-memcached.sh develop", "alternative end": "mvn test -DUSE_ZK=false -DARCUS_HOST=127.0.0.1:11212 && mvn test -DUSE_ZK=true"}], "naver/arcus-memcached": [{"start": "sudo apt-get update -qq", "end": "./config/autorun.sh", "alternative end": "./configure $COVERAGE_FLAGS"}, {"start": "if [[ ! -z $COVERAGE_FLAGS ]]\nthen\n    sudo apt-get install lcov\n    gem install coveralls-lcov\n    lcov -d . -c -o coverage.info && coveralls-lcov coverage.info\nfi\n", "end": "junhyun.park@jam2in.com", "alternative end": "minkikim89@jam2in.com"}], "fundacionjala/enforce-gradle-plugin": [], "fundacionjala/enforce-sonarqube-plugin": [], "Jarsa/transport-management-system": [], "Jam3/react-f1": [], "putaoshu/jdf": [], "NervJS/at-ui-nerv": [{"start": "npm install -g yarn", "end": "yarn", "alternative end": "BROWSER=true COVERAGE=true FLAKEY=false npm run test:karma"}], "joe-sky/nornj": [{"start": "npm install -g yarn", "end": "yarn", "alternative end": "npm run ci"}], "jetruby/apollo_upload_server-ruby": [], "jdf2e/nutui": [], "JetBrains/ruby-type-inference": [{"start": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then brew update       ; fi", "end": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then mysql.server start; fi", "alternative end": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then mysql -u root -e \"CREATE USER 'travis'@'127.0.0.1' IDENTIFIED BY '';\"; fi"}, {"start": "gem install rake", "end": "rake test", "alternative end": "rake install"}], "JetBrains/xodus-dnq": [], "projeto-siga/siga": [], "jpush/jpush-api-nodejs-client": [], "scalecube/scalecube-services": [], "jpush/jpush-api-python-client": [{"start": "pip install .", "end": "nosetests tests/* --verbosity=2"}], "ruby-debug/ruby-debug-ide": [], "adapt/ADAPT": [], "jpush/jpush-phonegap-plugin": [], "jpush/jpush-api-php-client": [], "JetBrains/phpstorm-stubs": [], "johnmcfarlane/cnl": [], "jolicode/GifExceptionBundle": [], "jolicode/JoliTypo": [], "fabioz/PyDev.Debugger": [], "jolicode/JoliNotif": [], "JetBrains/gradle-python-envs": [], "jet/sagan": [], "jolicode/asynit": [], "jet/kafunk": [], "jolicode/slack-php-api": [], "jolicode/JoliCi": [], "JuliaComputing/Deprecations.jl": [], "JNPRAutomate/fluent-plugin-juniper-telemetry": [{"start": "pip install -r requirements.txt", "end": "docker pull dgarros/tcpreplay", "alternative end": "docker build -t fluent-plugin-juniper-telemetry ."}], "JuliaComputing/FemtoCleaner.jl": [], "JuliaComputing/TableView.jl": [], "juniper/jsnapy": [{"start": "pip install -r development.txt", "end": "python setup.py install --prefix=$VIRTUAL_ENV", "alternative end": "export PYTHONPATH=$VIRTUAL_ENV/lib/python$TRAVIS_PYTHON_VERSION/site-packages"}], "JNPRAutomate/ansible-junos-evpn-vxlan": [{"start": "pip install -r requirements.txt", "end": "ansible-galaxy install Juniper.junos -p ./roles", "alternative end": "pip install ansible junos-eznc lxml jxmlease markupsafe requests httplib2"}, {"start": "pip install ansible junos-eznc lxml jxmlease markupsafe requests httplib2", "end": "mkdir library", "alternative end": "git clone https://github.com/Juniper/ravello-ansible.git library/ravello-ansible"}], "nileshsimaria/jtimon": [], "juniper/OpenClos": [{"start": "pip install --egg -r requirements.txt", "end": "nosetests --exe --with-coverage --cover-package=jnpr.openclos --cover-erase"}], "justcoded/web-starter-kit": [], "juniper/docker-saltstack-junos": [], "justeat/JustTweak": [], "juniper/open-nti": [{"start": "pip install -r requirements.txt", "end": "make test-build", "alternative end": "docker pull dgarros/tcpreplay"}], "albertodebortoli/Skopelos": [], "justeat/JustTrack": [], "jwplayer/jwalk": [{"start": "pip install tox-travis", "end": "tox", "alternative end": "pip"}], "k3po/k3po": [], "jwplayer/sparksteps": [{"start": "pip install tox-travis", "end": "tox", "alternative end": "pip"}], "justeat/NLog.StructuredLogging.Json": [], "KabbageInc/django-redis-sentinel": [{"start": "pip install $DJANGO --use-mirrors", "end": "python setup.py -q install", "alternative end": "py.test -v --pep8"}], "kaleidos/grails-admin-interface": [], "kalamuna/kalastatic": [], "kaleidos/django-sampledatahelper": [{"start": "travis_retry pip install $DJANGO", "end": "coverage run --source=sampledatahelper setup.py test", "alternative end": "travis_retry coveralls"}], "kaltura/playkit-android": [], "kaltura/playkit-js": [], "kaltura/player-sdk-native-android": [], "kaleidos/grails-security-stateless": [], "kaleidos/django-validated-file": [{"start": "pip install django", "end": "coverage run --source=validatedfile runtests.py", "alternative end": "jespinog@gmail.com"}], "kaleidos/grails-postgresql-extensions": [], "kaltura/kaltura-player-js": [], "kartoza/docker-postgis": [], "kanisterio/kanister": [{"start": "make install-minio", "end": "make integration-test", "alternative end": "sudo chown -R travis:travis ./.go"}], "Galeria-Kaufhof/ha-jobs": [], "kartoza/docker-pg-backup": [], "Galeria-Kaufhof/jsonhomeclient": [], "Galeria-Kaufhof/stylegen": [], "kayak/fireant": [{"start": "pip install coverage", "end": "coverage run --source=fireant setup.py test", "alternative end": "coveralls"}], "kayak/pypika": [{"start": "pip install coverage", "end": "coverage run --source=pypika setup.py test", "alternative end": "coveralls"}], "KDAB/KDStateMachineEditor": [], "keboola/ex-facebook-graph-api": [], "keenlabs/KeenClient-Java": [], "keboola/php-csv": [], "keeps/roda": [], "kensho-technologies/grift": [{"start": "pip install --upgrade pip", "end": "pycodestyle grift/", "alternative end": "bandit -r grift/"}], "kenshoo/react-multi-select": [], "in-the-keyhole/khs-sherpa": [], "kitpages/KitpagesDataGridBundle": [], "khadas/fenix": [{"start": "sudo apt-get install -y git make lsb-release qemu-user-static", "end": ".travis/build.sh"}], "hui-z/ForgiveDB": [], "hui-z/flutter_install_plugin": [], "adaptlearning/adapt_authoring": [{"start": "npm install -g grunt-cli", "end": "npm config set spin false", "alternative end": "npm ci"}], "kickstarter/ipcat-ruby": [], "Kilograpp/Mattermost-iOS-Swift": [{"start": "brew update", "end": "bundle install --deployment --retry 3", "alternative end": "bundle exec pod repo update --silent"}], "Kilograpp/Mattermost-iOS": [{"start": "brew update", "end": "bundle install", "alternative end": "carthage bootstrap --platform ios"}], "kickstarter/replica_pools": [], "kirasystems/views": [], "kiteco/vscode-plugin": [{"start": "npm install", "end": "npm test", "alternative end": "LIVE_ENVIRONMENT=1 npm test"}], "kiteco/atom-plugin": [], "ksvc/KSYAirStreamer_iOS": [], "Kitware/paraviewweb": [{"start": "sudo apt-get install -y libgif-dev", "end": "npm ci", "alternative end": "npm run build:release -- --bail"}], "Kixeye/chassis": [], "ksvc/KSYLive_iOS": [], "girder/large_image": [{"start": "pip install --upgrade pip", "end": "git fetch --depth=1000", "alternative end": "tox -s | cat; test ${PIPESTATUS[0]} -eq 0"}, {"start": "pip install codecov", "end": "codecov --disable search pycov gcov --file build/test/coverage/py_coverage.xml build/test/coverage/cobertura-coverage.xml", "alternative end": "if [ ${TRAVIS_PYTHON_VERSION:0:3} == \"3.7\" ]; then pip install travis-sphinx; travis-sphinx -o docs/build -v deploy -b sphinx,master; fi"}], "ksvc/KSYMediaPlayer_iOS": [], "kleder/timetracker": [{"start": "npm install", "end": "npm run electron:$TARGET", "alternative end": "zip -r build.zip app-builds/T-Rec-*/"}], "Kitware/flow": [{"start": "pip install -r requirements.txt -r requirements-dev.txt", "end": "nvm install v2.3.3", "alternative end": "npm install -g npm"}, {"start": "npm install -g npm", "end": "node --version", "alternative end": "npm --version"}, {"start": "npm install", "end": "cd $HOME/girder/plugins", "alternative end": "git clone https://github.com/girder/girder_worker.git"}, {"start": "pip install -r requirements.txt", "end": "echo \"$TRAVIS_BUILD_DIR\"", "alternative end": "pwd"}, {"start": "npm install", "end": "sudo service rabbitmq-server start", "alternative end": "python -m girder_worker &"}], "klarna/kco_rest_php": [], "scikit-build/scikit-build": [{"start": "python -m pip install --disable-pip-version-check --upgrade pip", "end": "ci_addons --install ../addons", "alternative end": "ci install"}], "klarna/higher-order-components": [{"start": "npm install", "end": "npm test", "alternative end": "True"}], "klarna/kco_rest_java": [], "klarna/HiveRunner": [], "Kitware/light-viz": [{"start": "sudo apt-get install -y libgif-dev", "end": "stable", "alternative end": "8"}], "midasplatform/Midas": [], "klarna/ui-react-components": [{"start": "npm install", "end": "npm run lint", "alternative end": "BROWSER=SL_IE_10,SL_IE_11,SL_MAC_SAFARI_9_0,SL_Android_4_3,SL_Android_5_0,SL_IOS_9_2,PhantomJS npm test"}], "klarna/kafka_protocol": [], "klarna/erlavro": [], "Kitware/visualizer": [], "RobotLocomotion/director": [], "Kitware/kwiver": [{"start": "sudo apt-get install -y libproj-dev libgl1-mesa-dev libxt-dev libatlas-base-dev", "end": "bash .travis/install-deps.sh", "alternative end": "export PATH=$HOME/deps/bin:$PATH"}, {"start": "make install", "end": ". ./setup_KWIVER.sh", "alternative end": "ctest"}], "klarna/brucke": [], "Kitware/cumulus": [{"start": "pip install -U pip", "end": "pushd \"${HOME}/build\"", "alternative end": "git clone https://github.com/girder/girder.git"}, {"start": "pip install -r requirements-dev.txt", "end": "popd", "alternative end": "popd"}, {"start": "pip install -U -r requirements.txt", "end": "python setup.py clean install", "alternative end": "pushd girder"}, {"start": "pip install `pwd`/cumulus", "end": "popd", "alternative end": "export BOTO_CONFIG=/dev/null"}], "klarna/ui": [], "klarna/brod": [], "Kitware/minerva": [{"start": "sudo add-apt-repository -y ppa:ubuntugis/ppa && sudo apt-get update", "end": "gdal-config --version", "alternative end": "MAIN_PATH=$TRAVIS_BUILD_DIR"}, {"start": "npm install -g npm", "end": "rm -rf $GIRDER_SOURCE_DIR", "alternative end": "git clone -b $GIRDER_BRANCH https://github.com/girder/girder.git $GIRDER_SOURCE_DIR"}, {"start": "pip install --no-cache-dir -U pip virtualenv setuptools", "end": "DB_ASSETSTORE_DIR=\"${GIRDER_SOURCE_DIR}/plugins/database_assetstore\"", "alternative end": "git clone https://github.com/OpenGeoscience/database_assetstore.git \"${DB_ASSETSTORE_DIR}\" && git -C \"${DB_ASSETSTORE_DIR}\" checkout $DATABASE_ASSETSTORE_VERSION"}, {"start": "pip install -r \"${DB_ASSETSTORE_DIR}/requirements.txt\" -U", "end": "GIRDER_LARGE_IMAGE_DIR=\"${GIRDER_SOURCE_DIR}/plugins/large_image\"", "alternative end": "git clone https://github.com/girder/large_image.git \"${GIRDER_LARGE_IMAGE_DIR}\""}, {"start": "pip install GDAL==2.1.0 celery", "end": "GIRDER_WORKER_DIR=$HOME/girder_worker", "alternative end": "git clone https://github.com/girder/girder_worker.git ${GIRDER_WORKER_DIR}"}, {"start": "pip install -e ${GIRDER_WORKER_DIR}", "end": "npm --version", "alternative end": "cd $GIRDER_SOURCE_DIR"}, {"start": "pip install --no-cache-dir -U -r requirements-dev.txt -e .", "end": "girder-install plugin --symlink $MAIN_PATH", "alternative end": "cp $GIRDER_SOURCE_DIR/plugins/minerva/server/conf/minerva.dist.cfg $GIRDER_SOURCE_DIR/plugins/minerva/server/conf/minerva.local.cfg"}], "InsightSoftwareConsortium/ITKPythonPackage": [{"start": "sudo pip install -U scikit-ci-addons", "end": "ci_addons docker load-pull-save r.j3ss.co/shellcheck", "alternative end": "scripts/lint-shell-scripts.sh"}], "Kitware/SMQTK": [{"start": "pip install -r requirements.txt", "end": "PYTHONINSTALLPREFIX=\"$(realpath \"$(dirname \"$(which python)\")/..\")\"", "alternative end": "echo \"${PYTHONINSTALLPREFIX}\""}, {"start": "make install", "end": "popd", "alternative end": "pip list | grep -i smqtk"}], "knownsec/Pocsuite": [{"start": "if [[ ${TRAVIS_PYTHON_VERSION:0:3} == 2.6 ]]; then pip install -q flake8==2.6.2; fi", "end": "python -c \"from pocsuite.api.cannon import Cannon; import pocsuite\"", "alternative end": "python pocsuite.py --help"}], "OpenChemistry/avogadrolibs": [], "Kitware/HPCCloud": [{"start": "pip install -U pip virtualenv", "end": "pushd \"${HOME}/build\"", "alternative end": "git clone https://github.com/girder/girder.git"}, {"start": "pip install -r requirements-dev.txt", "end": "popd", "alternative end": "pip install girder/"}, {"start": "pip install girder/", "end": "mkdir /tmp/db", "alternative end": "mongod --dbpath=/tmp/db >/dev/null 2>/dev/null &"}, {"start": "pip install --no-cache-dir -e \"${HOME}/build/Kitware/HPCCloud/server/hpccloud\"", "end": "export BOTO_CONFIG=/dev/null", "alternative end": "if [ -n \"${PY2}\" ]; then npm install; fi"}, {"start": "if [ -n \"${PY2}\" ]; then npm install; fi", "end": "if [ -n \"${PY2}\" ]; then npm run build:release; fi", "alternative end": "if [ -n \"${PY2}\" ]; then npm run test; fi"}], "KnpLabs/php-github-api": [], "KnpLabs/KnpMenu": [], "KnpLabs/rad-fixtures-load": [], "koding/websocketproxy": [], "KnpLabs/knp-components": [], "koding/cache": [], "KnpLabs/KnpMenuBundle": [], "Kitware/wslink": [{"start": "pip install -U pip", "end": "nvm install 6", "alternative end": "nvm use 6"}, {"start": "npm install", "end": "popd", "alternative end": "pushd \"python\""}, {"start": "pip install -U -r requirements-dev.txt", "end": "popd", "alternative end": "pushd \"js\""}], "KnpLabs/KnpPaginatorBundle": [], "KnpLabs/snappy": [], "Kitware/vtk-js": [{"start": "sudo apt-get install build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev", "end": "stable", "alternative end": "10"}], "KnpLabs/Gaufrette": [], "koding/kd": [{"start": "npm install -g npm", "end": "google-chrome", "alternative end": "google-chrome-stable"}], "KnpLabs/FriendlyContexts": [], "DigitalSlideArchive/HistomicsTK": [{"start": "pip install --upgrade pip", "end": "git fetch --depth=1000", "alternative end": "tox | cat; test ${PIPESTATUS[0]} -eq 0"}, {"start": "pip install codecov", "end": "codecov --disable search pycov gcov --file build/test/coverage/py_coverage.xml", "alternative end": "if [ ${TRAVIS_PYTHON_VERSION:0:3} == \"3.7\" ]; then pip install travis-sphinx; travis-sphinx -o docs/_build/html -v deploy -b sphinx,master; fi"}], "KnpLabs/packagist-api": [], "KnpLabs/ConsoleServiceProvider": [], "koding/kite": [], "Kitware/paraview-glance": [{"start": "sudo apt-get install -y libgif-dev", "end": "npm i -g npm@6.0.1", "alternative end": "npm ci"}], "Kitware/arctic-viewer": [], "koding/redis": [], "Kitware/SMTK": [{"start": "sudo apt-get install -yqq git cmake ninja-build ccache python-dev texlive-extra-utils doxygen graphviz", "end": "git config --global user.email \"travis@travis-ci.org\"", "alternative end": "git config --global user.name \"Travis CI\""}], "koding/multiconfig": [], "KnpLabs/DoctrineBehaviors": [], "koding/kite.js": [], "Kitware/tangelo": [{"start": "npm install -g grunt-cli", "end": "grunt", "alternative end": "grunt test:server"}], "koding/tunnel": [], "KnpLabs/KnpDisqusBundle": [], "Kitware/KWStyle": [], "OpenChemistry/tomviz": [], "KnpLabs/KnpRadBundle": [], "KnpLabs/KnpTimeBundle": [], "KnpLabs/KnpMarkdownBundle": [], "KnpLabs/KnpGaufretteBundle": [], "KnpLabs/KnpBundles": [], "KitwareMedical/ITKUltrasound": [{"start": "$HOME/Library/Caches/Homebrew", "end": "pushd ..", "alternative end": "git clone https://github.com/InsightSoftwareConsortium/ITKSplitComponents"}], "KnpLabs/KnpSnappyBundle": [], "Kozea/CairoSVG": [{"start": "pip install --upgrade -e.[test]", "end": "mkdir ~/.fonts", "alternative end": "cp ./test_non_regression/resources/*.*tf ~/.fonts"}], "kpn-digital/django-etcd-settings": [{"start": "pip install codecov", "end": "codecov", "alternative end": "pypi"}], "emicklei/gmig": [], "meco-group/omg-tools": [{"start": "pip install .", "end": "wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh", "alternative end": "chmod +x miniconda.sh"}, {"start": "if [ ! -z $CA ]; then pip install casadi==$CA; fi", "end": "sudo add-apt-repository main", "alternative end": "sudo apt-get update"}], "kumparan/kumparanian": [{"start": "sudo apt-get install pandoc", "end": "flake8", "alternative end": "make test"}], "Kunstmaan/KunstmaanBundlesStandardEdition": [], "stack-of-tasks/pinocchio": [{"start": "pip install --user pyopenssl", "end": "export CMAKE_ADDITIONAL_OPTIONS=\"-DCMAKE_BUILD_TYPE=${BUILDTYPE} -DBUILD_WITH_COLLISION_SUPPORT=${BUILD_WITH_COLLISION_SUPPORT} -DBUILD_ADVANCED_TESTING=ON\"", "alternative end": "export CMAKE_PREFIX_PATH=/opt/openrobots:$CMAKE_PREFIX_PATH"}], "Kunstmaan/KunstmaanLiveReloadBundle": [], "Kunstmaan/KunstmaanBundlesCMS": [{"start": "npm install", "end": "skip", "alternative end": "npm run build -- --continueAfterTestError=true"}], "Kunstmaan/hyperledger-fabric-node-chaincode-utils": [], "KxSystems/kafka": [{"start": "sudo apt-get update -qq", "end": "make all"}], "KxSystems/embedPy": [{"start": "if [ $TRAVIS_OS_NAME = osx ]; then brew outdated pyenv || brew upgrade pyenv ; export PYTHON_CONFIGURE_OPTS=\"--enable-framework\" ; fi", "end": "PY=$(pyenv install --list | grep -v - |grep -v [a-z]|grep -e  '^  3\\.5\\..*'|tail -1)", "alternative end": "pyenv install $PY && pyenv local $PY"}, {"start": "if [[ \"x$QLIC_KC\" != \"x\" ]]; then echo -n $QLIC_KC |base64 --decode > q/kc.lic; pip install --upgrade pip; pip install --upgrade setuptools; pip -q install -r tests/requirements.txt; q test.q -s 4 -q; else echo No kdb+, no tests; fi", "end": "clang", "alternative end": "releases"}], "KxSystems/ffi": [{"start": "if [ $TRAVIS_OS_NAME = linux ]; then sudo apt-get install libffi-dev libc6-dev libc6-dev-i386 libffi-dev:i386; fi", "end": "make all", "alternative end": "echo \"Preparing version $TRAVIS_BRANCH-$TRAVIS_COMMIT\""}], "KxSystems/jupyterq": [{"start": "if [[ \"x$QLIC_KC\" != \"x\" ]]; then echo -n $QLIC_KC |base64 --decode > q/kc.lic; mkdir embedpy && cd embedpy && echo 'getembedpy\"latest\"' | q ../build/getembedpy.q -q && cd ..; pip install -r requirements.txt; fi", "end": "IMPLEMENTATION=$(if [[ \"x$TRAVIS_TAG\" == \"x\" ]]; then echo $TRAVIS_BRANCH-$TRAVIS_COMMIT; else echo $TRAVIS_TAG; fi;)", "alternative end": "perl -p -i -e 's/JUPYTERQVERSION/`\\$\\\"'${IMPLEMENTATION}'\\\"/g' jupyterq_kernel.q"}], "Kunstmaan/hyperledger-fabric-chaincode-dev-setup": [], "Label305/Auja": [{"start": "npm install -g bower", "end": "yes no | bower install --allow-root", "alternative end": "npm install -g requirejs"}, {"start": "npm install -g requirejs", "end": "grunt test", "alternative end": "export DISPLAY=:99.0"}], "Tulip-Dev/tulip": [{"start": "commit_message !~ /\\[(macos|macports|homebrew|windows)-only\\]$/", "end": "linux", "alternative end": "xenial"}, {"start": "commit_message !~ /\\[(macos|macports|homebrew|windows)-only\\]$/", "end": "linux", "alternative end": "bionic"}, {"start": "commit_message !~ /\\[(macos|macports|homebrew|windows)-only\\]$/", "end": "linux", "alternative end": "xenial"}, {"start": "commit_message !~ /\\[(macos|macports|homebrew|windows)-only\\]$/", "end": "linux", "alternative end": "bionic"}, {"start": "commit_message !~ /\\[(macos|macports|homebrew|windows)-only\\]$/", "end": "linux", "alternative end": "trusty"}, {"start": "commit_message !~ /\\[(linux|homebrew|windows)-only\\]$/", "end": "osx", "alternative end": "clang"}, {"start": "commit_message !~ /\\[(linux|homebrew|windows)-only\\]$/", "end": "osx", "alternative end": "xcode12"}, {"start": "$HOME/Library/Caches/Homebrew", "end": "ccache", "alternative end": "cmake"}, {"start": "ENV=\"MacOS default, LLVM Clang, Homebrew\"", "end": "mkdir build && cd build", "alternative end": "cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PWD/install -DCMAKE_C_COMPILER=/usr/local/opt/llvm/bin/clang -DCMAKE_CXX_COMPILER=/usr/local/opt/llvm/bin/clang++ -DTRAVIS_BUILD_THIRDPARTY_ONLY=ON -DTULIP_USE_CCACHE=ON || travis_terminate 1"}, {"start": "$HOME/Library/Caches/Homebrew", "end": "ccache", "alternative end": "cmake"}, {"start": "ENV=\"MacOS most recent, LLVM Clang, Homebrew\"", "end": "mkdir build && cd build", "alternative end": "cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PWD/install -DCMAKE_C_COMPILER=/usr/local/opt/llvm/bin/clang -DCMAKE_CXX_COMPILER=/usr/local/opt/llvm/bin/clang++ -DTRAVIS_BUILD_THIRDPARTY_ONLY=ON -DTULIP_USE_CCACHE=ON || travis_terminate 1"}, {"start": "commit_message !~ /\\[(linux|homebrew|windows)-only\\]$/", "end": "osx", "alternative end": "clang"}, {"start": "commit_message !~ /\\[(linux|homebrew|windows)-only\\]$/", "end": "osx", "alternative end": "xcode12"}, {"start": "$HOME/Library/Caches/Homebrew", "end": "ccache", "alternative end": "cmake"}, {"start": "ENV=\"MacOS default, LLVM Clang, Homebrew\"", "end": "mkdir build && cd build", "alternative end": "cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PWD/install -DCMAKE_C_COMPILER=/usr/local/opt/llvm/bin/clang -DCMAKE_CXX_COMPILER=/usr/local/opt/llvm/bin/clang++ -DPYTHON_EXECUTABLE=/usr/bin/python2.7 -DTULIP_BUILD_CORE_ONLY=ON -DTULIP_BUILD_TESTS=ON -DTULIP_USE_CCACHE=ON || travis_terminate 1"}, {"start": "$HOME/Library/Caches/Homebrew", "end": "ccache", "alternative end": "cmake"}, {"start": "ENV=\"MacOS most recent, LLVM Clang, Homebrew\"", "end": "mkdir build && cd build", "alternative end": "cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PWD/install -DCMAKE_C_COMPILER=/usr/local/opt/llvm/bin/clang -DCMAKE_CXX_COMPILER=/usr/local/opt/llvm/bin/clang++ -DPYTHON_EXECUTABLE=/usr/bin/python2.7 -DTULIP_BUILD_CORE_ONLY=ON -DTULIP_BUILD_TESTS=ON -DTULIP_USE_CCACHE=ON || travis_terminate 1"}, {"start": "commit_message !~ /\\[(linux|homebrew|windows)-only\\]$/", "end": "osx", "alternative end": "clang"}, {"start": "pip install --user sphinx==1.7.9", "end": "ENV=\"MacOS default, AppleClang, MacPorts\"", "alternative end": "mkdir build && cd build"}, {"start": "commit_message !~ /\\[(linux|homebrew|windows)-only\\]$/", "end": "osx", "alternative end": "xcode12"}, {"start": "pip install --user sphinx==1.7.9", "end": "ENV=\"MacOS most recent, LLVM Clang, MacPorts\"", "alternative end": "mkdir build && cd build"}, {"start": "$HOME/Library/Caches/Homebrew", "end": "ccache", "alternative end": "cmake"}, {"start": "pip install --user sphinx==1.7.9", "end": "ls /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk || sudo ln -s /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk", "alternative end": "ENV=\"MacOS default, LLVM Clang, Homebrew\""}, {"start": "ENV=\"MacOS default, LLVM Clang, Homebrew\"", "end": "mkdir build && cd build", "alternative end": "cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PWD/install -DCMAKE_C_COMPILER=/usr/local/opt/llvm/bin/clang -DCMAKE_CXX_COMPILER=/usr/local/opt/llvm/bin/clang++ -DPYTHON_EXECUTABLE=/usr/bin/python2.7 -DCMAKE_PREFIX_PATH=/usr/local/opt/qt -DSPHINX_EXECUTABLE=$HOME/Library/Python/2.7/bin/sphinx-build -DTULIP_BUILD_TESTS=ON -DTULIP_USE_CCACHE=ON || travis_terminate 1"}, {"start": "$HOME/Library/Caches/Homebrew", "end": "ccache", "alternative end": "cmake"}, {"start": "pip install --user sphinx==1.7.9", "end": "sudo ln -s /Applications/Xcode.app /Applications/Xcode-beta.app", "alternative end": "mkdir build && cd build"}], "EE/karma-ng-json2js-preprocessor": [], "EE/ng-l20n": [], "ladybirdweb/faveo-helpdesk": [], "EE/angular-ui-tree-filter": [{"start": "npm install -g bower", "end": "cd test/unit/ && bower install --verbose && cd ../.."}], "ladybirdweb/faveo-helpdesk-android-app": [{"start": "sudo apt-get update && sudo apt-get install oracle-java8-installer", "end": "java -version", "alternative end": "master"}], "lantanagroup/FHIR.js": [], "madsjulia/Mads.jl": [], "hpc/charliecloud": [], "LANL/LATTE": [{"start": "sudo apt-get install gfortran libblas-dev liblapack-dev", "end": "cd; git clone --depth=1 https://github.com/lanl/qmd-progress.git", "alternative end": "cd; git clone --depth=1 https://github.com/lanl/bml.git"}, {"start": "pip install --user codecov", "end": "cd; cd bml; CC=gcc FC=gfortran CMAKE_BUILD_TYPE=Release BLAS_VENDOR=GNU BML_OPENMP=yes BML_TESTING=no ./build.sh configure", "alternative end": "cd; cd bml/build; make; make install"}, {"start": "cd; cd bml/build; make; make install", "end": "cd; cd qmd-progress; CC=gcc FC=gfortran PROGRESS_MPI=no PROGRESS_TESTING=yes BLAS_VENDOR=GNU CMAKE_PREFIX_PATH=~/bml/install PROGRESS_OPENMP=yes ./build.sh configure", "alternative end": "cd; cd qmd-progress/build; make; make install"}, {"start": "cd; cd qmd-progress/build; make; make install", "end": "cd; cd lammps/lib/latte; ln -s $LATTEPATH/src/latte_c_bind.o filelink.o ; ln -s $LATTEPATH/src includelink ; ln -s $LATTEPATH liblink", "alternative end": "cd; cd lammps/lib/latte; cp Makefile.lammps.gfortran Makefile.lammps"}, {"start": "if [[ ! ${LATTE_CMAKE} ]]; then make ${OPTIONS} && make test${TEST}; else mkdir build && cd build && cmake ../cmake -DCMAKE_INSTALL_PREFIX=$HOME/latte/install -DPROGRESS=${CMAKE_WITH_PROGRESS} -DOPENMP=${CMAKE_WITH_PROGRESS} -DCMAKE_PREFIX_PATH=\"$HOME/bml/install;$HOME/qmd-progress/install\" && make && make install && if [[ ${LAMMPS_CMAKE} ]]; then cd $HOME/lammps && mkdir build && cd build && cmake ../cmake -DPKG_MOLECULE=ON -DPKG_LATTE=ON -DCMAKE_PREFIX_PATH=$HOME/latte/install -DCMAKE_CXX_STANDARD=11 && make; fi fi", "end": "bash <(curl -s https://codecov.io/bash) -v -X gcov", "alternative end": "codecov"}], "hpc/libhio": [{"start": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]] ; then brew install openmpi ;  brew link --overwrite gcc ; fi", "end": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]] ; then sudo apt-get -qq update ; sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1397BC53640DB551 ; sudo apt-get -qq install openmpi-bin libopenmpi-dev ; fi", "alternative end": "./autogen.sh && ./configure"}], "LANL/LaGriT": [{"start": "if [ $TRAVIS_OS_NAME = linux ];   then sudo apt-get purge cmake && sudo apt-key update && sudo apt-get update && sudo apt-get -y -f install gfortran libz-dev m4 bison python3 cmake; fi", "end": "export FC=$(which gfortran);      echo $FC", "alternative end": "export CC=$(which gcc);           echo $CC"}, {"start": "if [[ \"${TRAVIS_OS_NAME}\" == \"linux\" ]]; then\n  CMAKE_URL=\"https://cmake.org/files/v3.10/cmake-3.10.0-Linux-x86_64.tar.gz\"\n  mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake\n  export PATH=${DEPS_DIR}/cmake/bin:${PATH}\nelse\n  brew install cmake || brew upgrade cmake\nfi\n", "end": "cd -", "alternative end": "cmake --version"}], "LANL/vpic": [{"start": "if [[ ${COVERAGE}  ]]; then pip install --user codecov; fi", "end": "CCACHE_CPP2=yes", "alternative end": "CMAKE_VERSION=3.1.3-Linux-x86_64"}, {"start": "mkdir build && cd build && PATH=\"$HOME/bin:/usr/lib/ccache:$PATH\" CC=gcc-${GVER} CXX=g++-${GVER} cmake -DENABLE_INTEGRATED_TESTS=ON -DENABLE_UNIT_TESTS=ON ${USE_V4_SSE:+-DUSE_V4_SSE=ON} ${USE_V4_PORTABLE:+-DUSE_V4_PORTABLE=ON} ${COVERAGE:+-DENABLE_COVERAGE_BUILD=ON} .. && make -j4 VERBOSE=1 && make test CTEST_OUTPUT_ON_FAILURE=1 && make install DESTDIR=$PWD", "end": "if [[ ${COVERAGE} ]]; then cd .. && codecov --gcov-exec gcov-${GVER}; fi", "alternative end": "$HOME/.ccache"}], "LANL/Draco": [], "hpc/dcp": [{"start": "sudo apt-get update -qq", "end": "git clone https://github.com/hpc/libcircle.git", "alternative end": "pushd libcircle"}, {"start": "./autogen.sh && ./configure --enable-tests && make && make check && sudo make install", "end": "popd", "alternative end": "sudo ldconfig"}], "LANL/CoARCT": [], "amanzi/amanzi": [], "practicalmeteor/meteor-sinon": [{"start": "npm install -g spacejam", "end": "spacejam test-packages ./"}], "lanl-ansi/PowerModels.jl": [], "LANL/CLAMR": [{"start": "not valid", "stop": "not valid"}], "paunin/PostDock": [], "LANL/qmasm": [], "laristra/flecsi": [], "hpc/libcircle": [{"start": "sudo apt-get update -qq", "end": "./autogen.sh && ./configure --enable-tests && make && make check", "alternative end": "clang"}], "lbryio/chainquery": [], "ECP-WarpX/WarpX": [{"start": "sudo apt-get update", "end": "sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 2", "alternative end": "sudo update-alternatives --set python /usr/bin/python3"}, {"start": "python -m pip install --upgrade pip", "end": "export CEI_CMAKE=\"/home/travis/.local/bin/cmake\"", "alternative end": "export CEI_SUDO=\"sudo\""}], "AMReX-Astro/Nyx": [{"start": "pip install -r requirements.txt", "end": "bash ./build_and_deploy.sh", "alternative end": "jmsexton@lbl.gov"}], "lbryio/spee.ch": [], "lbl-srg/modelica-buildings": [{"start": "sudo apt-get -y install python3.6-minimal", "end": "echo \"$DOCKER_PASSWORD\" | docker login -u \"$DOCKER_USERNAME\" --password-stdin", "alternative end": "if [[ \"$TEST_ARG\" == *test-dymola* ]]; then docker pull \"$DOCKER_USERNAME\"/travis_ubuntu-1804_dymola:2021-x86_64; cp Buildings/Resources/Scripts/travis/dymola/dymola $HOME/bin/; fi;"}, {"start": "if [[ \"$TEST_ARG\" == *test-cdl-conformance* ]]; then wget --no-verbose https://github.com/lbl-srg/modelica-json/archive/${MODELICA_JSON_VERSION}.tar.gz; tar xzf ${MODELICA_JSON_VERSION}.tar.gz; rm ${MODELICA_JSON_VERSION}.tar.gz; mv modelica-json-${MODELICA_JSON_VERSION} ${MODELICA_JSON_HOME}; cd ${MODELICA_JSON_HOME}; make install-node-packages; make compile; cd -; echo \"Installed modelica-json in ${MODELICA_JSON_HOME}\"; fi;", "end": "(cd Buildings/Resources/Scripts/travis && travis_wait 90 $TEST_ARG)", "alternative end": "for ff in `find Buildings -maxdepth 1 -name '*.log'`; do\n  echo \"*** Content of $ff\"\n  cat $ff\n  echo \"*** End of $ff\"\ndone\n"}], "materialsintelligence/propnet": [{"start": "sudo apt-get update", "end": "nosetests -v ./ docs/ --with-coverage --cover-package=propnet", "alternative end": "coveralls"}], "xiaoyeli/superlu_dist": [{"start": "sudo apt-get update", "end": "sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y", "alternative end": "sudo apt-get update"}, {"start": "sudo apt-get update", "end": "sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 60 --slave /usr/bin/g++ g++ /usr/bin/g++-6", "alternative end": "export CXX=\"g++-6\""}, {"start": "sudo apt-get install gfortran-6 -y", "end": "sudo update-alternatives --install /usr/bin/gfortran gfortran /usr/bin/gfortran-6 60", "alternative end": "printf \"${BLUE} GC; Done installing gfortran via apt\\n\""}, {"start": "sudo apt-get install openmpi-bin libopenmpi-dev", "end": "printf \"${BLUE} GC; Done installing openmpi\\n\"", "alternative end": "printf \"${BLUE} GC; Installing BLASfrom apt\\n\""}, {"start": "sudo apt-get install libblas-dev", "end": "export BLAS_LIB=/usr/lib/libblas/libblas.so", "alternative end": "printf \"${BLUE} GC; Done installing BLASfrom apt\\n\""}, {"start": "sudo apt-get install liblapack-dev", "end": "export LAPACK_LIB=/usr/lib/liblapack.so", "alternative end": "printf \"${BLUE} GC; Done installing LAPACKfrom apt\\n\""}, {"start": "make install > make_parmetis_install.log 2>&1", "end": "printf \"${BLUE} GC; Done installing ParMetis-4.0 from source\\n\"", "alternative end": "export BLUE=\"\\033[34;1m\""}, {"start": "make install", "end": "printf \"${BLUE} GC; Done installing superlu_dist from source\\n\"", "alternative end": "cd $TRAVIS_BUILD_DIR"}], "pghysels/STRUMPACK": [{"start": "sudo apt-get update", "end": "sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y", "alternative end": "sudo apt-get update"}, {"start": "sudo apt-get update", "end": "sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 60 --slave /usr/bin/g++ g++ /usr/bin/g++-6", "alternative end": "export CXX=\"g++-6\""}, {"start": "sudo apt-get install gfortran-6 -y", "end": "sudo update-alternatives --install /usr/bin/gfortran gfortran /usr/bin/gfortran-6 60", "alternative end": "printf \"${BLUE} GC; Done installing gfortran via apt\\n\""}, {"start": "sudo apt-get update", "end": "printf \"${BLUE} GC; Done installing OpenMPI-1 via apt\\n\"", "alternative end": "export BLUE=\"\\033[34;1m\""}, {"start": "sudo apt-get install libblas-dev liblapack-dev", "end": "export BLAS_LIB=/usr/lib/libblas/libblas.so", "alternative end": "export LAPACK_LIB=/usr/lib/lapack/liblapack.so"}, {"start": "make install > make_scalapack_install.log 2>&1", "end": "cd ../", "alternative end": "export SCALAPACK_DIR=$PWD/install"}, {"start": "make install > make_parmetis_install.log 2>&1", "end": "printf \"${BLUE} GC; Done installing ParMetis-4.0 from source\\n\"", "alternative end": "printf \"${BLUE} GC; Installing Metis-5.1.0 from source\\n\""}, {"start": "make install > make_metis_install.log 2>&1", "end": "printf \"${BLUE} GC; Done installing Metis-5.1.0 from source\\n\"", "alternative end": "printf \"${BLUE} GC; Installing STRUMPACK from source\\n\""}, {"start": "make install", "end": "make tests", "alternative end": "printf \"${BLUE} GC; Done installing STRUMPACK from source\\n\""}], "lbryio/torba": [{"start": "pip install pylint mypy", "end": "pylint --rcfile=setup.cfg torba", "alternative end": "mypy --ignore-missing-imports torba"}, {"start": "pip install tox-travis", "end": "tox", "alternative end": "tests"}, {"start": "pip install tox-travis", "end": "tox", "alternative end": "pip install coverage"}, {"start": "pip install coverage", "end": "coverage combine tests/", "alternative end": "bash <(curl -s https://codecov.io/bash)"}], "AMReX-Codes/amrex": [{"start": "pip install sphinx sphinx_rtd_theme breathe", "end": "travis_wait bash ./build_and_deploy.sh", "alternative end": "atmyers@lbl.gov"}], "materialsproject/custodian": [{"start": "pip install --quiet --ignore-installed -r requirements.txt -r requirements-ci.txt", "end": "export PATH=\"$HOME/miniconda/bin:$PATH\"", "alternative end": "source activate test-environment"}, {"start": "pip install --quiet -e .", "end": "pytest custodian", "alternative end": "pycodestyle custodian"}], "leapfrogonline/ansible-merge-vars": [{"start": "pip install tox-travis", "end": "make ci-test"}], "Leanplum/Leanplum-iOS-SDK": [{"start": "gem install cocoapods", "end": "pod install --project-directory=Example", "alternative end": "if [ -z \"$TRAVIS_TAG\" ] \n  then \n    echo \"No tag, so not triggering Location\" \n  else\n    ./Tools/triggerLocation.sh\n  fi\n"}], "Leanplum/Leanplum-Android-SDK": [{"start": "python -m pip install Pillow --user", "end": "echo 'count=0' > /home/travis/.android/repositories.cfg", "alternative end": "echo y | sdkmanager \"platform-tools\" >/dev/null"}], "leapmotion/leapjs": [{"start": "npm install -g grunt-cli", "end": "grunt test"}], "leapmotion/autowiring": [{"start": "make install > logfile 2>&1 || (cat logfile; false)", "end": "cpack || (cat _CPack_Packages/Linux/TGZ/InstallOutput.log; exit 3)", "alternative end": "cd examples"}], "Lemoncode/lcFormValidation": [{"start": "cd lib && npm install && npm test", "end": "codeclimate-test-reporter < coverage/tests/lcov.info"}], "lendup/fs2-blobstore": [], "LedgerHQ/ledger-live-common": [], "lesfurets/git-octopus": [], "doov-io/dOOv": [], "dubreuia/intellij-plugin-save-actions": [], "lesfurets/zeno-pixel": [{"start": "sudo apt-get update", "end": "grunt", "alternative end": "cat pages_template.json >> pages.json"}], "ConnectSDK/Connect-SDK-Android": [], "LGSInnovations/sigplot": [{"start": "npm install -g grunt", "end": "grunt dist", "alternative end": "never"}], "Libertymutual/herman": [], "lightbend/lightbend-emoji": [], "liferay/alloyui.com": [], "akka/akka-http-quickstart-scala.g8": [], "typesafehub/activator-akka-stream-java8": [], "typesafehub/activator-akka-stream-scala": [], "symfony-cmf/cmf-sandbox": [], "liip/RMT": [], "akka/alpakka": [], "node-gh/gh-jira": [], "typesafehub/constructr-zookeeper": [], "lightbend/paradox": [], "akka/akka-grpc": [], "LINBIT/drbdtop": [], "linagora/jmap-client": [{"start": "npm install -g bower grunt-cli", "end": "grunt coverage"}], "linagora/hublin": [{"start": "npm install -g bower grunt-cli", "end": "mongodb", "alternative end": "redis-server"}], "sheyll/b9-vm-image-builder": [], "typesafehub/ReactiveMaps": [], "Line/line-bot-sdk-ruby": [{"start": "if [ ${TRAVIS_RUBY_VERSION} = '2.2' ]; then gem install bundler -v '< 2'; fi", "end": "bundle exec rubocop", "alternative end": "bundle exec rspec"}], "akka/akka": [], "akka/akka-management": [], "linkedin/spaniel": [], "lightbend/scala-sculpt": [], "Line/line-bot-sdk-java": [], "heimdalljs/heimdalljs-lib": [], "LinkerNetworks/network-controller": [{"start": "sudo apt-get install -y git build-essential openvswitch-switch", "end": "go get -u github.com/kardianos/govendor", "alternative end": "go get -u github.com/pierrre/gotestcover"}], "lightbend/ssl-config": [], "lightbend/sbt-reactive-app": [], "lightbend/reactive-cli": [{"start": "sudo apt-get install -y jq", "end": "test", "alternative end": "JS test"}, {"start": "sudo apt-get install -y bc build-essential clang-3.9 libcurl4-openssl-dev libgc-dev libre2-dev libunwind8-dev", "end": "script/install-minikube.sh", "alternative end": "sbt cliNative/nativeLink integrationTest/scripted"}, {"start": "sudo apt-get install -y bc build-essential clang-3.9 libcurl4-openssl-dev libgc-dev libre2-dev libunwind8-dev", "end": "script/install-oc.sh", "alternative end": "export OC_PROJECT=orchestration-$(date \"+%Y%m%d-%H%M%S\")"}], "akka/akka-persistence-dynamodb": [], "lightbend/reactive-lib": [], "linkedin/shaky-android": [], "linkedin/kafka-tools": [{"start": "pip install tox", "end": "tox", "alternative end": "pip install kazoo"}, {"start": "pip install kazoo", "end": "sphinx-build -nW -b html -d ./docs/_build/doctrees ./docs ./docs/_build/html", "alternative end": "codeclimate-test-reporter"}], "akka/akka-quickstart-scala.g8": [], "linkedin/test-butler": [], "akka/akka-persistence-couchbase": [], "akka/akka-samples": [{"start": "CMD=\"if \\[ \\\"$TRAVIS_SECURE_ENV_VARS\\\" == \\\"true\\\" ]; then mkdir ~/.lightbend && echo $LB_CRED | base64 -d > ~/.lightbend/commercial.credentials && sudo apt-get update && sudo apt-get install protobuf-compiler && cd akka-sample-persistence-dc-scala && sbt test; fi\"", "end": "CMD=\"cd akka-sample-cqrs-scala && sbt test\"", "alternative end": "CMD=\"cd akka-sample-cqrs-java && mvn test\""}], "linkedin/parseq": [], "linkedin/qark": [{"start": "pip install -r requirements-test.txt", "end": "travis_wait python -m pytest"}], "linkedin/linkedin-gradle-plugin-for-apache-hadoop": [], "linkedin/kafka-monitor": [], "linkedin/dynamometer": [], "linkedin/transport": [], "linkedin/play-parseq": [], "Intel/sriov-network-device-plugin": [{"start": "sudo apt-get update -qq", "end": "sudo systemctl restart docker", "alternative end": "make test"}], "linkedin/dr-elephant": [{"start": "sudo pip install inspyred", "end": "./travis.sh", "alternative end": "master"}], "Intel/multus-cni": [{"start": "sudo apt-get update -qq", "end": "go get github.com/mattn/goveralls", "alternative end": "go get -u golang.org/x/lint/golint"}], "linkedin/dex-test-parser": [], "litespeedtech/ls-qpack": [], "Intel/libva": [{"start": "pip install --user cpp-coveralls", "end": "sudo apt-get -qq update", "alternative end": "sudo apt-get install -y build-essential"}, {"start": "sudo apt-get install -y build-essential", "end": "intel/libva", "alternative end": "Build submitted via Travis CI"}, {"start": "make -j4 ; sudo make install", "end": "make check", "alternative end": "coveralls --exclude lib --exclude tests --gcov-options '\\-lp'"}], "lingochamp/MagicProgressWidget": [], "lingochamp/okdownload": [], "lingochamp/QiniuImageLoader": [], "lingochamp/FileDownloader": [], "LivePersonInc/ephemerals": [], "Intel/opencl-intercept-layer": [], "LMAX-Exchange/disruptor-proxy": [], "Intel/tinycbor": [{"start": "if [ \"${TRAVIS_OS_NAME}\" != \"linux\" ]; then brew update; brew install qt5; fi", "end": "PATH=`echo /opt/qt*/bin`:$PATH", "alternative end": "eval \"$EVAL\""}], "lob/hapi-bookshelf-models": [], "Intel/rmd": [], "Intel/dps-for-iot": [{"start": "pip install --user cryptography", "end": "scons CC=$CC CXX=$CXX variant=$VARIANT transport=$TRANSPORT bindings=$BINDINGS asan=$ASAN ubsan=yes fsan=$FSAN;", "alternative end": "./test_scripts/run.py -d;"}], "PRUNERS/ReMPI": [], "LLNL/Caliper": [], "lob/lob-ruby": [], "lob/generate-changelog": [], "flux-framework/flux-core": [{"start": "pip install --upgrade black", "end": "./scripts/check-format", "alternative end": "skip"}, {"start": "pip install 'pylint==2.4.4' --force-reinstall", "end": "./scripts/pylint", "alternative end": "skip"}, {"start": "python3 -m pip install 'mypy==0.770' --force-reinstall", "end": "mypy", "alternative end": "skip"}, {"start": "if test \"$COVERAGE\" = \"t\"; then \\\n  # Use python3 coverage to match version in flux docker image\n  sudo apt update ; \\\n  sudo apt install -yy python3-pip ; \\\n  pip3 install --upgrade pip ; \\\n  pip3 install --upgrade --force-reinstall coverage ; \\\nfi\n", "end": "if test -n \"$S3_HOSTNAME\"; then \\\n    docker run -d -p 9000:9000 minio/minio server /data; \\\nfi\n  \n", "alternative end": "git fetch --unshallow --tags"}], "lob/lob-php": [], "Intel/intel-cmt-cat": [{"start": "sudo apt-get install -y swig cppcheck wget python3-virtualenv clang-format-9", "end": "wget -P /tmp/ https://raw.githubusercontent.com/torvalds/linux/184b8f7f91ca7938c09533df83ce84817e682975/scripts/checkpatch.pl && chmod a+x /tmp/checkpatch.pl", "alternative end": "wget -P /tmp/ https://raw.githubusercontent.com/torvalds/linux/184b8f7f91ca7938c09533df83ce84817e682975/scripts/spelling.txt"}, {"start": "sudo make install", "end": "LD_LIBRARY_PATH=`pwd`/lib make -C lib/python test", "alternative end": "LD_LIBRARY_PATH=`pwd`/lib make -C appqos test"}, {"start": "cd lib/perl && perl Makefile.PL && make && sudo make install", "end": "c", "alternative end": "gcc"}], "lob/lob-java": [], "lob/lob-node": [], "mfem/mfem": [{"start": "if [ $TRAVIS_OS_NAME == \"osx\" ] && [ $MPI == \"YES\" ]; then if [ ! -e $HOME/local-cached/bin/mpicc ]; then mkdir -p $HOME/builds && cd $HOME/builds && wget https://download.open-mpi.org/release/open-mpi/v2.1/openmpi-2.1.6.tar.bz2 && tar jxf openmpi-2.1.6.tar.bz2 && mkdir openmpi-build && cd openmpi-build && ../openmpi-2.1.6/configure --prefix=$HOME/local-cached && make -j3 all && make install; fi; PATH=$HOME/local-cached/bin:$PATH; cd $TRAVIS_BUILD_DIR; fi", "end": "if [ $MPI == \"YES\" ]; then if [ \"$TRAVIS_OS_NAME\" == \"linux\" ]; then export MPICH_CC=\"$CC\"; export MPICH_CXX=\"$CXX\"; else export OMPI_CC=\"$CC\"; export OMPI_CXX=\"$CXX\"; mpic++ --showme:version; fi; mpic++ -v; else $CXX -v; fi", "alternative end": "cd .."}], "lob/hapi-rate-limiter": [], "LLNL/conduit": [{"start": "pip install --user cpp-coveralls", "end": "which g++", "alternative end": "g++ --version"}, {"start": "make install", "end": "cd $TRAVIS_BUILD_DIR", "alternative end": "./scripts/ci/travis-test-build-examples-vs-install.sh"}], "lob/lob-python": [{"start": "pip install \"pip==18.0.0\"", "end": "pipenv install --dev", "alternative end": "pipenv run nosetests  --with-coverage --cover-package=lob"}], "Ceed/libCEED": [{"start": "pip install -r requirements.txt", "end": "make info && make -j4 && export CEED_DIR=$PWD", "alternative end": "pip install ."}, {"start": "pip install .", "end": "cd tests/python", "alternative end": "python setup-qfunctions.py build"}, {"start": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then export PATH=\"/usr/local/opt/ccache/libexec:$PATH\" && brew link --overwrite gcc; fi", "end": "if [[ \"$TRAVIS_CPU_ARCH\" == \"amd64\" ]]; then git clone https://github.com/libocca/occa.git && cd occa && git reset --hard 327badb && cd .. && make -C occa -j2 && export OCCA_DIR=$PWD/occa; fi", "alternative end": "if [[ \"$TRAVIS_CPU_ARCH\" == \"amd64\" ]]; then git clone --depth=1 --branch 1.16.1 https://github.com/hfp/libxsmm.git && make -C libxsmm -j2 && export XSMM_DIR=$PWD/libxsmm; fi"}, {"start": "test -s \"$PETSC_INSTALL/lib/pkgconfig/PETSc.pc\" || (  curl -O https://gitlab.com/petsc/petsc/-/archive/$PETSC_COMMIT/petsc-$PETSC_COMMIT.tar.gz && rm -rf $HOME/install/petsc* && tar xf petsc-$PETSC_COMMIT.tar.gz && cd petsc-$PETSC_COMMIT && ./configure --with-debugging=0 CC=$CC COPTFLAGS=-O --with-mpi=0 --with-fc=0 --with-cxx=0 --prefix=$PETSC_INSTALL && make && make install )", "end": "export PETSC_DIR=$PETSC_INSTALL", "alternative end": "if [[ \"$TRAVIS_JOB_NAME\" == \"Linux GCC + CodeCov\" ]]; then export COVERAGE=1; fi"}], "local-projects/ofxApp": [], "Intel/bmap-tools": [{"start": "pip install codecov", "end": "python setup.py nosetests --with-coverage --cover-xml", "alternative end": "codecov"}], "LLNL/GOTCHA": [{"start": "sudo apt-get update -qq", "end": "if [[ -n \"$DOWNLOAD\" ]] ; then if [[ ! -e \"$COMPILER\" ]] ; then cd $HOME; curl -o tarball.tar.xz $DOWNLOAD && cd $HOME/llvm && tar xf $HOME/tarball.tar.xz ; fi ; fi", "alternative end": "CMAKE_URL=\"https://cmake.org/files/v3.7/cmake-3.7.0-rc2-Linux-x86_64.tar.gz\""}], "LLNL/msr-safe": [{"start": "sudo apt-get install -y linux-headers-`uname -r`", "end": "labasan1@llnl.gov", "alternative end": "always"}], "LLNL/lbann": [], "Ceed/Laghos": [], "localytics/odbc_adapter": [], "localytics/lambda-slack-router": [], "LLNL/RAJA": [], "localytics/serverless-slackbot-scaffold": [], "LLNL/scraper": [{"start": "pip install flake8 bandit black", "end": "make test", "alternative end": "scraper -h"}], "Intel/tfortools": [], "LLNL/magpie": [], "locaweb/heartcheck": [{"start": "gem install bundler -v 1.17.3", "end": "bundle install -j 4 --retry 3", "alternative end": "bin/rspec"}], "locaweb/locawebstyle": [], "LLNL/pyranda": [{"start": "pip install -r requirements.txt", "end": "python setup.py build", "alternative end": "python setup.py install"}], "thesofproject/sof": [{"start": "sudo apt-get -y install ninja-build doxygen graphviz", "end": "mkdir -p doxybuild && pushd doxybuild && cmake -GNinja -S ../doc && ninja -v doc", "alternative end": "popd"}], "LLNL/ZFP": [{"start": "if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then\n    $PYTHON_EXECUTABLE -m pip install --upgrade pip;\n    $PYTHON_EXECUTABLE -m pip install -r ${TRAVIS_BUILD_DIR}/python/requirements.txt;\nfi\n", "end": "if [ \"$TRAVIS_OS_NAME\" = \"linux\" ]; then\n    export PYTHON_EXECUTABLE=/usr/bin/python$PYTHON_VERSION;\n    source /etc/lsb-release;\nfi\n", "alternative end": "if [ \"$TRAVIS_OS_NAME\" = \"linux\" ] && [ \"$PYTHON_VERSION\" = \"2.7\" ]; then\n    export PYTHON_INCLUDE_DIR=/usr/include/python2.7;\n    export PYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython2.7.so;\nfi\n"}, {"start": "if [ \"$TRAVIS_OS_NAME\" = \"linux\" ] && [ \"$DISTRIB_CODENAME\" = \"trusty\" ] && [ \"$PYTHON_VERSION\" = \"2.7\" ]; then\n    sudo $PYTHON_EXECUTABLE -m pip install --upgrade pip;\n    sudo $PYTHON_EXECUTABLE -m pip install -r ${TRAVIS_BUILD_DIR}/python/requirements.txt;\nfi\n", "end": "if [ \"$TRAVIS_OS_NAME\" = \"linux\" ] && [ \"$DISTRIB_CODENAME\" = \"trusty\" ] && [ \"$PYTHON_VERSION\" = \"3.5\" ]; then\n    echo \"Python 3.5 not supported on Ubuntu Trusty\";\n    exit 1;\nfi\n", "alternative end": "printenv | grep PYTHON"}], "LLNL/maestrowf": [{"start": "pip install tox-travis", "end": "flake8 .", "alternative end": "tox"}], "LLNL/H5Z-ZFP": [{"start": "sudo apt-get install -y gfortran", "end": "pwd", "alternative end": "ls"}], "logicmonitor/k8s-argus": [{"start": "sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common", "end": "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -", "alternative end": "sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\""}, {"start": "sudo apt-get update", "end": "make", "alternative end": "docker run --volume=$(pwd):/out --entrypoint=cp logicmonitor/argus:latest /coverage.txt /out"}], "LLNL/STAT": [{"start": "gem install coveralls-lcov", "end": "eval $(./scripts/travis-dep-builder.sh --printenv)", "alternative end": "./scripts/travis-dep-builder.sh --cachedir=$HOME/local/.cache --components=impi"}, {"start": "make && make install", "end": "mkdir -p $HOME/stat/bin", "alternative end": "/usr/bin/mpicc -g examples/src/mpi_ringtopo.c -o $HOME/stat/bin/mpi_ringtopo.out"}], "logzio/guice-jersey": [], "LLNL/RAJAPerf": [], "logzio/logzio-python-handler": [{"start": "pip install tox", "end": "tox"}], "lokku/jquery-nstslider": [{"start": "npm install -g grunt-cli", "end": "grunt"}], "logzio/sawmill": [], "loldesign/azure": [], "logzio/apollo": [], "logzio/jmx2graphite": [], "logzio/logzio-nodejs": [], "logzio/logzio-logback-appender": [], "lorenwest/monitor-dashboard": [], "Lovoo/nsq_exporter": [], "Lovoo/jenkins_exporter": [{"start": "pip install -r requirements.txt", "end": "python test.py", "alternative end": "False"}], "Lovoo/ipmi_exporter": [{"start": "gem install fpm package_cloud", "end": "make release-build deb release-package", "alternative end": "releases"}], "Lovoo/goka": [], "dhconnelly/rtreego": [], "backbee/backbee-php": [], "lucidsoftware/piezo": [], "lucidsoftware/cumulus": [{"start": "gem install bundler -v 1.17.1", "end": "ruby", "alternative end": "2.5.1"}], "lucidsoftware/relate": [], "luizalabs/teresa": [], "LumaPictures/meteor-jquery-datatables": [], "lumoslabs/aleph": [{"start": "npm install", "end": "export PATH=\"$PWD/node_modules/karma-cli/bin:$PATH\"", "alternative end": "karma --version"}], "Luno/luno-go": [], "HabitatMap/AirCasting": [], "LUSHDigital/modelgen": [{"start": "make install", "end": "make post"}], "lundegaard/react-union": [], "lutraconsulting/qgis-crayfish-plugin": [{"start": "pip install pytest==3.7.1 pytest-cov==2.6.1 coveralls", "end": "pytest crayfish/tests/ --cov=crayfish --cov-report term-missing", "alternative end": "coveralls"}], "pynamodb/PynamoDB": [{"start": "pip install -e .[signals] -r requirements-dev.txt", "end": "wget http://dynamodb-local.s3-website-us-west-2.amazonaws.com/dynamodb_local_latest.tar.gz -O /tmp/dynamodb_local_latest.tar.gz", "alternative end": "tar -xzf /tmp/dynamodb_local_latest.tar.gz -C /tmp"}], "jirokun/survey-designer-js": [{"start": "npm install -g codecov", "end": "yarn", "alternative end": "npm test"}], "M6Web/superagent-mock": [], "M6Web/Firewall": [], "M6Web/ElasticsearchBundle": [], "M6Web/RedisMock": [], "M6Web/StatsdBundle": [], "machinalis/quepy": [{"start": "pip install -U pytest setuptools wheel", "end": "python setup.py install", "alternative end": "python -m nltk.downloader wordnet"}], "AsyncNinja/AsyncNinja": [{"start": "gem update bundler", "end": "curl -sL https://raw.githubusercontent.com/travis-ci/artifacts/master/install | bash", "alternative end": "Update docs"}], "madebyhiro/codem-schedule": [], "madedotcom/photon-pump": [{"start": "pip install tox black", "end": "make travis", "alternative end": "codecov"}], "madedotcom/atomicpuppy": [{"start": "pip install .", "end": "coverage run --branch --source atomicpuppy -m contexts --verbose ./tests", "alternative end": "pypi"}], "zhangchu/ko": [], "MagicStack/asyncpg": [], "mageplaza/magento-2-seo": [], "Magmodules/magento2-channable": [], "MagicStack/MagicPython": [], "mageplaza/magento-2-product-slider": [], "mageplaza/magento-2-blog": [], "mageplaza/magento-2-smtp": [], "magneticio/vamp.io": [{"start": "npm install -g gulp", "end": "curl -sSL https://github.com/gohugoio/hugo/releases/download/v0.52/hugo_0.52_Linux-64bit.tar.gz | tar -zxf - -C /tmp/", "alternative end": "export PATH=\"/tmp:$PATH\""}, {"start": "npm install", "end": "if [ \"$TRAVIS_BRANCH\" == \"vamp-ee\" ]; then gulp build:staging && gulp hugo:vamp-ee-staging; fi", "alternative end": "if [ \"$TRAVIS_BRANCH\" == \"develop\" ]; then gulp build:staging && gulp hugo:staging; fi"}], "mageplaza/magento-2-banner-slider": [], "MaibornWolff/codecharta": [{"start": "sudo apt-get install -y wine", "end": "rm -rf ~/.nvm && git clone https://github.com/creationix/nvm.git ~/.nvm && (cd ~/.nvm && git checkout `git describe --abbrev=0 --tags`) && source ~/.nvm/nvm.sh && nvm install $TRAVIS_NODE_VERSION", "alternative end": "rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock"}, {"start": "npm install", "end": "npm run test --ci", "alternative end": "npm run lint"}, {"start": "npm install", "end": "npm run build:web", "alternative end": "npm run e2e:ci"}, {"start": "npm install", "end": "npm run test", "alternative end": "script"}], "i2p/i2p.i2p": [], "afni/afni": [{"start": "sudo apt-get install xvfb xauth libgl1-mesa-dri mesa-utils tcsh libjpeg-progs", "end": "cd src", "alternative end": "cp Makefile.$FLAVOR Makefile"}], "mailjet/mailjet-gem": [], "mailjet/mailjetBundle": [], "mailjet/mailjet-apiv3-go": [], "mailjet/mailjet-apiv3-java": [], "makandra/consul": [], "mailjet/mailjet-apiv3-dotnet": [], "mailjet/mailjet-apiv3-php": [], "mailjet/mailjet-apiv3-nodejs": [], "mailjet/laravel-mailjet": [], "makandra/dusen": [], "dirvine/data_chain": [], "makandra/rspec_candy": [{"start": "gem update --system 2.4.3", "end": "gem --version", "alternative end": "rake spec"}], "MakerDAO/market-maker-keeper": [{"start": "pip install $(cat requirements.txt $(find lib -name requirements.txt | sort) | sort | uniq | sed 's/ *== */==/g')", "end": "./test.sh", "alternative end": "codecov"}], "MakerDAO/pyexchange": [{"start": "pip install virtualenv --upgrade", "end": "./test.sh", "alternative end": "codecov"}], "makersacademy/clmystery": [], "makandra/assignable_values": [{"start": "gem install bundler --version='=1.17.3'", "end": "bundle install --jobs=3 --retry=3 --deployment --path=${BUNDLE_PATH:-vendor/bundle}", "alternative end": "bundle exec rake current_rspec"}], "makandra/spreewald": [], "makandra/gemika": [], "maidsafe/rust_sodium": [], "makandra/cucumber_factory": [], "knopflerfish/knopflerfish.org": [], "makandra/geordi": [{"start": "gem install bundler:1.17.3", "end": "bundle install --no-deployment --jobs=3 --retry=3 --path=${BUNDLE_PATH:-vendor/bundle}", "alternative end": "bundle exec rake"}], "makinacorpus/django-safedelete": [{"start": "pip install argparse", "end": "git clone -b $DJANGO_VERSION --single-branch https://github.com/django/django", "alternative end": "pip install -e django/"}, {"start": "pip install -e django/", "end": "pep8 --ignore=E501 safedelete", "alternative end": "pyflakes safedelete"}, {"start": "pip install coveralls", "end": "coveralls", "alternative end": "2.7"}], "makinacorpus/django-screamshot": [{"start": "pip install argparse", "end": "flake8 --ignore=E501 screamshot", "alternative end": "coverage run quicktest.py screamshot"}, {"start": "pip install coveralls", "end": "coveralls", "alternative end": "3.5"}], "MangoTheCat/functionMap": [], "makinacorpus/easydict": [], "makinacorpus/django-geojson": [{"start": "CPLUS_INCLUDE_PATH=/usr/include/gdal C_INCLUDE_PATH=/usr/include/gdal CFLAGS=-I/usr/include/gdal pip install GDAL==2.2.4", "end": "python setup.py develop", "alternative end": "flake8 --ignore=E501,W504 djgeojson"}], "mapbox/vector-tile-query": [], "makinacorpus/Leaflet.FileLayer": [{"start": "npm install", "end": "npm test"}], "makinacorpus/landez": [{"start": "sudo apt-get install -y python-software-properties", "end": "if [[ $TRAVIS_PYTHON_VERSION == 3.5 ]]; then virtualenv --system-site-packages venv -p python3; fi", "alternative end": "if [[ $TRAVIS_PYTHON_VERSION == 2.7 ]]; then virtualenv --system-site-packages venv; fi"}, {"start": "pip install -r requirements.txt", "end": "python --version", "alternative end": "python setup.py develop"}, {"start": "pip install nose", "end": "nosetests --with-coverage --cover-package=landez", "alternative end": "pip install coveralls"}, {"start": "pip install coveralls", "end": "coveralls"}], "makinacorpus/makina-states": [], "makinacorpus/django-leaflet": [{"start": "sudo apt-get update", "end": "pip freeze", "alternative end": "dpkg -l"}, {"start": "pip install coveralls", "end": "coveralls"}], "Mappy/Leaflet-active-area": [], "makinacorpus/Leaflet.GeometryUtil": [], "osmlab/atlas": [], "mapbox/geometry.hpp": [], "mapbox/vector-tile": [], "mapbox/tilelive-bridge": [], "mapbox/mapbox-upload": [{"start": "npm install", "end": "npm ls", "alternative end": "npm test"}], "mariadb-corporation/MaxScale": [{"start": "make install; ./postinst", "end": "make", "alternative end": "coverity_scan"}], "MariaDB/server": [{"start": "if [[ \"${TRAVIS_OS_NAME}\" == 'osx' ]]; then brew update; brew install gnutls lz4 lzo xz snappy ccache jemalloc curl ossp-uuid pcre zstd; brew link ccache; export PATH=\"/usr/local/opt/ccache/libexec:$PATH\"; fi", "end": "df -h", "alternative end": "ccache --version"}], "marmelab/sedy": [{"start": "make install-sedy", "end": "make test", "alternative end": "sedy/node_modules"}], "mapbox/geojson-mapnikify": [], "mapbox/mapbox-gl-styles": [], "mapbox/hpp-skel": [], "marklogic/python_api": [{"start": "pip install requests", "end": "echo 'America/Los_Angeles' | sudo tee /etc/timezone", "alternative end": "sudo dpkg-reconfigure --frontend noninteractive tzdata"}], "mapbox/node-blend": [{"start": "npm install", "end": "npm test"}], "mapbox/vtzero": [], "marklogic-community/ml-gradle": [], "massiveinteractive/haxe-react": [], "osmlab/osm-auth": [], "mapbox/vector-tile-js": [], "osmlab/name-suggestion-index": [], "mapbox/mapnik-pool": [], "MastodonC/kixi.hecuba": [], "tribe29/checkMK": [{"start": "pip install pipenv", "end": "make .venv", "alternative end": "travis_wait 30 make -C tests $TEST_TARGETS;"}], "osmlab/osm-community-index": [], "matricks/bam": [], "EMVA1288/emva1288": [], "osmlab/atlas-checks": [], "MatterHackers/MatterControl": [], "mapbox/shapefile-fairy": [], "osmlab/maproulette3": [], "mapbox/mapbox-tile-copy": [], "osmlab/editor-layer-index": [{"start": "pip install -r requirements.txt", "end": "gh-pages", "alternative end": "/.*/"}], "mapbox/gzip-hpp": [], "mapbox/mapnik-omnivore": [{"start": "npm install", "end": "if [[ ${COVERAGE:-false} != false ]]; then npm run coverage; fi;", "alternative end": "npm test"}], "CindyJS/CindyJS": [], "maxmind/geoip-api-c": [], "openebs/openebs-docs": [], "mapbox/node-cpp-skel": [], "maxmind/GeoIP2-node": [{"start": "npm install -g yarn", "end": "if [[ $RUN_SNYK && $SNYK_TOKEN ]]; then snyk test --org=maxmind; fi", "alternative end": "yarn install"}], "maxmind/MaxMind-DB-Reader-java": [{"start": "if [[ $RUN_SNYK && $SNYK_TOKEN ]]; then sudo apt-get install -y nodejs; fi", "end": "mvn install -DskipTests=true -Dgpg.skip=true", "alternative end": "if [[ $RUN_SNYK && $SNYK_TOKEN ]]; then snyk test --org=maxmind; fi"}], "maxmind/MaxMind-DB-Writer-perl": [], "mapbox/supercluster.hpp": [], "maxmind/GeoIP2-python": [{"start": "sudo make install", "end": "sudo ldconfig", "alternative end": "cd .."}, {"start": "if [[ $RUN_SNYK && $SNYK_TOKEN ]]; then sudo apt-get install -y nodejs; npm install -g snyk; fi", "end": "if [[ $RUN_SNYK && $SNYK_TOKEN ]]; then snyk test --org=maxmind; fi", "alternative end": "coverage run --source=geoip2 setup.py test"}], "maxmind/libmaxminddb": [], "maxmind/GeoIP2-java": [{"start": "if [[ $RUN_SNYK && $SNYK_TOKEN ]]; then sudo apt-get install -y nodejs; fi", "end": "mvn install -DskipTests=true -Dgpg.skip=true", "alternative end": "if [[ $RUN_SNYK && $SNYK_TOKEN ]]; then snyk test --org=maxmind; fi"}], "maxmind/MaxMind-DB-Reader-dotnet": [], "maxmind/geoip2-csv-converter": [{"start": "if [[ $RUN_SNYK && $SNYK_TOKEN ]]; then sudo apt-get install -y nodejs; fi", "end": "go get -t ./...", "alternative end": "if [[ $RUN_SNYK && $SNYK_TOKEN ]]; then snyk test --org=maxmind; fi"}], "maxmind/geoip-api-java": [{"start": "if [[ $RUN_SNYK && $SNYK_TOKEN ]]; then sudo apt-get install -y nodejs; fi", "end": "mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V", "alternative end": "if [[ $RUN_SNYK && $SNYK_TOKEN ]]; then snyk test --org=maxmind; fi"}], "maxmind/GeoIP2-dotnet": [], "maxmind/GeoIP2-php": [{"start": "if [[ $RUN_SNYK && $SNYK_TOKEN ]]; then sudo apt-get install -y nodejs; npm install -g snyk; fi", "end": "if [[ $RUN_SNYK && $SNYK_TOKEN ]]; then snyk test --org=maxmind; fi", "alternative end": "mkdir -p build/logs"}], "maxmind/geoip-api-python": [{"start": "sudo make install", "end": "sudo ldconfig", "alternative end": "cd .."}, {"start": "if [[ $TRAVIS_PYTHON_VERSION == '2.6' ]]; then pip install unittest2; fi", "end": "CFLAGS=\"-Werror -Wall -Wextra\" python setup.py test", "alternative end": "always"}], "maxmind/web-service-common-php": [{"start": "if [[ $RUN_SNYK && $SNYK_TOKEN ]]; then sudo apt-get install -y nodejs; npm install -g snyk; fi", "end": "if [[ $RUN_SNYK && $SNYK_TOKEN ]]; then snyk test --org=maxmind; fi", "alternative end": "mkdir -p build/logs"}], "maxmind/geoip-api-php": [{"start": "if [[ $RUN_SNYK && $SNYK_TOKEN ]]; then sudo apt-get install -y nodejs; npm install -g snyk; fi", "end": "if [[ $RUN_SNYK && $SNYK_TOKEN ]]; then snyk test --org=maxmind; fi", "alternative end": "./vendor/bin/phpunit -c phpunit.xml.dist"}], "maxmind/mod_maxminddb": [{"start": "sudo make install", "end": "sudo ldconfig", "alternative end": "cd .."}, {"start": "sudo apt-get update", "end": "sudo mkdir /etc/apache2/logs", "alternative end": "./bootstrap"}, {"start": "sudo make install", "end": "cpanm --installdeps --notest .", "alternative end": "perl Makefile.PL -configure -httpd_conf setup/apache2.conf -src_dir /usr/lib/apache2/modules"}], "maxmind/MaxMind-DB-Reader-python": [{"start": "sudo make install", "end": "sudo ldconfig", "alternative end": "cd .."}, {"start": "pip install coverage coveralls", "end": "MM_FORCE_EXT_TESTS=1 CFLAGS=\"-Werror -Wall -Wextra\" coverage run --source maxminddb setup.py test", "alternative end": "if [[ $RUN_SNYK && $SNYK_TOKEN ]]; then snyk test --org=maxmind --file=requirements.txt; fi"}], "maxmind/minfraud-api-php": [{"start": "if [[ $RUN_SNYK && $SNYK_TOKEN ]]; then sudo apt-get install -y nodejs; npm install -g snyk; fi", "end": "if [[ $RUN_SNYK && $SNYK_TOKEN ]]; then snyk test --org=maxmind; fi", "alternative end": "if [[ $RUN_LINTER ]]; then vendor/bin/php-cs-fixer fix --verbose --diff --dry-run --config=.php_cs; fi"}], "maxmind/minfraud-api-python": [{"start": "if [[ $RUN_SNYK && $SNYK_TOKEN ]]; then sudo apt-get install -y nodejs; npm install -g snyk; fi", "end": "python setup.py test", "alternative end": "if [[ $RUN_LINTER ]]; then mypy minfraud tests; fi"}], "maxmind/MaxMind-DB-Reader-php": [{"start": "if [[ $RUN_SNYK && $SNYK_TOKEN ]]; then sudo apt-get install -y nodejs; npm install -g snyk; fi", "end": "./.travis-build.sh", "alternative end": "phpenv rehash"}], "mapbox/makizushi": [{"start": "npm install", "end": "npm test"}], "mapbox/tilelive-vector": [], "mapbox/mapbox.js": [], "mcneel/developer-rhino3d-com": [], "mercury-hpc/mercury": [{"start": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then brew update; fi", "end": "if [[ \"$CHECK_FORMAT\" == \"true\" ]]; then install -D ./Testing/script/git-clang-format $HOME/install/bin/git-clang-format; else ./Testing/script/travis_build.sh; fi", "alternative end": "if [ -d \"$HOME/install/bin\" ]; then ls $HOME/install/bin; fi"}], "mdsol/grell": [], "openzipkin/zipkin-ruby": [], "robeio/robe": [{"start": "pip install --user codecov", "end": "openssl aes-256-cbc -pass pass:$ENCRYPTION_PASSWORD -in $GPG_DIR/pubring.gpg.enc -out ~/pubring.gpg -d", "alternative end": "openssl aes-256-cbc -pass pass:$ENCRYPTION_PASSWORD -in $GPG_DIR/secring.gpg.enc -out ~/secring.gpg -d"}], "meanbee/slack-jira-bot": [], "medallia/Word2VecJava": [], "MediaMath/strand": [{"start": "npm install -g bower web-component-tester", "end": "bower install", "alternative end": "gulp clean"}], "meanbee/docker-magento": [], "Medium/dynamite": [], "meanbee/docker-magento2": [], "MediaMath/t1-python": [{"start": "pip install setuptools -U", "end": "pycodestyle --exclude=vendor --ignore=E501,E225,W503,W504 --max-line-length=160 terminalone", "alternative end": "python setup.py test"}], "Medium/kew": [], "larsvanbraam/vue-transition-component": [{"start": "pip install --user mkdocs", "end": "yarn test", "alternative end": "codeclimate-test-reporter < coverage/lcov.info"}], "Medium/phantomjs": [], "Medium/soynode": [], "Medium/local-dynamo": [], "Medium/shepherd": [], "Medium/pbnj": [], "meltwater/proxymatic": [{"start": "pip install -r requirements.txt", "end": "make", "alternative end": "if [ \"$TRAVIS_TAG\" == \"\" ] && [ \"$TRAVIS_OS_NAME\" == \"linux\" ]; then pip install codecov; fi"}, {"start": "if [ \"$TRAVIS_TAG\" == \"\" ] && [ \"$TRAVIS_OS_NAME\" == \"linux\" ]; then pip install codecov; fi", "end": "if [ \"$TRAVIS_TAG\" == \"\" ] && [ \"$TRAVIS_OS_NAME\" == \"linux\" ]; then codecov; fi"}], "meltwater/secretary": [], "meltwater/rabbitio": [], "tinyclub/elinux": [{"start": "npm install gitbook-cli -g", "end": "make"}], "meltwater/elasticsearch-batch-percolator": [], "meltwater/lighter": [{"start": "if [ \"$TRAVIS_TAG\" == \"\" ] && [ \"$TRAVIS_OS_NAME\" == \"linux\" ]; then pip install codecov; fi", "end": "if [ \"$TRAVIS_TAG\" == \"\" ] && [ \"$TRAVIS_OS_NAME\" == \"linux\" ]; then codecov; fi"}], "mendix/docs": [], "meltwater/gen_rmq": [], "merixstudio/django-trench": [{"start": "pip install tox-travis", "end": "if [[ $TRAVIS_PYTHON_VERSION == '3.4' ]]; then export PY_VER=py34; fi", "alternative end": "if [[ $TRAVIS_PYTHON_VERSION == '3.5' ]]; then export PY_VER=py35; fi"}, {"start": "pip install codecov", "end": "codecov"}], "pierucci/heemod": [], "messagebird/go-rest-api": [], "messagebird/ruby-rest-api": [{"start": "gem install bundler -v '< 2'", "end": "2.6.5", "alternative end": "2.5.1"}], "mercadopago/devsite-docs": [{"start": "sudo apt-get update", "end": "git config --global user.name \"devsitebot\"", "alternative end": "git config --global user.email \"devsitebot@ml.com\""}], "messagebird/messagebird-nodejs": [], "messagebird/php-rest-api": [], "messagebird/pushprom": [], "mercadopago/dx-nodejs": [], "messagebird/csharp-rest-api": [], "messagebird/sachet": [], "mercadopago/px-ios": [{"start": "gem install xcpretty --no-rdoc --no-ri --no-document --quiet", "end": "pod cache clean --all", "alternative end": "pod repo update"}], "openworm/org.geppetto.core": [], "messagebird/python-rest-api": [{"start": "pip install mock==2.0", "end": "coverage run --source=messagebird -m unittest discover -s tests/", "alternative end": "coverage report --fail-under=80"}], "messagebird/java-rest-api": [], "metamx/druid-spark-batch": [], "metamx/extendedset": [], "metamx/java-util": [], "metamx/scala-util": [], "metamx/bytebuffer-collections": [], "mesosphere/iot-demo": [], "Metrological/maf3-sdk": [], "metomi/rose": [], "MewsSystems/eet": [], "metomi/isodatetime": [{"start": "pip3 install virtualenv", "end": "virtualenv -p python3 ~/venv", "alternative end": "source ~/venv/bin/activate"}, {"start": "pip install --upgrade pip setuptools", "end": "pycodestyle -v metomi/isodatetime", "alternative end": "if \"$RUN_COVERAGE\"; then\n  PY_CMD=\"coverage run\"\n  export COVERAGE_PROCESS_START=\"${TRAVIS_BUILD_DIR}/.coveragerc\"\n  export COVERAGE_FILE=\"${TRAVIS_BUILD_DIR}/.coverage\"\nelse\n  PY_CMD=\"python\"\nfi\n# NOTE: the way to handle long-living commands in the documentation is\n# travis_wait 40 coverage run -m isodatetime.tests.test_time_point\n# but it does not produce any output, which can be frustrating in case of errors.\n# So here we are using the approach documented in the issue\n# https://github.com/travis-ci/travis-ci/issues/4190.\n$PY_CMD setup.py test --pytest-args='--runslow' &\nTEST_PID=\"$!\"\nminutes=0\nlimit=50\nwhile ps -p \"${TEST_PID}\" >/dev/null 2>&1; do\n  echo -n -e \" \\b\" # never leave evidences!\n  if ((minutes == limit)); then\n    exit 1\n  fi\n  minutes=$((minutes + 1))\n  sleep 60\ndone\nwait \"${TEST_PID}\"\n"}], "SciTools/courses": [{"start": "pip install doctr", "end": "set -e", "alternative end": "./make.sh"}], "metomi/fcm": [{"start": "sudo apt update", "end": "cpanm 'Config::IniFiles' 'DBI' 'DBD::SQLite' 'XML::Parser'", "alternative end": "fcm test-battery -j 5"}], "mesosphere/reactjs-components": [{"start": "npm install -g npm@6.7", "end": "./install_react.sh", "alternative end": "REACT_VERSION=16.7"}], "metosin/compojure-api": [], "metosin/testit": [], "metosin/ring-http-response": [], "metova/thundercats": [], "BlinkID/blinkid-ios": [], "blinkinput/blinkinput-ios": [], "mesosphere/marathon": [], "MicroPyramid/django-blog-it": [{"start": "pip install -r requirements.txt", "end": "sleep 15", "alternative end": "psql -c 'create database test;' -U postgres"}], "MicroPyramid/django-mfa": [{"start": "pip install coveralls", "end": "coverage run --source=django_mfa  test_runner.py test", "alternative end": "coveralls"}], "MicroPyramid/django-simple-pagination": [{"start": "pip install coveralls", "end": "coverage run --source=simple_pagination  test_runner.py test", "alternative end": "coveralls"}], "blinkinput/blinkinput-android": [], "PDF417/pdf417-android": [], "BlinkID/blinkid-android": [], "PDF417/pdf417-ios": [], "MicroPyramid/MicroSite": [{"start": "pip install -r requirements.txt", "end": "sleep 15", "alternative end": "psql -c 'create database test;' -U postgres"}], "MicroPyramid/microurl": [{"start": "pip install coveralls", "end": "python setup.py test", "alternative end": "coverage run --source=microurl,tests setup.py test"}], "MicroPyramid/micro-finance": [{"start": "pip install -r requirements.txt", "end": "python manage.py test", "alternative end": "coverage run --source=micro_admin,core manage.py test"}], "MicroPyramid/Django-CRM": [{"start": "gem install sass", "end": "python manage.py test --keepdb", "alternative end": "coverage run --source=accounts,cases,common,contacts,leads,opportunity,tasks,invoices,events,teams,marketing manage.py test --keepdb --noinput"}], "MicroPyramid/django-simple-forum": [{"start": "pip install -r requirements.txt", "end": "coverage run --source=django_simple_forum  test_runner.py test", "alternative end": "coveralls"}], "MicroPyramid/Mongo-Slice": [{"start": "pip install -r requirements.txt", "end": "python manage.py test", "alternative end": "coverage run --source=mslice manage.py test"}], "mikamai/ruby-lol": [], "MicroPyramid/microsocial": [], "MicroPyramid/forex-python": [{"start": "pip install nose", "end": "nosetests  --with-coverage --cover-package=forex_python", "alternative end": "coveralls"}], "MicroPyramid/django-payu": [{"start": "pip install coveralls", "end": "python test_runner.py makemigrations", "alternative end": "python test_runner.py migrate"}], "RISCV-on-Microsemi-FPGA/FreeRTOS": [], "calabash/calabash-android": [], "Mindera/pm2-cookbook": [], "Mindera/Alicerce": [{"start": "gem install cocoapods", "end": "True", "alternative end": "Build + Test"}], "jnbraun/bcnn": [], "calabash/run_loop": [], "Minio/awesome-minio": [{"start": "gem install awesome_bot", "end": "awesome_bot README.md --allow-dupe --allow-ssl --allow-redirect -t 10"}], "mintel/pytest-localstack": [{"start": "pip install --upgrade pipenv", "end": "pipenv --version", "alternative end": "pipenv install --dev --pre codecov pytest-cov pytest-xdist"}], "Minio/minio-dotnet": [], "miraisolutions/xlconnect": [], "mirumee/ariadne": [{"start": "pip install -e .[asgi-file-uploads]", "end": "pytest --cov=ariadne --cov=tests", "alternative end": "codecov"}], "telstra/open-kilda": [], "mirumee/django-prices": [{"start": "pip install tox-travis codecov black==19.3b0", "end": "black --check .", "alternative end": "tox"}], "mirumee/saleor": [{"start": "pip install -U pip setuptools wheel", "end": "git clone https://github.com/NyanKiyoshi/pytest-django-queries-ci-tools.git --depth 1 ../queries-ci-tools", "alternative end": "if [ -n \"$DJANGO\" ]; then\n  cp -r templates/templated_email/compiled ./compiled;\n  nvm install 10;\n  npm i;\n  npm run build-emails;\n  DIFF=$(diff -q ./compiled templates/templated_email/compiled);\n  if [ \"$DIFF\" ]; then\n    echo \"Precompiled emails check failure - make sure you executed: npm run build-emails.\";\n    travis_terminate 1;\n  fi;\nfi;\n"}], "Azure/azure-sdk-for-node": [], "mirumee/django-prices-openexchangerates": [{"start": "pip install mypy tox-travis codecov", "end": "tox", "alternative end": "mypy django_prices_openexchangerates --ignore-missing-imports"}], "Azure/azure-sdk-for-php": [], "mirumee/google-measurement-protocol": [{"start": "pip install httmock mypy pytest pytest-cov", "end": "pytest --cov", "alternative end": "mypy google_measurement_protocol --ignore-missing-imports"}], "Azure/azure-sdk-for-ruby": [{"start": "gem install bundler -v 1.14.1", "end": "if [ \"$LATEST_RUNTIME\" == \"true\" ] ; then ./scripts/latest_runtime.sh ; fi", "alternative end": "if [ \"$INTEG_RECORDED\" == \"true\" ] ; then bundle install --gemfile=Gemfile && bundle exec rake arm:spec ; fi"}], "mirumee/django-images": [{"start": "pip install tox coveralls", "end": "tox -e $TOX_ENV", "alternative end": "tox -e $TOX_ENV -- coveralls $COVERALLS_OPTION"}], "Mirantis/kqueen": [{"start": "pip install -e \".[test]\"", "end": "pip check", "alternative end": "python3 -m flake8"}, {"start": "pip install -e \".[dev]\"", "end": "export prometheus_multiproc_dir=$(mktemp -d)", "alternative end": "sudo mkdir /var/log/kqueen-api"}, {"start": "pip3 install --editable .", "end": "python3 -m kqueen &", "alternative end": "sleep 2"}, {"start": "pip3 install --upgrade kqueen", "end": "./entrypoint.sh &", "alternative end": "sleep 2"}], "aspnet/Mvc": [{"start": "if test \"$TRAVIS_OS_NAME\" == \"osx\"; then brew update; brew install openssl; ln -s /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib /usr/local/lib/; ln -s /usr/local/opt/openssl/lib/libssl.1.0.0.dylib /usr/local/lib/; fi", "end": "./build.sh --ci"}], "mirumee/prices": [{"start": "pip install mypy pytest pytest-cov", "end": "pytest --cov", "alternative end": "mypy prices --ignore-missing-imports"}], "aspnet/Entropy": [{"start": "if test \"$TRAVIS_OS_NAME\" == \"osx\"; then brew update; brew install openssl nginx; ln -s /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib /usr/local/lib/; ln -s /usr/local/opt/openssl/lib/libssl.1.0.0.dylib /usr/local/lib/; else ./install-nginx.sh; fi", "end": "export PATH=\"$PATH:$HOME/nginxinstall/sbin/\"", "alternative end": "npm install -g bower"}, {"start": "npm install -g bower", "end": "master", "alternative end": "release"}], "mirumee/django-payments": [{"start": "pip install tox-travis codecov", "end": "tox"}], "FStarLang/FStar": [], "mirumee/satchless": [{"start": "pip install -e .", "end": "pytest --cov", "alternative end": "codecov"}], "mirego/phare": [], "mirego/MCUIViewLayout": [], "mirego/activerecord_json_validator": [], "Azure/azure-storage-node": [{"start": "npm install", "end": "5", "alternative end": "7"}], "MitocGroup/deep-framework": [{"start": "npm install chai", "end": "recink run unit -c recink-codeclimate -c recink-snyk"}], "AzureAD/azure-activedirectory-library-for-android": [], "MitocGroup/deep-microservices-todomvc": [], "mirego/ember-best-language": [], "AzureAD/azure-activedirectory-library-for-objc": [{"start": "gem install xcpretty -N", "end": "set -o pipefail", "alternative end": "./build.py --no-clean --targets $BUILD_TARGETS --show-build-settings"}], "mirego/emojimmy": [], "mittwald/servicegateway": [], "Microsoft/TypeScript": [{"start": "npm install", "end": "node_modules", "alternative end": "1"}], "mirego/MCUIImageAdvanced": [], "mirego/activerecord_sane_schema_dumper": [], "AzureAD/passport-azure-ad": [], "mirego/gaffe": [], "mirego/partisan": [], "MLSDev/AnimatedRecyclerView": [], "mixmaxhq/redfour": [], "mixpanel/mixpanel-ruby": [], "mixpanel/mixpanel-android": [], "thm-projects/arsnova-mobile": [{"start": "npm install -g grunt-cli", "end": "grunt jscs", "alternative end": "grunt jshint"}], "mobilejazz/Motis": [{"start": "brew update", "end": "xctool -project SampleProject/Motis.xcodeproj -scheme 'Motis' -configuration Release -sdk iphonesimulator test"}], "genivi/CANdevStudio": [], "jrieken/gulp-tsb": [{"start": "npm install typescript", "end": "gulp build", "alternative end": "npm run test"}], "mobilabsolutions/jenkins-ios": [], "OfficeDev/O365-Android-Start": [], "aspnet/SignalR-Redis": [{"start": "if test \"$TRAVIS_OS_NAME\" == \"osx\"; then brew update; brew install openssl; ln -s /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib /usr/local/lib/; ln -s /usr/local/opt/openssl/lib/libssl.1.0.0.dylib /usr/local/lib/; fi", "end": "./build.sh --quiet verify"}], "mollie/OpenCart": [], "mollie/laravel-mollie": [], "mollie/mollie-api-python": [], "Microsoft/bond": [], "mollie/Magento": [], "mollie/mollie-api-php": [], "mollie/mollie-api-node": [], "mollie/mollie-api-ruby": [], "aspnet/SignalR-ServiceBus": [{"start": "if test \"$TRAVIS_OS_NAME\" == \"osx\"; then brew update; brew install openssl; ln -s /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib /usr/local/lib/; ln -s /usr/local/opt/openssl/lib/libssl.1.0.0.dylib /usr/local/lib/; fi", "end": "./build.sh --quiet verify"}], "moltin/currency": [], "moltin/php-sdk": [], "mondora/ddp.js": [], "mondora/asteroid": [], "Microsoft/TouchDevelop": [], "moodlehq/moodle-docker": [], "moodlehq/moodle-local_codechecker": [], "Moove-it/sidekiq-scheduler": [], "Moove-it/rusen": [], "mozilla/addons": [{"start": "pip install -rrequirements/docs.txt", "end": "cd docs && make clean html linkcheck SPHINXOPTS='-nW'", "alternative end": "branch = main"}], "mParticle/mparticle-apple-sdk": [], "Z3Prover/z3": [], "mozilla/contribute.json": [{"start": "pip install flake8", "end": "flake8 app", "alternative end": "npm install"}], "ClearVolume/ClearVolume": [], "mozilla/mig": [{"start": "sudo apt-get update -qq", "end": "sudo rm -f /dev/random", "alternative end": "sudo mknod -m 0666 /dev/random c 1 9"}], "mozilla/iris": [{"start": "pip install tox", "end": "tox -e flake8", "alternative end": "Unit Tests"}, {"start": "pip install tox", "end": "tox -e config_default", "alternative end": "tox -e config_custom"}], "mozilla-services/data-pipeline": [{"start": "sudo apt-get update -qq", "end": "bash bin/build_pipeline_heka.sh", "alternative end": "cd build/heka"}], "Microsoft/TypeScript-Handbook": [], "infra-geo-ouverte/igo2": [{"start": "npm install -g gulp-cli", "end": "stable"}], "mozilla/grcov": [{"start": "pip3 install --disable-pip-version-check --quiet --no-cache-dir pre-commit", "end": "pre-commit run --all-files", "alternative end": "if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then sudo softwareupdate -i \"Command Line Tools (macOS High Sierra version 10.13) for Xcode-9.4\"; fi"}, {"start": "if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then brew cask uninstall --force oclint; fi", "end": "$CLANG_CXX --version", "alternative end": "if [ \"$TRAVIS_RUST_VERSION\" = \"nightly\" ] && [ -z \"$TRAVIS_TAG\" ]; then\n  export CARGO_INCREMENTAL=0;\n  export RUSTFLAGS=\"-Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort\";\n  export RUSTDOCFLAGS=\"-Cpanic=abort\";\nfi\n"}], "Microsoft/ApplicationInsights-iOS": [{"start": "gem install cocoapods --no-rdoc --no-ri --no-document --quiet", "end": "dCzA1+dtjKkHk2PK6RWBSE0Obgf0CvIejhXXH4Aba29zfVQg5Bv0yWJ34YHnPMFPA7+eyFrW2TqGqI7gA7L7Ju0RWHwu9Z0XayCcMpOCZVKTOSf/7SrAvtODKNzAT/S55HZOaj8yxK6l5a0cMGXfGM7j+NLdkjyba7ypQKsn0ug=", "alternative end": "change"}], "mdn/kumascript": [], "Microsoft/ApplicationInsights-Python": [{"start": "pip install persist-queue", "end": "python setup.py sdist", "alternative end": "python setup.py test"}], "Microsoft/ApplicationInsights-Ruby": [{"start": "gem install bundler -v 1.17.3", "end": "ruby-head", "alternative end": "bundle install"}], "mtrdesign/mtr-datepicker": [{"start": "npm install", "end": "node_modules/karma/bin/karma start karma.conf.js --single-run", "alternative end": "node_modules/grunt-cli/bin/grunt coverage"}], "mdn/webextensions-examples": [], "Microsoft/ApplicationInsights-JS": [], "mozilla-services/lua_sandbox_extensions": [], "Microsoft/ApplicationInsights-PHP": [], "mullvad/jsonrpc-client-rs": [], "Microsoft/ApplicationInsights-node.js": [{"start": "npm install -g npm@4.5.0", "end": "npm uninstall applicationinsights-native-metrics --save-dev", "alternative end": "if [ \"$TRAVIS_EXTENDED_METRICS\" = \"true\" ]; then npm install applicationinsights-native-metrics --save-optional || true; fi"}, {"start": "if [ \"$TRAVIS_EXTENDED_METRICS\" = \"true\" ]; then npm install applicationinsights-native-metrics --save-optional || true; fi", "end": "npm test", "alternative end": "if [ \"$TRAVIS_NODE_VERSION\" = \"12\" ]; then npm run functionaltest; fi"}], "mullvad/mullvadvpn-app": [{"start": "npm install -g npm", "end": "npm --version", "alternative end": "node --version"}, {"start": "sudo apt install tidy", "end": "curl -sSLO https://github.com/pinterest/ktlint/releases/download/0.37.0/ktlint &&\nchmod a+x ktlint &&\nsudo mv ktlint /usr/local/bin/\n", "alternative end": "cat >> $HOME/.cargo/config << EOF\n[target.aarch64-linux-android]\nar = \"/opt/android/android-ndk-r20/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android-ar\"\nlinker = \"/opt/android/android-ndk-r20/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang\"\n"}], "servo/devices": [], "Azure/azure-webjobs-sdk": [{"start": "if test \"$TRAVIS_OS_NAME\" == \"osx\"; then brew update; brew install openssl; ln -s /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib /usr/local/lib/; ln -s /usr/local/opt/openssl/lib/libssl.1.0.0.dylib /usr/local/lib/; fi", "end": "chmod a+x ./build.sh", "alternative end": "./build.sh"}], "mozilla-services/hindsight": [], "MicrosoftEdge/Status": [], "mozilla/bidpom": [{"start": "pip install tox", "end": "sh -e /etc/init.d/xvfb start", "alternative end": "tox"}], "Microsoft/PartsUnlimitedMRP": [], "Microsoft/rDSN": [{"start": "sudo apt-get install -y wget mono-xbuild libaio-dev", "end": "./run.sh format", "alternative end": "ulimit -c unlimited -S"}], "mundipagg/mundipagg-one-php": [], "mwaylabs/The-M-Project": [{"start": "npm install -g grunt-cli", "end": "sh init-repo.sh"}], "mxenabled/mx-react-components": [], "mwaylabs/generator-m-ionic": [], "mwaylabs/generator-m-ionic-demo": [{"start": "npm install -g bower", "end": "bower install", "alternative end": "False"}], "mxenabled/action_subscriber": [], "triplea-game/triplea": [{"start": "pip install ansible", "end": "$DEPLOY_PRERELEASE_STAGE/deploy-to-prerelease-servers/run || $REPORT_FAIL \"prerelease deployment\"", "alternative end": "DeployPrerelease"}, {"start": "pip install ansible", "end": "$DEPLOY_PROD_STAGE/deploy-prod2-servers/run || $REPORT_FAIL \"prod2 deployment\"", "alternative end": "Finish"}], "MycroftAI/adapt": [{"start": "pip install -r requirements.txt", "end": "python run_tests.py --fail-on-error"}], "kloiasoft/eventapis": [], "Microsoft/maker.js": [], "MycroftAI/docker-mycroft": [], "codelibs/fess": [], "MycroftAI/mycroft-core": [{"start": "sudo apt-get update -qq", "end": "export CC=\"gcc-4.8\"", "alternative end": "export TMPDIR=\"/tmp/${TRAVIS_PYTHON_VERSION}\""}], "OneNoteDev/Android-REST-API-Explorer": [], "nabto/unabto": [], "namics/generator-nitro": [], "NagiosEnterprises/nagioscore": [], "namshi/mockserver": [], "namshi/notificator": [{"start": "sudo apt-get update -qq", "end": "php vendor/bin/phpspec run --format=dot"}], "Azure/azure-storage-python": [{"start": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then brew update; fi", "end": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then python3 -m venv venv; fi", "alternative end": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then source venv/bin/activate; fi"}, {"start": "pip install -U pip", "end": "coverage run -m unittest discover", "alternative end": "coverage report"}], "Microsoft/tslint-microsoft-contrib": [], "nanoporetech/pomoxis": [{"start": "make install", "end": "echo \"No testing implemented\"", "alternative end": "if [[ \"$TRAVIS_PYTHON_VERSION\" == \"3.6\" ]]; then make docs; fi"}], "nanoporetech/tombo": [{"start": "pip install --upgrade pip setuptools wheel", "end": "echo \"No testing implemented\"", "alternative end": "cd docs"}], "Azure/vagrant-azure": [{"start": "gem install bundler -v 1.10.5", "end": "rubygems", "alternative end": "ThMTLeJ1E2dLLAK1AIokfE+0GyfCKwaAstxETI/qFkOwL21REi6dgTfPIrBpgmrYATb/YgkgIf6Zl46R7vx9/dtgIGBmX7AXT3zsR38P3zfOGy5PzHGGK72ZmkC5UFSBsnQl5J0qQsUEMQfEy2g7dwn1d9aFLKhvnFblNHt4x5c="}], "namshi/winston-graylog2": [{"start": "npm install", "end": "yarn lint", "alternative end": "yarn test"}], "philres/ngmlr": [], "namshi/jose": [], "Azure/azure-mobile-apps-node": [], "nanoporetech/medaka": [{"start": "sudo apt-get install -y python3-all-dev", "end": "make test", "alternative end": "make docs"}], "aspnet/WebHooks": [{"start": "if test \"$TRAVIS_OS_NAME\" == \"osx\"; then brew update; brew install openssl; ln -s /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib /usr/local/lib/; ln -s /usr/local/opt/openssl/lib/libssl.1.0.0.dylib /usr/local/lib/; fi", "end": "./build.sh"}], "namshi/cuzzle": [], "nanoporetech/scrappie": [{"start": "sudo apt-get install -y make libhdf5-7 libhdf5-dev libopenblas-base libopenblas-dev libcunit1-dev", "end": "gcc", "alternative end": "if [ \"${COVERITY_SCAN_BRANCH}\" != 1 ]; then mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Debug .. && make -j 4 && make test && cd .. ; fi"}], "nasa/Open-Source-Catalog": [{"start": "npm install", "end": "False"}], "aspnet/RazorTooling": [{"start": "if test \"$TRAVIS_OS_NAME\" == \"osx\"; then brew update; brew install openssl; ln -s /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib /usr/local/lib/; ln -s /usr/local/opt/openssl/lib/libssl.1.0.0.dylib /usr/local/lib/; fi", "end": "./build.sh --quiet verify"}], "vietnam-devs/coolstore-microservices": [], "mdolab/pyoptsparse": [{"start": "docker exec -it app /bin/bash -c \". \\$HOME/.bashrc_mdolab && pip install testflo==1.3.5\"", "end": "if [ \"$TRAVIS_PULL_REQUEST\" == \"false\" ]; then docker exec -it app /bin/bash -c \"cp -r \\$HOME/NLPQLP/* $NLPQLP_DIR/ && cp -r \\$HOME/SNOPT/* $SNOPT_DIR/\"; fi", "alternative end": "docker exec -it app /bin/bash -c \". \\$HOME/.bashrc_mdolab && cd $DOCKER_WORKING_DIR && pip install -e .\""}, {"start": "docker exec -it app /bin/bash -c \". \\$HOME/.bashrc_mdolab && cd $DOCKER_WORKING_DIR && pip install -e .\"", "end": "docker exec -it app /bin/bash -c \". \\$HOME/.bashrc_mdolab && cd $DOCKER_WORKING_DIR && testflo --pre_announce -v . --coverage --coverpkg pyoptsparse\"", "alternative end": "if [ \"$TRAVIS_PULL_REQUEST\" == \"false\" ]; then docker exec -it app /bin/bash -c \". \\$HOME/.bashrc_mdolab && pip install coveralls\"; docker exec -e COVERALLS_REPO_TOKEN=\"$COVERALLS_REPO_TOKEN\" -e TRAVIS_JOB_ID=\"$TRAVIS_JOB_ID\" -e TRAVIS_BRANCH=\"$TRAVIS_BRANCH\" -it app /bin/bash -c \". \\$HOME/.bashrc_mdolab && cd $DOCKER_WORKING_DIR && coveralls --rcfile=.coveragerc\"; fi"}], "OpenMDAO/OpenMDAO": [{"start": "echo \">>> Building python environment\";\necho \" >> Installing conda\";\necho \"  > Downloading miniconda\";\nwget \"https://repo.anaconda.com/miniconda/Miniconda${PY:0:1}-latest-Linux-x86_64.sh\" -O miniconda.sh;\nchmod +x miniconda.sh;\necho \"  > Installing miniconda\";\n./miniconda.sh -b  -p $HOME/miniconda;\nexport PATH=$HOME/miniconda/bin:$PATH;\n\necho \" >> Creating conda environment\";\nconda create --yes -n PY$PY python=$PY numpy=$NUMPY scipy=$SCIPY cython swig;\nsource $HOME/miniconda/bin/activate PY$PY;\n\npip install --upgrade pip;\n\nif [ \"$PETSc\" ]; then\n  echo \" >> Installing PETSc\";\n  conda install -c anaconda mpi4py --yes;\n  conda install -c conda-forge petsc=$PETSc petsc4py --yes;\nfi\n\nif [ \"$PYOPTSPARSE\" ]; then\n  echo \" >> Installing pyOptSparse\";\n  git clone -q https://github.com/OpenMDAO/build_pyoptsparse;\n\n  cd build_pyoptsparse;\n  chmod 755 ./build_pyoptsparse.sh;\n\n  if [ \"$SNOPT\" == \"7.7\" ] && [ \"$SNOPT_LOCATION_77\" ]; then\n    echo \"  > Secure copying SNOPT 7.7 over SSH\";\n    mkdir SNOPT;\n    scp -qr \"$SNOPT_LOCATION_77\" SNOPT;\n    ./build_pyoptsparse.sh -b \"$PYOPTSPARSE\" -s SNOPT/src -a;\n\n  elif [ \"$SNOPT\" == \"7.2\" ] && [ \"$SNOPT_LOCATION_72\" ]; then\n    echo \"  > Secure copying SNOPT 7.2 over SSH\";\n    mkdir SNOPT;\n    scp -qr \"$SNOPT_LOCATION_72\" SNOPT;\n    ./build_pyoptsparse.sh -b \"$PYOPTSPARSE\" -s SNOPT/source -a;\n\n  else\n    if [ \"$SNOPT\" ]; then\n      echo \"SNOPT version $SNOPT was requested but source is not available\";\n    fi\n    ./build_pyoptsparse.sh -b \"$PYOPTSPARSE\" -a;\n  fi\n\n  cd ..;\nfi\n\necho \" >> Installing optional packages for test coverage\";\npip install psutil objgraph git+https://github.com/mdolab/pyxdsm;\n", "end": "conda list", "alternative end": "export OMPI_MCA_btl=^openib"}, {"start": "if [ \"$UPLOAD_DOCS\" ]; then echo \" >> Installing forked version of coveralls\"; pip install git+https://github.com/swryan/coveralls-python@work;\ncoveralls --rcfile=../../.coveragerc --output=coveralls.json; SITE=`python -c 'import site; print(site.getsitepackages()[0])'`; sed \"s/${SITE//\\//\\\\/}\\///g\" < coveralls.json > coveralls-upd.json; coveralls --upload=coveralls-upd.json; fi", "end": "script", "alternative end": "True"}], "Microsoft/GSL": [{"start": "LLVM_INSTALL=${DEPS_DIR:?}/llvm/install\n# if in linux and compiler clang and llvm not installed\nif [[ \"${TRAVIS_OS_NAME:?}\" == \"linux\" && \"${CXX%%+*}\" == \"clang\" && -n \"$(ls -A ${LLVM_INSTALL:?})\" ]]; then\n  if   [[ \"${CXX}\" == \"clang++-3.6\" ]]; then LLVM_VERSION=\"3.6.2\";\n  elif [[ \"${CXX}\" == \"clang++-3.7\" ]]; then LLVM_VERSION=\"3.7.1\";\n  elif [[ \"${CXX}\" == \"clang++-3.8\" ]]; then LLVM_VERSION=\"3.8.1\";\n  elif [[ \"${CXX}\" == \"clang++-3.9\" ]]; then LLVM_VERSION=\"3.9.1\";\n  fi\n  LLVM_URL=\"http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz\"\n  LIBCXX_URL=\"http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz\"\n  LIBCXXABI_URL=\"http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz\"\n  mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi\n  travis_retry wget -O - ${LLVM_URL} | tar --strip-components=1 -xJ -C llvm\n  travis_retry wget -O - ${LIBCXX_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxx\n  travis_retry wget -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxxabi\n  (cd llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${LLVM_INSTALL})\n  (cd llvm/build/projects/libcxx && make install -j2)\n  (cd llvm/build/projects/libcxxabi && make install -j2)\n  export CXXFLAGS=\"-isystem ${LLVM_INSTALL}/include/c++/v1\"\n  export LDFLAGS=\"-L ${LLVM_INSTALL}/lib -l c++ -l c++abi\"\n  export LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH}:${LLVM_INSTALL}/lib\"\nfi\n", "end": "cd \"${TRAVIS_BUILD_DIR:?}\"\nmkdir build && cd build\nif [[ ${GSL_CXX_STANDARD:-} ]]; then\n  CMAKE_GEN_FLAGS=(\"-DGSL_CXX_STANDARD=$GSL_CXX_STANDARD\")\nfi\nCMAKE_GEN_FLAGS+=(\"-Wdev -Werror=dev --warn-uninitialized\")\n", "alternative end": "cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE:?} ${CMAKE_GEN_FLAGS[@]:?}"}], "npryce/konfig": [], "OpenMDAO/dymos": [{"start": "if [ \"$CACHED_ENV\" ]; then echo \"Using cached environment...\" export PATH=$HOME/miniconda/bin:$PATH; source $HOME/miniconda/bin/activate PY$PY; else echo \"Building python environment...\"; wget -q \"https://repo.continuum.io/miniconda/Miniconda${PY:0:1}-latest-Linux-x86_64.sh\" -O miniconda.sh; bash miniconda.sh -b -p $HOME/miniconda; source \"$HOME/miniconda/etc/profile.d/conda.sh\"; hash -r; conda config --set always_yes yes --set changeps1 no; conda update -q conda; conda info -a;\nconda create --yes -n PY$PY python=$PY; conda activate PY$PY; conda config --add channels conda-forge;\nconda install --yes cython sphinx mock swig pip numpy=1.18.1 scipy=1.4.1 mpi4py matplotlib; sudo apt-get install gfortran;\npip install --upgrade pip; pip install sqlitedict; pip install nose; pip install networkx; pip install testflo==1.3.6; pip install pyyaml; pip install coveralls; pip install --user travis-sphinx;\necho \"Install pyoptsparse and along with IPOPT\"; chmod 755 ./build_pyoptsparse_ipopt.sh; ./build_pyoptsparse_ipopt.sh;\nif [ \"$SNOPT_LOCATION\" ] && [ \"${PY:0:1}\" = \"3\" ]; then echo \"Install SNOPT\"; cd pyoptsparse/pyoptsparse/pySNOPT; scp -r \"$SNOPT_LOCATION\"; cd ../../../; pwd; fi\ngit clone https://github.com/OpenMDAO/MBI.git; cd MBI; python setup.py build install; cd ..;\nif [ \"$PETSc\" ]; then echo \" >> Installing parallel processing dependencies\"; conda install --yes petsc4py=$PETSc; fi\nfi", "end": "git clone https://github.com/OpenMDAO/OpenMDAO.git;", "alternative end": "cd OpenMDAO;"}, {"start": "pip install -e .[all];", "end": "cd ..;", "alternative end": "python -m pip install -e .;"}, {"start": "python -m pip install -e .;", "end": "conda list", "alternative end": "export LD_LIBRARY_PATH=/home/travis/ipopt/lib"}], "npryce/adr-tools": [], "npryce/krouton": [], "naver/pinpoint": [], "nayutaco/ptarmigan": [], "naver/egjs-flicking": [{"start": "npm install -g npm@latest", "end": "yarn global add greenkeeper-lockfile@1", "alternative end": "npm ci"}], "jdemetra/jdemetra-app": [], "RevolutionAnalytics/azureml": [], "Microsoft/PowerBI-JavaScript": [], "naver/egjs-infinitegrid": [{"start": "npm install", "end": "stable", "alternative end": "node_modules"}], "naver/egjs-axes": [{"start": "npm install", "end": "stable", "alternative end": "node_modules"}], "ncbi/robotframework-pageobjects": [{"start": "pip install .", "end": "nosetests -vs --with-xunit tests/test_unit.py tests/test_functional.py", "alternative end": "pypi"}], "Azure/azurefile-dockervolumedriver": [], "naver/egjs-persist": [{"start": "npm install", "end": "stable", "alternative end": "node_modules"}], "nccgroup/AWS-recipes": [{"start": "pip install -r requirements.txt", "end": "nosetests tests/IAM-policies.py", "alternative end": "nosetests tests/test-python.py"}], "Microsoft/TouchDevelop-backend": [], "Azure/packer-azure": [], "nccgroup/autopwn": [{"start": "pip install tox", "end": "tox -e $TOXENV", "alternative end": "chat.freenode.net#autopwn"}], "nearform/gammaray": [], "nccgroup/Scout2": [{"start": "pip install -r requirements.txt", "end": "nosetests --with-coverage tests/test-utils.py", "alternative end": "nosetests --with-coverage tests/test-rules-ruleset.py"}], "nccgroup/featherduster": [{"start": "pip install -U .", "end": "$TEST_RUN"}], "nearform/udaru": [], "nccgroup/wssip": [], "Microsoft/TypeScript-TmLanguage": [{"start": "npm install", "end": "1"}], "Microsoft/multiverso": [{"start": "sudo apt-get install -y libopenmpi-dev openmpi-bin build-essential", "end": "cd $TRAVIS_BUILD_DIR", "alternative end": "mkdir build && cd build && cmake .."}, {"start": "make && sudo make install", "end": "False", "alternative end": "gcc"}], "nearit/react-native-connectivity-status": [], "MicrosoftResearch/Azimuth": [{"start": "pip install .", "end": "nosetests azimuth/tests"}], "Nearsoft/jobs": [], "Azure/azure-mobile-apps-ios-client": [{"start": "xcrun simctl list", "end": "open -b com.apple.iphonesimulator", "alternative end": "set -o pipefail"}], "Microsoft/Git-Credential-Manager-for-Mac-and-Linux": [], "Microsoft/oauth2-useragent": [], "Microsoft/vscode-go": [{"start": "if [[ $TRAVIS_OS_NAME == \"linux\" ]]; then export DISPLAY=:99.0; Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 & sleep 3; sudo apt-get update && sudo apt-get install -y libsecret-1-0; fi", "end": "TRAVIS_NODE_VERSION=\"8\";", "alternative end": "rm -rf ~/.nvm;"}, {"start": "npm install", "end": "npm run vscode:prepublish", "alternative end": "go get -u -v github.com/acroca/go-symbols"}], "Microsoft/vscode-node-debug": [], "nebulasio/go-nebulas": [{"start": "sudo apt-get update -qq", "end": "go get github.com/tebeka/go2xunit", "alternative end": "export GO111MODULE=on"}], "opencypher/openCypher": [], "NeowayLabs/cloud-machine": [], "NeowayLabs/klb": [], "Microsoft/vscode-mono-debug": [{"start": "npm install", "end": "npm test"}], "NeowayLabs/neosearch": [{"start": "sudo pip install codecov", "end": "codecov", "alternative end": "tiago.natel@neoway.com.br"}], "NerdWalletOSS/shepherd": [], "Microsoft/vscode-jshint": [{"start": "npm install", "end": "npm run compile"}], "nansencenter/nansat": [], "NTAP/warpcore": [], "NTAP/quant": [], "NetCentric/accesscontroltool": [], "Microsoft/PowerBI-Angular": [], "netcosports/Gnomon": [{"start": "brew install jq", "end": "SCHEME=iOSTests", "alternative end": "SCHEME=tvOSTests"}, {"start": "xcrun simctl list", "end": "set -o pipefail && env NSUnbufferedIO=YES xcodebuild -workspace Tests.xcworkspace -scheme \"$SCHEME\" -destination \"$DESTINATION\" build test | xcpretty"}], "netcosports/Astrolabe": [{"start": "brew install jq", "end": "SCHEME=iOSTests", "alternative end": "SCHEME=tvOSTests"}, {"start": "xcrun simctl list", "end": "set -o pipefail && env NSUnbufferedIO=YES xcodebuild -workspace Demo.xcworkspace -scheme \"$SCHEME\" -destination \"$DESTINATION\" build test | xcpretty"}], "deis/docker-go-dev": [], "apache/reef": [], "Microsoft/PowerShell-DSC-for-Linux": [{"start": "sudo make install", "end": "cd ../", "alternative end": "sudo make reg"}], "Netflix/sureal": [{"start": "pip install tox-travis", "end": "tox"}], "Netflix/go-expect": [], "Netflix/concurrency-limits": [], "Netflix/pygenie": [{"start": "pip install flake8 tox-travis", "end": "flake8 . --count --select=E901,E999,F821,F822,F823 --show-source --statistics", "alternative end": "tox"}], "Microsoft/hdfs-mount": [], "Netflix/chaosmonkey": [], "Netflix/genie": [], "Netflix/rend": [], "Netflix/vmaf": [{"start": "pip3 install meson", "end": "export CC=\"ccache $CC\" CXX=\"ccache $CXX\"", "alternative end": "ccache -s"}, {"start": "pip3 install tox-travis", "end": "make -C third_party/libsvm -j lib", "alternative end": "tox -c python/ -- -v -p no:warnings -m 'main or lib' --doctest-modules"}, {"start": "make --quiet -j $(nproc) && sudo make install", "end": "curl https://gist.githubusercontent.com/1480c1/0c4575da638ef6e8203feffd0597de16/raw/akiyo_cif.tar.xz.base64 | base64 -d | tar xJ", "alternative end": "export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib/x86_64-linux-gnu"}], "Netflix/spectator-go": [], "Netflix/hollow": [], "Netflix/repokid": [{"start": "pip install .", "end": "coverage run --source repokid -m py.test", "alternative end": "bandit -r . -ll -ii -x repokid/tests/"}], "Netflix/conductor": [], "Netflix/unleash": [], "neueda/jetbrains-plugin-graph-database-support": [], "Netflix/fast_jsonapi": [], "neuland/spring-jade4j": [], "restify/enroute": [{"start": "npm install -g yarn", "end": "make all", "alternative end": "make report-coverage"}], "Netflix/runtime-health": [], "Netflix/dynomite-manager": [], "Netflix/ndbench": [], "Netflix/Nicobar": [], "Netflix/lemur": [{"start": "npm install -g bower", "end": "make test", "alternative end": "bandit -r . -ll -ii -x lemur/tests/,docs"}], "Microsoft/openscraping-lib-csharp": [], "Netflix/iceberg": [], "Netflix/flamescope": [{"start": "npm install --global yarn", "end": "yarn install", "alternative end": "npm run webpack"}, {"start": "pip install -r requirements.txt", "end": "flake8 app", "alternative end": "python"}, {"start": "pip install -r requirements.txt", "end": "python -m pytest"}], "OfficeDev/Office-Add-in-Nodejs-ServerAuth": [], "OmniSharp/omnisharp-vscode": [{"start": "sudo apt-get install apt-transport-https", "end": "ubuntu-toolchain-r-test", "alternative end": "g++-4.9"}], "Netflix/pollyjs": [], "newrelic/infra-integrations-sdk": [], "Netflix/bless": [{"start": "pip install coveralls", "end": "make develop", "alternative end": "make lint"}], "Netflix/Fenzo": [], "Microsoft/ApplicationInsights-Go": [], "newscorpaus/consigliere": [], "Netflix/photon": [], "Netflix/security_monkey": [{"start": "pip install pip --upgrade", "end": "monkey db upgrade", "alternative end": "monkey amazon_accounts"}, {"start": "pip install bandit", "end": "coverage run -a -m py.test security_monkey/tests/auditors || exit 1", "alternative end": "coverage run -a -m py.test security_monkey/tests/watchers || exit 1"}], "nexB/scancode-server": [{"start": "pip3 install coala-bears --pre", "end": "coala --ci", "alternative end": "2.7"}, {"start": "pip install -r requirements.txt", "end": "python manage.py migrate", "alternative end": "python manage.py test"}], "Azure/deco": [{"start": "npm install -g npm@^2", "end": "bower install", "alternative end": "xvfb-run ember electron:test"}], "Netflix/netflix-graph": [], "Netflix/iep": [], "nexB/aboutcode": [{"start": "pip install Sphinx sphinx_rtd_theme doc8", "end": "chmod +x ./docs/scripts/doc8_style_check.sh", "alternative end": "cd docs"}], "nexB/aboutcode-toolkit": [], "Netflix-Skunkworks/cloudaux": [{"start": "pip install tox-travis coveralls", "end": "tox", "alternative end": "coveralls"}], "Netflix/dyno": [], "nexB/vulnerablecode": [{"start": "pip install -r requirements.txt", "end": "SECRET_KEY=\"i1bn=oly)w*2yl-5yc&f!vvgt)p)fh3_2$r#spa!*sw36f5ov7\"", "alternative end": "GH_TOKEN=\"dummygithubtoken\""}], "Netflix/pytheas": [], "nexB/scancode-toolkit": [{"start": "pip install -r requirements-doc.txt", "end": "sphinx-build -E source build", "alternative end": "./scripts/doc8_style_check.sh"}], "neXenio/BLE-Indoor-Positioning": [], "Netflix/osstracker": [], "Netflix/spectator": [], "Netflix/msl": [], "powershell/platyPS": [{"start": "sudo apt-get update", "end": "pwsh ./build.ps1", "alternative end": "dotnet test ./test/Markdown.MAML.Test"}], "Microsoft/vscode-nls": [{"start": "npm install", "end": "npm run compile", "alternative end": "npm test"}], "Netflix/AWSObjectMapper": [], "Netflix/Raigad": [], "Netflix/falcor-router": [{"start": "npm install -g npm@5", "end": "npm test", "alternative end": "npm run lint"}], "Netflix/falcor-json-graph": [{"start": "npm install -g npm@5", "end": "npm test", "alternative end": "npm run flow"}], "Netflix/falcor": [], "Netflix/ember-nf-graph": [], "Netflix/vector": [], "Netflix/hubcommander": [{"start": "pip install -e .", "end": "py.test -s tests", "alternative end": "./build_docker.sh"}], "Nexmo/nexmo-cli": [{"start": "npm install -g codecov", "end": "npm run coverage", "alternative end": "codecov"}], "Netflix/dyno-queues": [], "Microsoft/Availability-Monitor-for-Kafka": [], "Microsoft/thrifty": [], "nexogen-international/Nexogen.Libraries.Metrics": [], "Netflix/atlas": [], "Netflix-Skunkworks/swag-client": [{"start": "pip install --upgrade pip", "end": "python setup.py develop", "alternative end": "coverage run -m py.test || exit 1"}], "Netflix/titus-api-definitions": [], "ozoneplatform/owf-framework": [{"start": "not valid", "stop": "not valid"}], "Netflix/metacat": [], "netgen/NetgenAdminUIBundle": [], "Microsoft/vscode-nls-dev": [{"start": "npm install", "end": "npm run compile", "alternative end": "npm test"}], "Nextdoor/ndkale": [{"start": "pip install flake8 && flake8 kale example --max-line-length 100 --ignore=E731,E402", "end": "python setup.py test", "alternative end": "pypi"}], "nfl/glitr": [], "Microsoft/Mobius": [{"start": "sudo apt-get install xsltproc", "end": "nuget install NUnit.Runners -Version 3.0.0 -OutputDirectory testrunner", "alternative end": "wget http://archive.apache.org/dist/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz"}], "nfl/react-metrics": [], "netguru/checker": [], "nfl/react-helmet": [], "nfl/react-wildcat": [], "nfl/react-gpt": [], "nginxinc/nginx-asg-sync": [], "Microsoft/SCXcore": [], "Microsoft/pal": [], "nginxinc/kubernetes-ingress": [], "Microsoft/azure-tools-for-java": [], "nginxinc/crossplane": [{"start": "pip install tox-travis", "end": "tox"}], "netguru/ember-socket-guru": [{"start": "npm install -g bower", "end": "bower --version", "alternative end": "export DISPLAY=:99.0"}, {"start": "npm install", "end": "bower install", "alternative end": "ember try:one $EMBER_TRY_SCENARIO test --skip-cleanup"}], "netguru/spree_products_qa": [], "netguru/react_webpack_rails": [{"start": "sudo apt-get update -qq", "end": "bundle exec rake setup:$TEST_SUITE", "alternative end": "export CHROME_BIN=chromium-browser"}], "netguru/decent_decoration": [], "Azure/azure-storage-ruby": [{"start": "if [[ $RUBY_VERSION == ruby-2.0* ]] || [[ $RUBY_VERSION == ruby-2.1* ]] || [[ $RUBY_VERSION == ruby-2.2* ]]  ; then\n  gem install bundler -v '< 2';\nelse\n  gem install bundler\nfi\n", "end": "bundle exec rake test:unit", "alternative end": "if [ \"$TRAVIS_SECURE_ENV_VARS\" == \"true\" ] ; then rake test:integration ; fi"}], "netguru/ember-cli-deploy-rollbar": [{"start": "npm install -g npm@^2", "end": "bower install", "alternative end": "npm test"}], "nethesis/icaro": [{"start": "npm install && npm run build", "end": "cd dist && tar cvzf ../sun-ui.tar.gz .", "alternative end": "node_js"}, {"start": "npm install && npm run build", "end": "cd dist/ && tar cvzf ../wings.tar.gz .", "alternative end": "node_js"}, {"start": "npm install && npm run build", "end": "cd dist/ && tar cvzf ../ade-ui.tar.gz .", "alternative end": "minimal"}], "microsoftgraph/msgraph-sdk-android": [], "Microsoft/pxt-microbit": [], "ni/webvi-examples": [], "flot/flot": [{"start": "npm install -g greenkeeper-lockfile@1", "end": "npm config set //registry.npmjs.org/:_authToken=$NPM_TOKEN", "alternative end": "greenkeeper-lockfile-update"}, {"start": "npm install", "end": "npm test", "alternative end": "npm run build"}], "ni/VireoSDK": [{"start": "npm install npm@latest -g", "end": "node -v", "alternative end": "npm -v"}, {"start": "npm install", "end": "nohup python -m httpbin.core --port 64526 --host 0.0.0.0 &", "alternative end": "gcc -v"}], "Microsoft/NoSQLProvider": [], "NieuwlandGeo/SLDReader": [], "ni/nimi-python": [{"start": "travis_retry sudo apt-get -y install python3-pip", "end": "tox -c tox-travis.ini", "alternative end": "travis_retry codecov --flags codegenunittests --file codegen.xml"}], "Microsoft/types-publisher": [], "ni/nifpga-python": [{"start": "pip install flake8", "end": "flake8 nifpga --ignore=E501,W503 ", "alternative end": "nosetests --with-doctest"}], "nilenso/ashoka-survey-web": [], "Nike-Inc/cerberus": [], "Nike-Inc/Elevate": [{"start": "gem update bundler", "end": "set -o pipefail", "alternative end": "rvm list"}], "Nike-Inc/Willow": [{"start": "gem update bundler", "end": "set -o pipefail", "alternative end": "rvm list"}], "Nike-Inc/riposte": [], "niteshpatel/ministocks": [], "Microsoft/PowerBI-Cli": [{"start": "npm install -g typings typescript", "end": "npm link typescript", "alternative end": "typings install"}], "Microsoft/PowerBI-Node": [], "bumps/bumps": [{"start": "pip install matplotlib numpy nose scipy six sklearn", "end": "./test.py"}], "usnistgov/fipy": [{"start": "if [[ $TRAVIS_OS_NAME = \"linux\" ]]; then sudo apt-get update; fi", "end": "PY3K=$(echo \"$TRAVIS_PYTHON_VERSION >= 3.0\" | bc)", "alternative end": "if [[ $TRAVIS_OS_NAME = \"linux\" ]]; then export MINICONDA_OS_NAME=Linux; elif [[ $TRAVIS_OS_NAME = \"osx\" ]]; then export MINICONDA_OS_NAME=MacOSX; fi"}, {"start": "pip install scikit-fmm", "end": "python setup.py install", "alternative end": "if [[ $TRAVIS_OS_NAME = \"linux\" ]]; then export DISPLAY=:99.0; sh -e /etc/init.d/xvfb start; sleep 3; fi"}], "Azure/azure-arm-validator": [{"start": "npm install -g grunt-cli", "end": "4.1.2", "alternative end": "True"}], "NLnetLabs/ldns": [], "NLnetLabs/unbound": [], "CVMix/CVMix-src": [], "Microsoft/node-jsonc-parser": [], "NOAA-GFDL/MOM6": [], "NOAA-ORR-ERD/gridded": [{"start": "pip install -e . --no-deps", "end": "pytest --pyargs gridded"}], "NOAA-GFDL/FMS": [], "nohana/Laevatein": [], "Azure/meta-azure-service-broker": [], "Nokia/moler": [{"start": "sudo apt-get -y install sshpass", "end": "python -V", "alternative end": "cat /etc/passwd | grep home"}], "Nokia/kong-oidc": [], "microsoftgraph/android-java-snippets-sample": [], "Nokia/danm": [], "laurent-clouet/sheepit-client": [], "Microsoft/vscode-uri": [], "nortal/j-road": [], "open-eid/SiVa": [], "Microsoft/WhoisParsers": [], "NordicSemiconductor/nRF-IEEE-802.15.4-radio-driver": [], "Microsoft/Loop-Sample-Trips-Android": [], "poroh/ersip": [], "EduCaMa/Showcase": [{"start": "npm install -g @angular/cli@1.0.3", "end": "nvm install $NODE_VERSION", "alternative end": "(cd backend && ./build.sh) && (cd api && ./build.sh) && (cd frontend && ./build.sh) && (cd acceptance-tests && ./build.sh && ./upload-serenity-reports.sh) && (cd services/flightinformation && ./build.sh) && (cd services/educama-supplier-simulator-backend && ./build.sh) && (cd services/educama-supplier-simulator-frontend && ./build.sh)"}], "testIT-WebTester/webtester-core": [], "Microsoft/vscode-json-languageservice": [], "Microsoft/vscode-css-languageservice": [], "Azure/custom-script-extension-linux": [{"start": "sudo apt-get update -qq", "end": "curl -sL https://deb.nodesource.com/setup_6.x | sudo bash -", "alternative end": "sudo apt-get install -qqy nodejs"}, {"start": "sudo apt-get install -qqy nodejs", "end": "go get -u golang.org/x/lint/golint", "alternative end": "go get -u github.com/ahmetalpbalkan/govvv"}], "Nordstrom/chefdk_bootstrap": [], "Nordstrom/serverless-artillery": [], "NoRedInk/rspec-retry": [], "Microsoft/malmo": [], "NoRedInk/elm-assets-loader": [{"start": "npm install elm@$ELM_VERSION --no-shrinkwrap", "end": "npm-install-peers", "alternative end": "./node_modules/.bin/elm --version"}], "Microsoft/powerbi-models": [], "NoRedInk/elm-ops-tooling": [{"start": "pip install -r requirements.txt", "end": "python -m pytest tests/ *.py -v --doctest-modules", "alternative end": "False"}], "NoRedInk/json-elm-schema": [{"start": "npm install -g elm@0.18.0 elm-test elm-verify-examples", "end": "elm-package install --yes", "alternative end": "pushd example && elm-package install --yes && popd"}], "NoRedInk/jetpack": [], "Microsoft/projection-grid": [], "Azure/blobxfer": [{"start": "travis_retry pip install --upgrade pip", "end": "tox"}], "WISDEM/FLORIS": [{"start": "pip install -r requirements.txt", "end": "pytest"}], "Microsoft/PowerBI-visuals-sampleBarChart": [{"start": "npm install", "end": "npm run lint", "alternative end": "npm run test"}], "npm/fs-write-stream-atomic": [], "npm/write-file-atomic": [], "npm/slide-flow-control": [], "npm/node-which": [], "Microsoft/satcheljs": [], "npm/hosted-git-info": [], "npm/tink": [], "nttcom/eclcli": [{"start": "pip install -e .", "end": "pip freeze", "alternative end": "2.7"}], "npm/read-package-tree": [], "npm/lockfile": [], "npm/init-package-json": [], "npm/nopt": [], "Azure/azure-data-lake-store-python": [{"start": "pip install -U setuptools pip", "end": "python setup.py develop", "alternative end": "pip install coveralls pytest-cov"}, {"start": "pip install coveralls pytest-cov", "end": "py.test --maxfail=100 -vvv --doctest-modules --cov=azure/datalake/store --pyargs azure.datalake.store tests", "alternative end": "coveralls"}], "mspnp/template-building-blocks": [], "npm/wombat-cli": [], "npm/npm-registry-client": [{"start": "npm install -g npm@latest", "end": "8", "alternative end": "npm install -g npm@latest"}, {"start": "npm install -g npm@latest", "end": "6", "alternative end": "npm install -g npm@latest"}, {"start": "npm install -g npm@latest", "end": "4", "alternative end": "npm install -g npm@5"}, {"start": "npm install -g npm@5", "end": "npm test", "alternative end": "False"}], "npm/npm-registry-mock": [{"start": "npm install -g npm@latest", "end": "False"}], "npm/fstream-npm": [{"start": "npm install -g npm", "end": "npm test", "alternative end": "npm-inc:kRqQjto7YbINqHPb1X6nS3g8"}], "npm/read-package-json": [], "npm/node-semver": [], "Microsoft/omi": [], "npm/npm-registry-couchapp": [], "npm/validate-npm-package-name": [], "npm/npmlog": [{"start": "npm install -g npm", "end": "npm test", "alternative end": "npm-inc:kRqQjto7YbINqHPb1X6nS3g8"}], "npm/npme-installer": [{"start": "npm install --ignore-scripts", "end": "0.10"}], "BlackArch/blackarch": [{"start": "if [[ ! $(command -v pkgcheck) ]]; then pip install pkgcheck-arch --user; fi;", "end": "bash run-tests.sh"}], "npm/npm-remote-ls": [], "npm/multi-fs": [], "Azure/batch-shipyard": [{"start": "travis_retry pip install --upgrade pip", "end": "pip list --format=columns --outdated", "alternative end": "flake8 --select F,E,W --ignore W504 --statistics shipyard.py convoy/*.py"}], "nulogy/Gorgon": [], "npm/marky-markdown": [{"start": "sudo apt-get update -qq", "end": "sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 50"}], "Microsoft/msphpsql": [], "npm/normalize-package-data": [], "npm/read-installed": [{"start": "npm install -g npm@latest", "end": "10", "alternative end": "8"}], "npm/fstream": [], "npm/node-tar": [], "npm/osenv": [], "npm/ndm": [], "nuodb/nuodb-php-pdo": [{"start": "sudo apt update", "end": "ls -al $(php-config --extension-dir)", "alternative end": "echo madvise | sudo tee /sys/kernel/mm/transparent_hugepage/enabled >/dev/null"}, {"start": "make install", "end": "php run-test.php -m tests/*.phpt", "alternative end": "php tests-performance/*.php"}], "npm/npm-package-arg": [], "nuodb/migration-tools": [], "nuodb/nuodb-dotnet": [], "npm/npm-registry-fetch": [], "nuodb/nuodb-python": [{"start": "make install", "end": "if [ \"$NUO_ADD_DOMAIN_PASS\" = yes ]; then printf '\\ndomainPassword = bird\\n' | sudo tee -a \"$NUODB_HOME\"/etc/default.properties >/dev/null; fi", "alternative end": "if [ \"$NUO_START_AGENT\" = yes ]; then sudo service nuoagent start; fi"}], "aspnet/EntityFramework.Tools": [{"start": "if test \"$TRAVIS_OS_NAME\" == \"osx\"; then brew update; brew install openssl; ln -s /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib /usr/local/lib/; ln -s /usr/local/opt/openssl/lib/libssl.1.0.0.dylib /usr/local/lib/; fi", "end": "./build.sh"}], "Microsoft/vscode-html-languageservice": [], "nuxeo/nuxeo-drive": [], "arkenio/gogeta": [], "EmbeddedRPC/erpc": [{"start": "if [ $TRAVIS_OS_NAME == linux ]; then sudo apt-get update -qq; fi", "end": "if [ $TRAVIS_OS_NAME == linux ]; then pyenv install 2.7.12 ; pyenv global 2.7.12; fi", "alternative end": "if [ $TRAVIS_OS_NAME == osx ]; then brew update; fi"}, {"start": "if [ $TRAVIS_OS_NAME == osx ]; then brew update; fi", "end": "if [ $TRAVIS_OS_NAME == osx ]; then curl \"https://bootstrap.pypa.io/get-pip.py\" | sudo python; fi", "alternative end": "if [ $TRAVIS_OS_NAME == osx ]; then sudo pip install tornado; fi"}, {"start": "if [ $TRAVIS_OS_NAME == osx ]; then sudo pip install tornado; fi", "end": "make all", "alternative end": "pushd erpcgen/test ; py.test ; popd"}], "nvdla/doc": [{"start": "pip install ghp-import sphinx", "end": "git fetch origin2 -f master:gh-pages-x", "alternative end": "sphinx-build -b html -d build/doctrees   doc build/html"}], "Azure/toketi-iothubreact": [], "nylas/nylas-nodejs": [], "NVIDIA/libnvidia-container": [{"start": "sudo apt-get update", "end": "build", "alternative end": "CC=gcc make"}, {"start": "sudo apt-get install -y --no-install-recommends cppcheck", "end": "cppcheck --std=posix --inconclusive --enable=all src/*.c src/*.h", "alternative end": "scan"}], "nylas/sync-engine": [{"start": "sudo -H pip install flake8", "end": "sudo -H ./setup.sh | awk '{ print strftime(\"%Y-%m-%d %H:%M:%S\"), $0; fflush(); }'", "alternative end": "flake8 --select=F inbox"}], "nylas/nylas-ruby": [{"start": "gem install bundler -v '< 2'", "end": "2.5", "alternative end": "gemfiles/Gemfile.rails6"}], "nylas/mypy-tools": [{"start": "pip install -r requirements.txt", "end": "pytest"}], "Microsoft/ReSub": [], "Microsoft/LightGBM": [], "vespa-engine/documentation": [], "ObeoNetwork/M2Doc": [], "ObeoNetwork/BPMN-Designer": [], "ObeoNetwork/SysML-Designer": [], "mbats/arduino": [], "ObeoNetwork/UML-Designer": [{"start": "not valid", "stop": "not valid"}], "ImAlsoGreg/servant-reflex": [], "bridgedotnet/Bridge": [{"start": "if [ ! \"$SKIP_CLIENT_TESTS\" == \"true\" ]; then cd $TRAVIS_BUILD_DIR/.build/ci; npm install; fi", "end": "if [[ ! \"$SKIP_XBUILD\" == \"true\" ]]; then cd $TRAVIS_BUILD_DIR; xbuild /p:Configuration=Release Bridge.sln; else echo \"Skipping XBuild as SKIP_XBUILD\"; fi", "alternative end": "if [[ ! \"$SKIP_SERVER_TESTS\" == \"true\" && $TRAVIS_TEST_RESULT = 0 ]]; then cd $TRAVIS_BUILD_DIR; mono ./packages/NUnit.ConsoleRunner.*/tools/nunit*-console.exe ./Compiler/TranslatorTests/bin/Release/Bridge.Translator.Tests.dll; else echo \"Skipping NUnit tests as SKIP_SERVER_TESTS or build failed\"; fi"}], "reflex-frp/reflex": [{"start": "if [ \"$TRAVIS_OS_NAME\" = \"linux\" ]; then\n  sudo add-apt-repository -y ppa:hvr/ghcjs;\n  curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | sudo apt-key add -\n  sudo apt-add-repository 'https://deb.nodesource.com/node_8.x xenial main'\n  sudo apt-get update;\n  sudo apt-get install $CC cabal-install-3.0 nodejs;\nfi\n", "end": "HC=$(echo \"/opt/$CC/bin/ghc\" | sed 's/-/\\//')", "alternative end": "WITHCOMPILER=\"-w $HC\""}, {"start": "if $GHCJS ; then sudo apt-get install -y ghc-8.4.4 ; fi", "end": "if $GHCJS ; then PATH=\"/opt/ghc/8.4.4/bin:$PATH\" ; fi", "alternative end": "HCPKG=\"$HC-pkg\""}], "tomsmalley/semantic-reflex": [], "Azure/msrest-for-python": [{"start": "pip install tox tox-virtualenv-no-download", "end": "tox", "alternative end": "bash <(curl -s https://codecov.io/bash) -e TOXENV -f $TRAVIS_BUILD_DIR/coverage.xml"}, {"start": "npm install \"@microsoft.azure/autorest.testserver\"", "end": "popd", "alternative end": "MyPy"}, {"start": "pip install -r dev_requirements.txt", "end": "mypy msrest", "alternative end": "python -c 'import typing; typing.TYPE_CHECKING = True; import msrest'"}, {"start": "pip install tox tox-virtualenv-no-download", "end": "tox", "alternative end": "bash <(curl -s https://codecov.io/bash) -e TOXENV -f $TRAVIS_BUILD_DIR/coverage.xml"}, {"start": "pip install tox tox-virtualenv-no-download", "end": "tox", "alternative end": "bash <(curl -s https://codecov.io/bash) -e TOXENV -f $TRAVIS_BUILD_DIR/coverage.xml"}, {"start": "pip install tox tox-virtualenv-no-download", "end": "tox", "alternative end": "bash <(curl -s https://codecov.io/bash) -e TOXENV -f $TRAVIS_BUILD_DIR/coverage.xml"}, {"start": "pip install tox tox-virtualenv-no-download", "end": "tox", "alternative end": "bash <(curl -s https://codecov.io/bash) -e TOXENV -f $TRAVIS_BUILD_DIR/coverage.xml"}, {"start": "pip install tox tox-virtualenv-no-download", "end": "tox", "alternative end": "bash <(curl -s https://codecov.io/bash) -e TOXENV -f $TRAVIS_BUILD_DIR/coverage.xml"}, {"start": "npm install \"@microsoft.azure/autorest.testserver\"", "end": "popd", "alternative end": "pip install tox tox-virtualenv-no-download"}, {"start": "pip install tox tox-virtualenv-no-download", "end": "tox", "alternative end": "bash <(curl -s https://codecov.io/bash) -e TOXENV -f $TRAVIS_BUILD_DIR/coverage.xml"}, {"start": "npm install \"@microsoft.azure/autorest.testserver\"", "end": "popd", "alternative end": "pip install tox tox-virtualenv-no-download"}, {"start": "pip install tox tox-virtualenv-no-download", "end": "tox", "alternative end": "bash <(curl -s https://codecov.io/bash) -e TOXENV -f $TRAVIS_BUILD_DIR/coverage.xml"}, {"start": "npm install \"@microsoft.azure/autorest.testserver\"", "end": "popd", "alternative end": "pip install tox tox-virtualenv-no-download"}, {"start": "pip install tox tox-virtualenv-no-download", "end": "tox", "alternative end": "bash <(curl -s https://codecov.io/bash) -e TOXENV -f $TRAVIS_BUILD_DIR/coverage.xml"}, {"start": "npm install \"@microsoft.azure/autorest.testserver\"", "end": "popd", "alternative end": "pip install tox tox-virtualenv-no-download"}, {"start": "pip install tox tox-virtualenv-no-download", "end": "tox", "alternative end": "bash <(curl -s https://codecov.io/bash) -e TOXENV -f $TRAVIS_BUILD_DIR/coverage.xml"}, {"start": "npm install \"@microsoft.azure/autorest.testserver\"", "end": "popd", "alternative end": "pip install tox tox-virtualenv-no-download"}, {"start": "pip install tox tox-virtualenv-no-download", "end": "tox", "alternative end": "bash <(curl -s https://codecov.io/bash) -e TOXENV -f $TRAVIS_BUILD_DIR/coverage.xml"}], "bridgedotnet/Bridge.Newtonsoft.Json": [{"start": "if [ ! \"$SKIP_CLIENT_TESTS\" == \"true\" ]; then cd $TRAVIS_BUILD_DIR/.build/ci; npm install; fi", "end": "if [[ ! \"$SKIP_XBUILD\" == \"true\" ]]; then cd $TRAVIS_BUILD_DIR; xbuild /p:Configuration=Release Newtonsoft.Json.sln; else echo \"Skipping XBuild as SKIP_XBUILD\"; fi", "alternative end": "if [[ ! \"$SKIP_CLIENT_TESTS\" == \"true\" && ($TRAVIS_TEST_RESULT = 0 || \"$SKIP_XBUILD\" == \"true\")]]; then cd $TRAVIS_BUILD_DIR/.build/ci; cp -rf $TRAVIS_BUILD_DIR/Tests/Runner/* $TRAVIS_BUILD_DIR/.build/ci; npm test; else echo \"Skipping sauce tests as SKIP_CLIENT_TESTS or build failed\"; fi"}], "ocadotechnology/aimmo": [{"start": "pip install .", "end": "pushd game_frontend", "alternative end": "yarn --frozen-lockfile"}, {"start": "pip install codecov", "end": "docker run -it -p 5000:5000 ocadotechnology/aimmo-game:test python setup.py test", "alternative end": "read CONTAINERID <<< $(docker ps --all -q | head -1)"}, {"start": "pip install codecov", "end": "docker run -it -p 5000:5000 ocadotechnology/aimmo-game-creator:test python setup.py test", "alternative end": "read CONTAINERID <<< $(docker ps --all -q | head -1)"}, {"start": "pip install codecov", "end": "docker run -it -p 5000:5000 ocadotechnology/aimmo-game-worker:test python setup.py test", "alternative end": "read CONTAINERID <<< $(docker ps --all -q | head -1)"}, {"start": "pip install git+https://github.com/ocadotechnology/python-semantic-release.git@add_beta_releases", "end": "pushd game_frontend", "alternative end": "yarn --frozen-lockfile"}], "SharePoint/PnP-JS-Core": [{"start": "npm install -g gulp", "end": "if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then gulp travis:pull-request; fi", "alternative end": "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then gulp travis:push; fi"}], "ocadotechnology/codeforlife-portal": [{"start": "pip install -U setuptools", "end": "pipenv install --dev --system", "alternative end": "pip install -U rapid-router"}, {"start": "pip install -U rapid-router", "end": "wget https://chromedriver.storage.googleapis.com/83.0.4103.39/chromedriver_linux64.zip", "alternative end": "unzip chromedriver_linux64.zip -d /home/travis/virtualenv/python3.6.7/bin/"}, {"start": "pip install python-semantic-release==4.*", "end": "git config --global user.name \"semantic-release (via TravisCI)\"", "alternative end": "git config --global user.email \"semantic-release@travis\""}], "ocadotechnology/rapid-router": [{"start": "gem install sass -v 3.3.4", "end": "pipenv install --dev --system", "alternative end": "pip install git+https://github.com/ocadotechnology/codeforlife-portal.git#egg=codeforlife-portal"}, {"start": "pip install git+https://github.com/ocadotechnology/codeforlife-portal.git#egg=codeforlife-portal", "end": "wget https://chromedriver.storage.googleapis.com/81.0.4044.69/chromedriver_linux64.zip", "alternative end": "unzip chromedriver_linux64.zip -d /home/travis/virtualenv/python3.6.7/bin/"}, {"start": "pip install -U setuptools", "end": "pipenv install --dev --system", "alternative end": "pip install git+https://github.com/ocadotechnology/codeforlife-portal.git#egg=codeforlife-portal"}, {"start": "pip install git+https://github.com/ocadotechnology/codeforlife-portal.git#egg=codeforlife-portal", "end": "mkdir -p game/locale", "alternative end": "cd game && django-admin makemessages -l en_GB --no-wrap && cd -"}, {"start": "pip install python-semantic-release==4.*", "end": "semantic-release publish", "alternative end": "curl -d POST -v https://semaphoreci.com/api/v1/projects/${SEMAPHORE_PROJECT_ID}/master/build?auth_token=${SEMAPHORE_API_AUTH}"}], "ocadotechnology/gcp-census": [{"start": "pip install -r requirements.txt", "end": "find . -name \"*.py\" -path \"./*\" -not \\( -path \"./lib/*\" -o -path \"./google-cloud-sdk/*\" \\) | xargs pylint --reports=yes --rcfile=.pylintrc && coverage run --source=gcp_census test_runner.py --test-path tests/ -v ./google-cloud-sdk", "alternative end": "coveralls"}], "Microsoft/PowerBI-visuals-ForceGraph": [{"start": "npm install", "end": "npm run lint", "alternative end": "npm run test"}], "ocadotechnology/hexagonjs": [{"start": "cd docs && npm install", "end": "pages", "alternative end": "docs/target"}], "ocadotechnology/django-closuretree": [{"start": "pip install gitversion", "end": "python setup.py test", "alternative end": "coveralls"}], "octoblu/meshblu": [], "ocadotechnology/aimmo-unity": [], "ocadotechnology/bbq": [{"start": "pip install -r requirements.txt", "end": "PYTHONPATH=$PYTHONPATH:./lib:./google-cloud-sdk/bin", "alternative end": "unit-tests"}], "OCamlPro/alt-ergo": [], "OfficeDev/microsoft-teams-library-js": [], "Microsoft/pxt-filesystem": [{"start": "npm install -g pxt", "end": "pxt target microbit", "alternative end": "pxt install"}], "ocaml/opam-depext": [], "Microsoft/SimpleRestClients": [], "OctopusDeploy/octopackjs": [], "OCamlPro/liquidity": [], "OCamlPro/ocp-index": [], "oddbird/accoutrement-color": [], "Microsoft/PowerBI-visuals-WordCloud": [{"start": "npm install", "end": "npm run lint", "alternative end": "npm run test"}], "Microsoft/BotFramework-Emulator": [], "Microsoft/BotFramework-WebChat": [], "Microsoft/sqltoolsservice": [{"start": "if [ $TRAVIS_OS_NAME == \"linux\" ]; then sudo apt-get update; sudo apt-get install dotnet-sdk-3.1; else brew update; fi", "end": "dotnet restore", "alternative end": "dotnet build src/Microsoft.SqlTools.ServiceLayer"}], "ngsru/vue-server": [], "os-data/eu-structural-funds": [{"start": "pip install tox coveralls", "end": "tox", "alternative end": "coveralls"}], "okta/okta-oidc-js": [{"start": "sudo apt-get update", "end": "False", "alternative end": "never"}], "okta/okta-spring-boot": [], "okta/samples-nodejs-express-4": [{"start": "npm install", "end": "npm test", "alternative end": "npm install -g npm@5.6.0"}], "bashmohandes/go-askme": [], "okta/samples-js-react": [{"start": "npm install", "end": "npm test", "alternative end": "npm install -g npm@latest"}, {"start": "npm install -g npm@latest", "end": "type = cron", "alternative end": "m930AIv4/BRdNuh+M0aHUbZx1UyNTFPynbSP7mLgXeLclyWCUzBqcX+WLJnjJRYwqQNQAnzJIvHNH5FQZWLmDW11DW/wzS9vdiOk/l4e58qVPhYAkXfY2ltQUV5y5C5K6YN/8oiiJBnt/EhDlaMeYkHWeVpNUTK5jGYJWsrQb3vVojW9nnUNpU8mqiuFQQOvrmxeuoFzBdxRCPr8Ny5IF5BoQVZlxP4lOjbZyz9N4TfW6fi4Mbmkyw1E4IZQ3uca4vdO7UcbnOMXqEfO2N0ScO1wGkyG9BU/vncLeXgCU8vvZ0DTMBTfpe50thud0AFXWOCQ9XgCrNEguCuFsRoRe/CjdI6pnHgWGQaHfA3lqLXmJWMrek+0WFaCXN2KeH0IrbLL/qztRmd1dSzPPduVHhGrVgLv1QZFYf9j2ZzdgOfqTwJVaSiPdXVfsWHtKVN/mh7Faa2LdfCBpPmtsPlGdMut88+wGXZH9oejONmJ2qNj9FWXgvaQoTfQCK1XA9+m/9XdaVUEZxuKuymWSNByfSEweoYj6xxr+xpnh4JI5ueTBXVMj0uA+InY/Bqg6KkInoD6Yxpx5haqXo3lgxfTAfbL2VSpG1iIOUT9xjR2cerHmWsgoTae8UCRXrApnByVeL5I2Hu2mTK4Be8H9l4n6uuSt8I0M+4ug0Ib+gRXC1U="}], "okta/okta-sdk-dotnet": [], "okta/okta-signin-widget": [], "okta/okta-sdk-java": [], "okta/okta-sdk-nodejs": [], "okta/okta-auth-js": [], "omines/directadmin": [], "omines/datatables-bundle": [], "omines/oauth2-gitlab": [], "Microsoft/powerbi-visuals-sankey": [{"start": "npm install", "end": "npm run lint", "alternative end": "npm run test"}], "onaio/onadata": [{"start": "pip install --upgrade pip setuptools", "end": "python manage.py test $TESTFOLDER --noinput --settings=onadata.settings.travis_test --parallel 4 --verbosity=2", "alternative end": "onaio:snkNXgprD498qQv4DgRREKJF"}], "omise/omise-dotnet": [], "ONTIO/ontology": [], "omise/omise-go": [], "cloudinsight/cloudinsight-agent": [], "Microsoft/PowerBI-visuals-Tornado": [{"start": "npm install", "end": "npm run lint", "alternative end": "npm run test"}], "onelogin/php-saml": [], "One-com/one-validation": [{"start": "npm install -g npm && npm cache verify", "end": "npm run-script travis"}], "lailongwei/llbc": [{"start": "if [[ \"${TRAVIS_OS_NAME}\" == \"linux\" ]]; then sudo apt-get install -y uuid-dev; fi", "end": "if [[ \"${TRAVIS_OS_NAME}\" == \"linux\" ]]; then sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF; fi", "alternative end": "if [[ \"${TRAVIS_OS_NAME}\" == \"linux\" ]]; then echo \"deb http://download.mono-project.com/repo/debian wheezy main\" | sudo tee /etc/apt/sources.list.d/mono-xamarin.list; fi"}, {"start": "if [[ \"${TRAVIS_OS_NAME}\" == \"linux\" ]]; then sudo apt-get update; fi", "end": "make core_lib -j4", "alternative end": "make test -j4"}], "onelogin/python-saml": [{"start": "sudo apt-get update -qq", "end": "coverage run --source=src/onelogin/saml2 --rcfile=tests/coverage.rc setup.py test", "alternative end": "coverage report -m --rcfile=tests/coverage.rc"}], "onelogin/java-saml": [], "onepercentclub/bluebottle": [{"start": "pip install --upgrade pip", "end": "flake8 .", "alternative end": "python -m coverage run --parallel-mode --source=bluebottle manage.py test --keepdb"}], "onelogin/ruby-saml": [{"start": "gem update bundler", "end": "1.8.7", "alternative end": "Gemfile"}], "Onesignal/OneSignal-Android-SDK": [], "xoolive/traffic": [{"start": "python -m pip install -U pip", "end": "python -m pip --version", "alternative end": "python -m pip install --upgrade codecov pytest-cov pytest==4.5"}, {"start": "python -m pip install --upgrade codecov pytest-cov pytest==4.5", "end": "travis_wait 30 python -m pytest --cov --cov-report term-missing", "alternative end": "codecov"}], "onesteinbv/addons-onestein": [], "Microsoft/powerbi-visuals-gantt": [{"start": "npm install", "end": "npm run lint", "alternative end": "npm run test"}], "ONLYOFFICE/server": [{"start": "npm install -g grunt-cli", "end": "make", "alternative end": "6"}], "simp/inspec-profile-disa_stig-el7": [], "ONLYOFFICE/Docker-DocumentServer": [], "Microsoft/tolerant-php-parser": [], "ONLYOFFICE/DocumentServer": [{"start": "npm install -g markdownlint-cli", "end": "markdownlint CHANGELOG.md", "alternative end": "spellcheck"}], "Microsoft/redux-dag-history": [], "ONLYOFFICE/sdkjs": [{"start": "npm install -g grunt-cli node-qunit-phantomjs", "end": "grunt --gruntfile build/Gruntfile.js develop", "alternative end": "node-qunit-phantomjs cell/.unit-tests/FormulaTests.html"}, {"start": "npm install -g grunt-cli", "end": "grunt --level=WHITESPACE_ONLY --base build --gruntfile build/Gruntfile.js", "alternative end": "docker pull onlyofficetestingrobot/doc-builder-testing:develop-latest"}], "Microsoft/PowerBI-visuals-AttributeSlicer": [{"start": "sudo apt-get update", "end": "yarn --ignore-engines", "alternative end": "True"}, {"start": "pip install --user --upgrade requests", "end": "export PATH=$PATH:~/.local/bin", "alternative end": "PACKAGE_VERSION=$(node -p -e \"require('./packages/attribute-slicer-powerbi/package.json').version\")"}], "Microsoft/DirectXShaderCompiler": [], "Microsoft/BotFramework-DirectLineJS": [], "Microsoft/PowerBI-visuals-NetworkNavigator": [{"start": "sudo apt-get update", "end": "yarn --ignore-engines", "alternative end": "True"}, {"start": "pip install --user --upgrade requests", "end": "export PATH=$PATH:~/.local/bin", "alternative end": "PACKAGE_VERSION=$(node -p -e \"require('./packages/network-navigator-powerbi/package.json').version\")"}], "OpenClovis/OpenYuma": [{"start": "pip install ncclient", "end": "docker build -t openyuma .", "alternative end": "docker run -d -p 8300:830 -p 2200:22 --name openyuma openyuma"}], "openanalytics/shinyproxy": [], "opencredo/opencredo-react-boilerplate": [], "opendatasoft/ods-widgets": [{"start": "npm install grunt-cli -g", "end": "grunt", "alternative end": "cd dist/ && zip -r ../ods-widgets.zip . && cd .."}], "opendoor-labs/rets": [], "opencredo/terrahelp": [], "opencredo/concursus": [], "opencredo/kubefuse": [{"start": "sudo apt-get install -y libfuse-dev", "end": "wget https://github.com/SpectoLabs/myna/releases/download/v1/myna", "alternative end": "chmod +x myna"}], "open-io/oio-sds": [{"start": "sudo apt-get install $([ \"$TRAVIS_PYTHON_VERSION\" == \"2.7\" ] && echo 'libapache2-mod-wsgi' || echo 'libapache2-mod-wsgi-py3')", "end": "go get gopkg.in/ini.v1 golang.org/x/sys/unix", "alternative end": "sudo bash -c \"echo '/tmp/core.%p.%E' > /proc/sys/kernel/core_pattern\""}], "OpenGamma/ElSql": [], "Microsoft/AirSim": [{"start": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then sudo apt-get update; sudo apt-get -y install git wget unzip; sudo apt-get -y install build-essential software-properties-common cmake rsync libboost-all-dev; elif [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then echo \"No before_install actions for OSX\"; elif [[ \"$TRAVIS_OS_NAME\" == \"windows\" ]]; then choco install visualstudio2019buildtools --package-parameters \"--includeRecommended --includeOptional\"; choco install visualstudio2019-workload-vctools; fi", "end": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then ./setup.sh; ./build.sh || travis_terminate 1; echo \"Starting Unity Build!\"; (cd Unity && ./build.sh || travis_terminate 1); elif [[ \"$TRAVIS_OS_NAME\" == \"windows\" ]]; then export PATH=$MSBUILD_PATH:$PATH_FIX:$PATH; cmd.exe //C 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\VC\\Auxiliary\\Build\\vcvarsall.bat' amd64 '&&' build.cmd '&&' cd Unity '&&' build.cmd; elif  [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then ./setup.sh; ./build.sh || travis_terminate 1; echo \"Starting Unity Build!\"; (cd Unity && ./build.sh || travis_terminate 1); fi", "alternative end": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then ./tools/install_ros_deps.sh; (cd ros && source ~/.bashrc && catkin build -DCMAKE_C_COMPILER=gcc-8 -DCMAKE_CXX_COMPILER=g++-8); fi"}], "open-io/oio-swift": [{"start": "sudo apt-get update -qq", "end": "echo -en \"travis_fold:start:install\\r\"", "alternative end": "pip install --upgrade pip setuptools virtualenv tox flake8"}, {"start": "pip install --upgrade pip setuptools virtualenv tox flake8", "end": "test -n \"$SWIFT_BRANCH\" && git config --local submodule.third_party/swift.branch \"$SWIFT_BRANCH\" || true", "alternative end": "test -n \"$SDS_BRANCH\" && git config --local submodule.third_party/oio-sds.branch \"$SDS_BRANCH\" || true"}, {"start": "pip install --upgrade -r deps-requirements.txt", "end": "cd third_party/oio-sds && python setup.py install && cd ../..", "alternative end": "cd third_party/swift && python setup.py install && cd ../.."}, {"start": "pip install --upgrade -r test-requirements.txt", "end": "go get gopkg.in/ini.v1 golang.org/x/sys/unix", "alternative end": "echo -en \"travis_fold:end:install\\r\""}], "opengisch/QField": [{"start": "pip install transifex-client", "end": "./scripts/ci/pull_translations.sh", "alternative end": "./scripts/ci/build.sh"}, {"start": "pip install transifex-client pytransifex", "end": "./scripts/ci/prepare-release.sh", "alternative end": "test"}, {"start": "pip install pyopenssl", "end": "./scripts/deploy.sh"}], "Azure/doAzureParallel": [], "openlabs/Microsoft-Translator-Python-API": [{"start": "pip install flake8", "end": "python setup.py install", "alternative end": "pip install coveralls"}, {"start": "pip install coveralls", "end": "coverage run setup.py test", "alternative end": "flake8 ."}], "opennode/python-freeipa": [{"start": "pip install tox", "end": "tox", "alternative end": "pypi"}], "Microsoft/dtslint": [{"start": "npm install", "end": "1"}], "opensupports/opensupports": [{"start": "npm install -g npm@6.1.0", "end": "cd client", "alternative end": "npm install"}, {"start": "npm install", "end": "cd ../tests", "alternative end": "gem install bundler"}, {"start": "gem install bundler", "end": "bundle install", "alternative end": "gem install bacon"}, {"start": "gem install bacon", "end": "cd ../server", "alternative end": "composer install"}], "lwes/lwes-erlang": [], "lwes/lwes": [], "Opentrons/Protocols": [{"start": "pip install -e otcustomizers", "end": "make setup", "alternative end": "libsystemd-dev"}], "opsway/doctrine-dbal-postgresql": [], "optimad/BitPit": [{"start": "sudo apt-get update", "end": "test -n $CC && unset CC", "alternative end": "test -n $CXX && unset CXX"}], "optimad/MIMMO": [{"start": "sudo apt-get update", "end": "test -n $CC && unset CC", "alternative end": "test -n $CXX && unset CXX"}], "Microsoft/pxt-common-packages": [{"start": "sudo apt-get install libudev-dev", "end": "node node_modules/pxt-core/built/pxt.js travis", "alternative end": "False"}], "subutai-io/p2p": [{"start": "sudo apt-get update -qq", "end": "git clone https://github.com/subutai-io/p2p-packages.git /tmp/p2p-packages", "alternative end": "go get github.com/google/gofuzz"}], "optimizely/python-sdk": [{"start": "pip install -r requirements/core.txt;pip install -r requirements/test.txt", "end": "pytest --cov=optimizely", "alternative end": "coveralls"}, {"start": "gem install awesome_bot", "end": "find . -type f -name '*.md' -exec awesome_bot {} \\;", "alternative end": "False"}, {"start": "pip install flake8==3.6.0", "end": "flake8", "alternative end": "travis_terminate 0"}], "Microsoft/BotFramework-Hubot": [], "Optum/mockiato": [], "Azure/blobporter": [{"start": "sudo apt-get install zip", "end": "curl -L -s https://github.com/golang/dep/releases/download/v${DEP_VERSION}/dep-linux-amd64 -o $GOPATH/bin/dep", "alternative end": "export GO111MODULE=on"}], "Orange-OpenSource/fiware-cepheus": [], "Microsoft/timelinestoryteller": [], "Azure/RDS-Templates": [{"start": "npm install -g grunt-cli", "end": "0.12", "alternative end": "False"}], "Oracle/oci-cli": [], "Oracle/graal": [{"start": "if [[ ${GATE} == *style* ]]\nthen\n  virtualenv venv\n  source venv/bin/activate\n  pip install astroid==1.1.0\n  pip install pylint==1.1.0\n\n  export ECLIPSE_TAR=${TRAVIS_BUILD_DIR}/../eclipse.tar.gz\n  wget https://archive.eclipse.org/eclipse/downloads/drops4/R-4.14-201912100610/eclipse-SDK-4.14-linux-gtk-x86_64.tar.gz  -O ${ECLIPSE_TAR}\n  tar -C ${TRAVIS_BUILD_DIR}/.. -xzf ${ECLIPSE_TAR}\n  export ECLIPSE_EXE=${TRAVIS_BUILD_DIR}/../eclipse/eclipse\n\n  # the style gate needs the full commit history for checking copyright years\n  git fetch --unshallow\nfi\n", "end": "if [[ ${GATE} == *fullbuild* ]]\nthen\n  # Only test JDT on JDK8\n  if [ \"${JDK}\" == \"jdk8\" ]\n  then\n    export JDT=${MX_PATH}/ecj.jar\n    wget https://archive.eclipse.org/eclipse/downloads/drops4/R-4.14-201912100610/ecj-4.14.jar -O ${JDT}\n  fi\nfi\n", "alternative end": "if [ \"${TRAVIS_CPU_ARCH}\" == \"arm64\" ]\nthen\n  export TRAVIS_CPU_ARCH=\"aarch64\"\nfi\nJDK_TAR=${TRAVIS_BUILD_DIR}/../jdk.tar.gz\nif [ \"${JDK}\" == \"jdk8\" ]\nthen\n  wget https://github.com/graalvm/graal-jvmci-8/releases/download/${JVMCI_VERSION}/openjdk-8u${JDK8_UPDATE_VERSION}${JDK8_UPDATE_VERSION_SUFFIX}-${JVMCI_VERSION}-linux-${TRAVIS_CPU_ARCH}.tar.gz -O ${JDK_TAR}\nfi\nif [ \"${JDK}\" == \"jdk11\" ]\nthen\nwget https://github.com/graalvm/labs-openjdk-11/releases/download/${JVMCI_VERSION}/labsjdk-ce-${JDK11_VERSION}-${JVMCI_VERSION}-linux-${TRAVIS_CPU_ARCH}.tar.gz -O ${JDK_TAR}\nfi\nmkdir -p ${TRAVIS_BUILD_DIR}/../jdk\ntar -C ${TRAVIS_BUILD_DIR}/../jdk -xzf ${JDK_TAR} --strip-components=1\nexport JAVA_HOME=${TRAVIS_BUILD_DIR}/../jdk\n"}], "Azure/azure-bigcompute": [{"start": "npm install -g grunt-cli", "end": "0.12", "alternative end": "False"}], "eclipse-ee4j/jsonp": [], "Microsoft/powerbi-visuals-pulsechart": [{"start": "npm install", "end": "npm run lint", "alternative end": "npm run test"}], "Originate/exosphere": [{"start": "sudo apt-get update", "end": "sudo rm /usr/local/bin/docker-compose", "alternative end": "curl -L https://github.com/docker/compose/releases/download/1.13.0/docker-compose-`uname -s`-`uname -m` > docker-compose"}], "Azure/azure-cli-shell": [{"start": "pip install -qqq virtualenv", "end": ". build_in_travis.sh", "alternative end": "False"}], "Azure-Samples/iot-hub-c-raspberrypi-client-app": [{"start": "sudo apt-get install python", "end": "cpplint --linelength=120 --filter=-whitespace/braces,-whitespace/newline,-readability/casting,-runtime/threadsafe_fn *.c *.h"}], "OriginTrail/ot-node": [], "orionhealth/XBDD": [], "Oracle/oci-java-sdk": [], "eclipse-ee4j/tyrus": [], "Microsoft/reactxp": [], "ORNL-CEES/DataTransferKit": [], "Oracle/wookiee": [], "Azure-Samples/web-apps-node-iot-hub-data-visualization": [{"start": "npm install eslint", "end": "node_modules/.bin/eslint **/*.js | if grep \"error \"; then echo \"there's lint error, pls fix it\"; exit 1; fi", "alternative end": "change"}], "OfficeDev/office-js-snippets": [{"start": "npm install", "end": "npm run lint", "alternative end": "npm run tsc"}], "Azure/azure-functions-pack": [], "oroinc/orocommerce": [], "AzureAD/microsoft-authentication-library-for-objc": [{"start": "gem install xcpretty slather -N", "end": "find . -name \"*.gcda\" -print0 | xargs -0 rm", "alternative end": "set -o pipefail"}], "graalvm/graal-js-jdk11-maven-demo": [], "graalvm/mx": [{"start": "pip install pylint==2.4", "end": "pylint --version", "alternative end": "export ECLIPSE_TAR=$TRAVIS_BUILD_DIR/../eclipse.tar.gz\nwget https://archive.eclipse.org/eclipse/downloads/drops4/R-4.5.2-201602121500/eclipse-SDK-4.5.2-linux-gtk-x86_64.tar.gz -O $ECLIPSE_TAR\ntar -C $TRAVIS_BUILD_DIR/.. -xf $ECLIPSE_TAR\nexport ECLIPSE_EXE=$TRAVIS_BUILD_DIR/../eclipse/eclipse\nexport JDT=$TRAVIS_BUILD_DIR/ecj.jar\nwget https://www.eclipse.org/downloads/download.php?file=/eclipse/downloads/drops4/R-4.5.2-201602121500/ecj-4.5.2.jar -O $JDT\n"}], "Microsoft/PartsUnlimitedMRPmicro": [], "Microsoft/pxt-midi": [{"start": "npm install -g pxt", "end": "pxt target microbit", "alternative end": "pxt install"}], "Osedea/react-native-opengraph-kit": [], "graalvm/SimpleLanguage": [], "Microsoft/clarity-js": [], "Oslandia/py3dtiles": [{"start": "sudo apt-get install -y liblas-c3 libopenblas-base flake8", "end": "pytest", "alternative end": "flake8 setup.py py3dtiles/"}], "Oslandia/qgis-versioning": [], "Oslandia/lopocs": [{"start": "sudo apt-get install libgdal-dev", "end": "py.test"}], "Microsoft/node-diagnostic-channel": [{"start": "npm install", "end": "sudo service mysql stop", "alternative end": "docker-compose version"}], "Oslandia/pglite": [], "otto-de/jlineup": [], "ottogroup/schedoscope": [], "Microsoft/TypeScript-Node-Starter": [], "oursky/Redux": [{"start": "brew update", "end": "set -o pipefail", "alternative end": "xcodebuild -version"}], "outlandishideas/kasia": [], "outscale/packetgraph": [{"start": "sudo apt update", "end": "sudo bash -c \"echo 1024 > /proc/sys/vm/nr_hugepages\"", "alternative end": "sudo bash -c \"mkdir -p /mnt/huge\""}], "outbrain/Leonardo": [], "Oxalide/vsphere-influxdb-go": [{"start": "sudo apt-get install -y ruby ruby-dev build-essential rpm", "end": "go get -u github.com/golang/dep/cmd/dep", "alternative end": "go get -u github.com/alecthomas/gometalinter"}], "OXID-eSales/oxideshop_ce": [{"start": "sudo apt-get update", "end": "phpenv config-rm xdebug.ini", "alternative end": "sudo apt-get install apache2 libapache2-mod-fastcgi"}, {"start": "sudo apt-get install apache2 libapache2-mod-fastcgi", "end": "sudo cp ~/.phpenv/versions/$(phpenv version-name)/etc/php-fpm.conf.default ~/.phpenv/versions/$(phpenv version-name)/etc/php-fpm.conf", "alternative end": "if [[ $(phpenv version-name) = 7.* ]]; then sudo cp ~/.phpenv/versions/$(phpenv version-name)/etc/php-fpm.d/www.conf.default ~/.phpenv/versions/$(phpenv version-name)/etc/php-fpm.d/www.conf; fi;"}], "utrack/clay": [], "pagarme/robrowser": [], "Microsoft/dbfs": [], "pagarme/node-boleto": [], "pagarme/react-event-components": [{"start": "npm install -g yarn", "end": "yarn", "alternative end": "npm test"}], "PacificBiosciences/FALCON-integrate": [], "pagarme/pagarme-python": [{"start": "pip install -r requirements-dev.txt", "end": "py.test --cov pagarme", "alternative end": "coveralls"}], "pagarme/pagarme-net": [{"start": "sudo apt-get install -y gtk-sharp2 nunit-console", "end": "nuget restore PagarMe.sln", "alternative end": "xbuild PagarMe.sln"}], "PacificBiosciences/pbdagcon": [], "pagarme/react-payment-card-component": [], "Azure/azure-event-hubs-python": [], "PacificBiosciences/FALCON": [], "pagarme/pagarme-ruby": [], "pagarme/escriba": [], "pagarme/teleport": [], "Azure/azure-cosmosdb-spark": [], "palantir/typescript-service-generator": [], "pagarme/pagarme-java": [], "PagerDuty/pd-cap-recipes": [], "Microsoft/knack": [{"start": "pip install tox-travis", "end": "tox"}], "Microsoft/pxt-adafruit": [], "hubsmoke/bro": [], "Microsoft/OpenGCS": [], "Paradigm4/SciDB-py": [{"start": "pip install --upgrade -r requirements.txt", "end": "pycodestyle .", "alternative end": "pytest -v"}, {"start": "pip install .", "end": "docker logs scidb"}], "Paradigm4/SciDBR": [], "Paradigm4/shim": [{"start": "pip install --upgrade -r tests/pytest/requirements.txt", "end": "if [ \"$TEST_BASIC\" = \"true\" ]; then docker exec scidb make --directory=/shim test_basic ; else docker exec scidb make --directory=/shim test ; docker exec scidb env AIO=aio make --directory=/shim test ; fi", "alternative end": "docker exec scidb /shim/shim start"}], "Microsoft/vscode-arduino": [{"start": "if [ $TRAVIS_OS_NAME == \"linux\" ]; then export CXX=\"g++-4.9\" CC=\"gcc-4.9\" DISPLAY=:99.0; sh -e /etc/init.d/xvfb start; sleep 3; wget https://downloads.arduino.cc/arduino-1.8.2-linux64.tar.xz -P /home/$USER; tar -xvf /home/$USER/arduino-1.8.2-linux64.tar.xz -C /home/$USER/; sudo ln -s /home/$USER/arduino-1.8.2/arduino /usr/bin/arduino; sudo apt-get update; sudo apt-get install g++-multilib; sudo apt-get install -y build-essential; sudo apt-get install libudev-dev; fi", "end": "rm -f ./node_modules/.bin/which", "alternative end": "gulp tslint"}], "paritytech/bigint": [], "Microsoft/azure-maven-plugins": [], "paritytech/parity-extension": [], "paritytech/finality-grandpa": [], "paritytech/pwasm-ethereum": [{"start": "[ $TRAVIS_BRANCH = master ] &&\n[ $TRAVIS_PULL_REQUEST = false ] &&\ncargo doc \\\n&& echo '<meta http-equiv=refresh content=0;url=pwasm_ethereum/index.html>' > target/doc/index.html && \\\nsudo pip install ghp-import && \\\nghp-import -n target/doc && \\\ngit push -qf https://${TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git gh-pages", "end": "nvCW0An57BlSc9KNHzv9K5/J3ow9WKBYLglDBmoetvtI4TwwMy0mBjokHSa6uETWXchgD7E+4SOyGTiMUk60u8xZUQu3JFFLuDw9KAUm2dNCh5OnOBDiatF0+/IpcZrHLPecon85ON5UAlCXYkX01uzR+eK0jGPZh0v+tldX/AtgH7Zdp+8V9nPijnJVh4ibSvS70yNm3t6Sh6WX3FDaOSHVDojIt5sVeIg/t1KZp+T96MUsV58LORO7DNbQx6vpF0sn+YUm5BYcqBVXCOsGaOS53XVWBZ/MUKYxPh+QRmNvFdbXtZGALWr4PiLZH5r6IQmtoFxuuYgDdXabFeIO9dHHEYjVZpu/Nr75N9NCppRMGEfs8Jnu+5+BrYLrVt0QJirS59Wzm0ctqRClVIVQ72SBPC9OdNLADOMgkH/WC2sUCk0y9c6P2op+1BlJM13o9FzhPb+ARWV8l10LNMWjmlT1ZXwr6A8RN07YmlDIj2tkNpAyITJkIJkUbkWsxUVWhaBzRBc6SU6OgiPm5QB6I4/pVDzmrh36RIYo1SRTfKj/Q+aDzXflp8GtnHRU0OndXPU9/nhYUI8nP+mzt4h8KSubK9AUQs33pODEbIzB2By+2QEn5MLgWNP4xcrhQHsRamDPN7f9hjsAudqdOzVNKiRdOTTRQNMNN1dhDRxJxTg="}], "phw/peek": [], "paritytech/oo7-parity": [], "Microsoft/elk-acs-kubernetes": [], "Microsoft/YamUI": [], "paritytech/parity-bitcoin": [{"start": "[ true ] &&\n[ $TRAVIS_BRANCH = master ] &&\n[ $TRAVIS_PULL_REQUEST = false ] &&\n[ $TRAVIS_RUST_VERSION = stable ] &&\n./tools/doc.sh &&\necho '<meta http-equiv=refresh content=0;url=pbtc/index.html>' > target/doc/index.html &&\npip install --user ghp-import &&\n/home/travis/.local/bin/ghp-import -n target/doc &&\ngit push -fq https://${GH_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git gh-pages\n", "end": "CXX=\"g++-4.8\"", "alternative end": "CC=\"gcc-4.8\""}], "paritytech/parity-zcash": [{"start": "[ true ] &&\n[ $TRAVIS_BRANCH = master ] &&\n[ $TRAVIS_PULL_REQUEST = false ] &&\n[ $TRAVIS_RUST_VERSION = stable ] &&\n./tools/doc.sh &&\necho '<meta http-equiv=refresh content=0;url=pzec/index.html>' > target/doc/index.html &&\npip install --user ghp-import &&\n/home/travis/.local/bin/ghp-import -n target/doc &&\ngit push -fq https://${TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git gh-pages\n", "end": "CXX=\"g++-4.8\"", "alternative end": "CC=\"gcc-4.8\""}], "paritytech/oo7": [], "paritytech/ethabi": [], "biokit/biokit": [{"start": "pip install pytest pytest-cov pytest-qt pytest-xdist pytest-mock pytest-timeout", "end": "pytest -v --durations=10  test/ --cov=biokit --cov-report term --timeout 300", "alternative end": "coveralls"}], "sequana/sequana": [{"start": "pip install bioservices>=1.7.8", "end": "git clone https://github.com/biomics-pasteur-fr/MultiQC", "alternative end": "cd MultiQC/"}, {"start": "pip install pyopengl", "end": "python setup.py install", "alternative end": "pip install sequana_quality_control"}, {"start": "pip install sequana_quality_control", "end": "pytest -v --cov-config=.coveragerc_travis --durations=10  test/ --cov=sequana --cov-report term-missing --timeout 300", "alternative end": "coveralls"}], "paritytech/substrate-telemetry": [], "paritytech/wasm-utils": [], "paritytech/parity-common": [{"start": "npm install -g geckodriver@1.19.1", "end": "curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh", "alternative end": "which geckodriver"}], "paritytech/wordlist": [], "paritytech/rhododendron": [], "paritytech/pwasm-token-example": [], "paritytech/pwasm-tutorial": [], "paritytech/wasm-tests": [], "Microsoft/napajs": [{"start": "npm install cmake-js -g", "end": "npm test", "alternative end": "npm run unittest"}], "Paymill/paymill-js": [], "Paymill/Paymill-Java": [], "paritytech/js-libs": [], "paritytech/pwasm-std": [{"start": "[ $TRAVIS_BRANCH = master ] &&\n[ $TRAVIS_PULL_REQUEST = false ] &&\ncargo doc --all --no-deps &&\necho '<meta http-equiv=refresh content=0;url=pwasm_std/index.html>' > target/doc/index.html &&\npip install --user ghp-import &&\n/home/travis/.local/bin/ghp-import -n target/doc &&\ngit push -fq https://${TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git gh-pages\n", "end": "sR7zsC7POowXa2DT4BHx7ReQZBUdH+2IZQIMtgTYfln2IawiXZCAV1mXiG4WgZVvSNjO3+a5kBa59WRkDy6/iQOtY0MTFiaQsfFXWUKdC6ISngGZIiqPQbBV2E0J3vmZRE99W3tZrx6C8aQwToh+IfrX/ISJ0kKUM/pIirxfkykb3enOhNO3k5jnRPO+4uiaMhEnjHMhPCRPO6mjQ9Lkwe9WswVmEvhS26ivUP0ZgP5qURqrAtH5pyHBLshIVyXSCQj+PYaBdt1zTeHOvO0Kdq5xZrvhk8f/r2fW2d7lw5G9p1qnI6p58BMnlHIaoBD8TZt/tyTkO4vcwPhWUKMMmR0F7RQWbtI5lIFgWVybaojgVA9s7umP5SNesAJpxkGfgoFwiMwWVjYC+OzUsMsl7jyNsgGbkt4zSuCEJqatemFPPeVtvucPxsAYHv42cHlK6UWo91EfPqoffmQx/DHVgQ+50j8VWzNz88QjXahVKq5FQCs+fIvtSKDr3Y8WYACW+n4aU7XiVdjDjvDcJzmnDl1GmIe1K2nkXGr55YKmoX2slf+Uky9tDk2bJNTL8mFAKMC2JWS372v/SkHI5XjX+WMt8N8q1p1nCnjnFTRUO4PnNxnjygsECjpE8/ez7PjNuG0ZnQzoRFrtR8C7idzSEvODOK1veNzeZcStvpmuAbg="}], "paritytech/lunarity": [], "paritytech/parity-bridge": [{"start": "sudo snap install parity --stable", "end": "snap list", "alternative end": "export PATH=/snap/bin:${PATH}"}, {"start": "sudo snap install parity --stable", "end": "snap list", "alternative end": "export PATH=/snap/bin:${PATH}"}, {"start": "sudo snap install parity --stable", "end": "snap list", "alternative end": "export PATH=/snap/bin:${PATH}"}], "krakenjs/cross-domain-safe-weakmap": [], "paritytech/parity-wasm": [], "krakenjs/swaggerize-express": [], "paritytech/primitives": [], "krakenjs/lusca": [], "krakenjs/kraken-js": [], "paritytech/pwasm-abi": [{"start": "[ $TRAVIS_BRANCH = master ] &&\n[ $TRAVIS_PULL_REQUEST = false ] &&\ncargo doc --all --no-deps &&\necho '<meta http-equiv=refresh content=0;url=pwasm_abi/index.html>' > target/doc/index.html &&\npip install --user ghp-import &&\n/home/travis/.local/bin/ghp-import -n target/doc &&\ngit push -fq https://${TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git gh-pages\n", "end": "h94IWY0I/5DYK0w+7yTh4c7VTd4LJSVHrPMm9bXKUXjTbgQ8O02hN2yYKGMADrydo5wI0TJNY40/nOXQg7C0lwIvKsjzda9joLgs+8RvSJomEm1eRKdLMNjKevuIeqGCZAfrtdVVcvRjRBvH03t9IKkOPi5Su0XgNKhX9v0N0mb0BoSKMpNo4n2E7taUBW3fQvPjnWHbblheBU6ftqm6gctIDKhgbOvFDS0I87B8nbq37dhLh5iMVNM+qJz+DwqagzutjBQG8biD4cKO6jpmJJkjcwxGWrIZHhaSr/icNhxo4DJD7c6zwnKUukFrKgtaWH5v369qYL/6zp/o9fw1meKyzAOUSebHR4UXi2WtNmsQjHdNlRI2/Fo3QDQs5Cc3Kq3b6NbmyKIZ8wwn0DFBJbbjKDGqWGrUexqJJKZGPgHCJSseZ+goAEmjVGCcpCAQnTgJYMw9JlnpedCxobvolsRRip8eQp57UFslWk2e0mnYZfnNsVBIBxxAUUNgJs8lDhhRTSjm7uahl3T4N5gAF9rsdhWEu/dNB/nUD9xyvD71x2YV0Vf2r/k9J4a084ds+ABaI3MQ/6d/Szb6VVo7UOROgzYqQFiNXsBkXdKTF74CxjoJVRPDThtVrJ5LLlTCqOfU8nc0d9LhhUV/ihJF4oPgUZJEcOSQmhmUtI5ZiNQ="}], "krakenjs/nemo": [], "krakenjs/confit": [], "KhronosGroup/UnityGLTF": [], "Azure/vscode-kubernetes-tools": [{"start": "npm install -g vsce", "end": "gulp tslint", "alternative end": "vsce package"}], "krakenjs/zoid": [], "krakenjs/makara": [], "paritytech/sol-rs": [{"start": "npm install -g solc", "end": "cargo test --all"}], "krakenjs/meddleware": [], "krakenjs/generator-swaggerize": [], "paritytech/js-api": [], "paritytech/wasmi": [{"start": "if [ -n \"$TARGET\" ]; then rustup target add \"$TARGET\" && sudo apt-get install --yes qemu-user-static; fi", "end": "rustup component add rustfmt", "alternative end": "sudo apt-get install --yes cmake"}, {"start": "sudo apt-get install --yes cmake", "end": "cargo fmt --all -- --check", "alternative end": "if [ \"$TRAVIS_RUST_VERSION\" == \"nightly\" ]; then cargo check --tests --manifest-path=fuzz/Cargo.toml; fi"}, {"start": "# Build documentation and deploy it to github pages.\n[ $TRAVIS_BRANCH = master ] &&\n[ $TRAVIS_PULL_REQUEST = false ] &&\necho \"<meta http-equiv=refresh content=0;url=`echo $TRAVIS_REPO_SLUG | cut -d '/' -f 2`/index.html>\" > target/doc/index.html &&\nsudo pip install ghp-import &&\nghp-import -n target/doc &&\ngit push -fq https://${GH_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git gh-pages\n", "end": "/home/travis/.cargo", "alternative end": "chmod -R a+r $HOME/.cargo"}], "Azure/autorest.go": [{"start": "sudo apt-get install libunwind8", "end": "gulp testci"}], "Azure/autorest.typescript": [{"start": "npm install --ignore-scripts", "end": "gulp testci/typecheck", "alternative end": "CHECK_NAME=\"Node.js Tests\""}, {"start": "npm install --ignore-scripts", "end": "gulp testci/nodejs-unit", "alternative end": "CHECK_NAME=\".NET Core Unit Tests\""}, {"start": "sudo apt-get install libunwind8", "end": "npm run testci/generator-unit", "alternative end": "CHECK_NAME=\"Regenerate Vanilla\""}, {"start": "sudo apt-get install libunwind8", "end": "gulp testci/regenerate-ts", "alternative end": "CHECK_NAME=\"Regenerate Azure\""}, {"start": "sudo apt-get install libunwind8", "end": "gulp testci/regenerate-tsazure", "alternative end": "CHECK_NAME=\"Generate Metadata Flag\""}, {"start": "npm install --ignore-scripts", "end": "gulp testci/metadata"}], "krakenjs/karka": [{"start": "npm install -g grunt-cli", "end": "npm run-script cover", "alternative end": "npm run-script lint"}], "krakenjs/shortstop": [], "krakenjs/generator-kraken": [{"start": "npm install -g bower", "end": "False"}], "ShifuML/shifu": [], "krakenjs/beaver-logger": [], "krakenjs/express-enrouten": [], "krakenjs/kappa": [], "krakenjs/adaro": [], "krakenjs/jsx-pragmatic": [], "krakenjs/kraken-devtools": [], "PayPal/gimel": [], "krakenjs/cross-domain-utils": [], "krakenjs/post-robot": [], "PayPal/squbs": [], "PayPal/dce-go": [], "Azure/terraform-azurerm-compute": [], "Azure/reverse-proxy-dotnet": [], "Microsoft/DLWorkspace": [{"start": "pip install paramiko pyyaml requests prometheus_client twisted", "end": "python -m unittest discover .", "alternative end": "python"}, {"start": "pip install prometheus_client", "end": "python3 -m unittest discover .", "alternative end": "python"}, {"start": "pip install pyyaml requests tabulate cachetools kubernetes", "end": "python -m unittest discover .", "alternative end": "python"}, {"start": "pip install -r requirements.txt", "end": "python -m unittest test_cluster_status.py", "alternative end": "python -m unittest test_virtual_cluster_status.py"}, {"start": "pip install requests", "end": "python -m unittest discover .", "alternative end": "python"}, {"start": "pip install pyyaml requests flask prometheus_client flask-cors", "end": "python -m unittest discover .", "alternative end": "python"}, {"start": "pip install requests markdown_strings", "end": "python -m unittest discover ."}], "pcloud/pcloud-sdk-js": [{"start": "npm install -g yarn", "end": "yarn install --frozen-lockfile", "alternative end": "yarn flow"}], "Azure/ms-rest-js": [], "Microsoft/roosterjs": [], "infrastructor/infrastructor": [], "OfficeDev/Orky": [{"start": "npm install", "end": "npm test", "alternative end": "npm run coveralls"}], "Microsoft/typescript-styled-plugin": [{"start": "npm install", "end": "npm run compile", "alternative end": "npm run e2e"}], "Azure/aztk": [{"start": "pip install -r requirements.txt", "end": "yapf --style .style.yapf -dpr aztk/ aztk_cli/", "alternative end": "pylint -j 2 -E aztk aztk_cli"}], "PerimeterX/perimeterx-nginx-plugin": [], "perfectsense/dari": [], "Microsoft/vscode-java-debug": [{"start": "npm install -g vsce", "end": "gulp tslint", "alternative end": "vsce package"}], "PerimeterX/perimeterx-node-express": [{"start": "npm install", "end": "npm test", "alternative end": "npm run lint"}], "PGSSoft/PuzzleMaker": [], "Azure/device-simulation-dotnet": [], "Azure/pcs-cli": [{"start": "npm install", "end": "npm start", "alternative end": "QYJ/KdpV9uTsXJidxv/4Xrf0q/XtSJUyns2ZDHBnqNpfeAzqYPnqqnHHdrZZE2x/WaBU/7DOZeygvQuZL8y8kCZPqGV+ZUtQiFc2hjNTTQWKbuXkpZ/3jkAzOqE++vc6dnDfNuR227meaE+2OBB99BMH7XfK9kTTMX1RoeUM6HaOJOAqv3xqqDc9k9SoQO4haUbUDb47xQukIkuXvi20oE+AKB5DT/J9Vz0Zp9PqLVQFs2YcZsiTyCmdqRWTVifVfyxqyirP8d71WiXU0eMEJYz+yCsgz9O3UyUcxfJzNaQr+tdY9KhWexud5LtTdFqxpXyZ5w95ELPNPFWXFXIo4xHSEcyabeDvk0YOZ3pn8G0MzRzT8MJa06E5q4lkXrZrD8KkScdHlj12H9TooClK7a3g3/WkpruEyjTFg8KdOnwwu1XTVFc3Kg14AzFZuDf5lJCqSm75vDCqjpxi/Jzfvz6xj885YIMbDxMF0QSx7BpDtJlyLVi7EvEofXFKbBfUM6AS5Ug3pldybw86V17Qfc4b0zfCFFCWk0ElX2hwhefG9QNauqd5hFCwGoxdhe1S/l0aXCEaUJpbR6RE8qZfhSoCbv44i8qNhQp0jl2zie/B3fuzl0Q/kzIGgVk+owfxod33QWEI6kUaoKJiWk7UJ6+nh17pXYgMYRJPoXNDS3g="}], "PGSSoft/AutoMate": [{"start": "brew update", "end": "swiftlint version", "alternative end": "bundle exec pod --version"}], "PGSSoft/AutoMate-AppBuddy": [{"start": "brew update", "end": "swiftlint version", "alternative end": "bundle exec pod --version"}], "Microsoft/java-debug": [], "Microsoft/typescript-lit-html-plugin": [{"start": "npm install", "end": "npm run compile", "alternative end": "npm run e2e"}], "SiLab-Bonn/basil": [{"start": "sudo apt-get install gperf", "end": "git clone https://github.com/steveicarus/iverilog.git", "alternative end": "cd iverilog && autoconf && ./configure && make && sudo make install && cd .."}, {"start": "cd iverilog && autoconf && ./configure && make && sudo make install && cd ..", "end": "wget http://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O miniconda.sh", "alternative end": "bash miniconda.sh -b -p $HOME/miniconda"}, {"start": "pip install pyvisa pyvisa-sim coveralls cocotb==1.2.0 flake8-diff", "end": "python setup.py develop", "alternative end": "nosetests --with-coverage --cover-package=basil  tests/test_*.py examples/*/*/test_*.py"}], "PilzDE/pilz_industrial_motion": [], "Azure/azure-libraries-for-java": [], "Microsoft/react-popout-component": [], "pinterest/pinball": [{"start": "pip install -r requirements.txt", "end": "nosetests"}], "pinterest/rocksplicator": [{"start": "sudo apt-get update -qq", "end": "wget http://archive.apache.org/dist/thrift/0.9.1/thrift-0.9.1.tar.gz", "alternative end": "tar xfz thrift-0.9.1.tar.gz"}, {"start": "cd thrift-0.9.1 && ./configure --with-cpp=no --with-c_glib=no --with-java=yes --with-python=no --with-ruby=no --with-erlang=no --with-go=no --with-nodejs=no --with-php=no && sudo make install", "end": "cd ../cluster_management; mvn clean package -DskipTests"}], "Azure/azure-storage-blob-go": [], "PiwikPRO/plugin-SiteMigration": [], "pivotalsoftware/PDLTools": [{"start": "pip install --user setuptools", "end": "mkdir -p ${TRAVIS_BUILD_DIR}/tools", "alternative end": "cd ${TRAVIS_BUILD_DIR}/tools"}, {"start": "sudo apt-get install -y rpm", "end": "export PATH=${TRAVIS_BUILD_DIR}/tools/bin:${TRAVIS_BUILD_DIR}/tools/doxygen-1.8.7/bin:$PATH", "alternative end": "cd ${TRAVIS_BUILD_DIR}"}], "Azure/azure-event-hubs-spark": [], "Microsoft/mssql-scripter": [{"start": "if [[\"$TRAVIS_OS_NAME\" == \"linux\"]]; then $ apt-get update; fi", "end": "tox", "alternative end": "codecov"}], "pixelgrade/customify": [{"start": "gem install nyx", "end": "nyx check:php ."}], "pixnet/pixframework": [], "Microsoft/workbooks": [], "Microsoft/fastlane-plugin-appcenter": [], "planetlabs/draino": [], "Microsoft/MMdnn": [{"start": "python -m pip install --upgrade pip", "end": "sudo ln -s /usr/lib/x86_64-linux-gnu/libmpi_cxx.so.20 /usr/lib/x86_64-linux-gnu/libmpi_cxx.so.1", "alternative end": "sudo ln -s /usr/lib/x86_64-linux-gnu/libmpi.so.20 /usr/lib/x86_64-linux-gnu/libmpi.so.12"}, {"start": "python -m pip install -q -r $(python requirements/select_requirements.py)", "end": "export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/lib/x86_64-linux-gnu", "alternative end": "True"}], "greenplum-db/gpos": [{"start": "if [ \"${TRAVIS_OS_NAME}\" = \"linux\" ]; then wget --no-check-certificate http://www.cmake.org/files/v3.3/cmake-3.3.2-Linux-i386.tar.gz && tar -xzf cmake-3.3.2-Linux-i386.tar.gz && sudo cp -fR cmake-3.3.2-Linux-i386/* /usr && sudo apt-add-repository -y ppa:ubuntu-toolchain-r/test && sudo apt-add-repository -y ppa:beineri/opt-qt542 && sudo apt-get -qq update && sudo apt-get -qq install g++-4.8 libc6-i386 qt54location qt54multimedia qt54sensors qt54svg qt54tools qt54webchannel qt54webkit && export CXX=\"g++-4.8\" && export CC=\"gcc-4.8\" ; else brew update && brew unlink cmake && brew install cmake qt5 && chmod -R 755 /usr/local/opt/qt5/* ; fi", "end": "cd ${TRAVIS_BUILD_DIR}", "alternative end": "mkdir build"}, {"start": "make install", "end": "releng@pivotal.io", "alternative end": "change"}], "planetlabs/planet-client-python": [{"start": "pip install setuptools pip pytest --upgrade", "end": "make check html-docs"}], "pivotal/blog": [], "Microsoft/vscode-java-test": [{"start": "npm install", "end": "npm run lint", "alternative end": "npm run build-plugin"}], "platformsh/console-form": [], "platformsh/platformsh-cli": [], "spring-projects/spring-integration-kafka": [], "Azure/azure_modules": [{"start": "if [ \"$ANSIBLE_VERSION\" == \"latest\" ]; then pip install ansible[azure]; else pip install ansible[azure]==$ANSIBLE_VERSION; fi", "end": "{ echo '[defaults]'; echo 'roles_path = ../'; echo 'lookup_plugins = ./tests/integration/targets/azure_rm_keyvaultkey/lookup_plugins'; } >> ansible.cfg", "alternative end": "ansible --version"}, {"start": "pip install -I -r ./files/requirements-azure.txt", "end": "pip freeze", "alternative end": "git remote set-branches --add origin master"}], "Azure/azure_preview_modules": [{"start": "sudo apt-get update -qq", "end": "mkdir ~/.azure", "alternative end": "touch ~/.azure/credentials"}, {"start": "if [ \"$ANSIBLE_VERSION\" == \"latest\" ]; then pip install ansible[azure]; else pip install ansible[azure]==$ANSIBLE_VERSION; fi", "end": "{ echo '[defaults]'; echo 'roles_path = ../'; echo 'lookup_plugins = ./tests/integration/targets/azure_rm_keyvaultkey/lookup_plugins'; } >> ansible.cfg", "alternative end": "ansible --version"}, {"start": "pip install -I -r ./files/requirements-azure.txt", "end": "pip freeze", "alternative end": "git remote set-branches --add origin master"}], "eliasku/hxmake": [], "Microsoft/pai": [{"start": "pip install paramiko pyyaml jinja2 python-etcd kubernetes", "end": "python -m unittest discover test/", "alternative end": "go"}, {"start": "pip install paramiko pyyaml jinja2 python-etcd kubernetes GitPython", "end": "python -m unittest deployment.clusterObjectModel.test.test_cluster_object_model", "alternative end": "python"}, {"start": "pip install paramiko pyyaml jinja2 python-etcd kubernetes GitPython", "end": "python -m unittest deployment.clusterObjectModel.test.test_template_generate", "alternative end": "python"}, {"start": "pip install paramiko pyyaml jinja2 python-etcd kubernetes GitPython", "end": "python -m unittest deployment.clusterObjectModel.test.test_forward_compatibility", "alternative end": "python"}, {"start": "pip install prometheus_client", "end": "python3 -m unittest discover .", "alternative end": "python"}, {"start": "pip install prometheus_client twisted requests", "end": "python3 -m unittest discover .", "alternative end": "python"}, {"start": "pip install markdown==2.6.11", "end": "python src/utilities/doc_checker.py .", "alternative end": "java"}, {"start": "npm install", "end": "npm test", "alternative end": "node_js"}, {"start": "npm install -g @apidevtools/swagger-cli", "end": "swagger-cli validate src/rest-server/docs/swagger.yaml"}], "plentymarkets/plugin-ceres": [], "Microsoft/ms-tpm-20-ref": [{"start": "if [ $LDFLAGS = \"-m32\" ]; then\n    sudo dpkg --add-architecture i386\n    sudo apt-get update\n    sudo apt-get install gcc-multilib libssl-dev:i386\nfi\n", "end": "cd TPMCmd", "alternative end": "./bootstrap"}], "Azure-Samples/ansible-playbooks": [{"start": "not valid", "stop": "not valid"}], "plesk/api-php-lib": [], "plivo/plivo-ruby": [], "plivo/plivo-go": [], "plivo/plivo-node": [], "plivo/plivo-java": [], "plivo/plivo-dotnet": [{"start": "if [  ${DOTNETCORE} = 1 ]; then sudo apt-get install 2.1.300-rc1-008673; dotnet restore; dotnet build --framework netstandard1.3 src/Plivo/Plivo.csproj; dotnet build --framework netcoreapp1.1 tests_netcore/Plivo.NetCore.Test/Plivo.NetCore.Test.csproj; fi", "end": "if [  ${DOTNETCORE} = 2 ]; then dotnet test --framework netcoreapp2.0 ./tests_netcore/Plivo.NetCore.Test/Plivo.NetCore.Test.csproj; fi", "alternative end": "if [  ${DOTNETCORE} = 1 ]; then dotnet test --framework netcoreapp1.1  ./tests_netcore/Plivo.NetCore.Test/Plivo.NetCore.Test.csproj; fi"}], "Azure-Samples/cognitive-services-python-sdk-samples": [{"start": "pip install -U setuptools pip", "end": "nosetests"}], "Pivotal-Field-Engineering/ephemerol": [], "Microsoft/vscode-spring-initializr": [{"start": "npm install", "end": "npm run tslint", "alternative end": "npm run compile"}], "Azure/Moodle": [{"start": "npm install", "end": "ssh-keygen -q -f azure_moodle_id_rsa -N \"\"", "alternative end": "npm test"}], "Microsoft/pxt-maker": [{"start": "sudo apt-get install libudev-dev", "end": "node node_modules/pxt-core/built/pxt.js travis", "alternative end": "node node_modules/pxt-core/built/pxt.js testdir tests"}], "SteelToeOSS/Discovery": [], "pluralsight/design-system": [{"start": "npm install", "end": "export NODE_OPTIONS=--max_old_space_size=4096", "alternative end": "validate"}, {"start": "npm install @commitlint/travis-cli", "end": "commitlint-travis", "alternative end": "Lint Files"}], "pivotal-cf/cf-rabbitmq-release": [], "Azure/app-service-quickstart-docker-images": [{"start": "sudo apt-get install -y jq", "end": "check Dockerfile", "alternative end": "./travis-script/main.sh"}], "nwchemgit/nwchem": [], "pnnl/SHAD": [{"start": "make install", "end": "cd ../..", "alternative end": "mkdir build-release"}, {"start": "test $DEPLOY_PAGES = 1 && pip install --user -r docs/requirements.txt && cd $TRAVIS_BUILD_DIR && mkdir build-doxygen && cd build-doxygen && cmake .. -DSHAD_ENABLE_UNIT_TEST=OFF -DSHAD_ENABLE_DOXYGEN=ON && make docs && touch $TRAVIS_BUILD_DIR/build-doxygen/docs/html/.nojekyll", "end": "pages", "alternative end": "$TRAVIS_BUILD_DIR/build-doxygen/docs/html"}], "ryanmoran/piper": [], "pivotal-cf/areas-of-contribution": [], "JGCRI/gcamdata": [], "VOLTTRON/volttron": [], "Microsoft/vscode-maven": [{"start": "npm install", "end": "npm run tslint", "alternative end": "npm run compile"}], "JGCRI/hector": [], "Microsoft/tsyringe": [], "Microsoft/Application-Insights-Workbooks": [], "spring-cloud/spring-cloud-dataflow-ui": [], "pokitdok/pokitdok-nodejs": [], "Polidea/react-native-ble-plx": [{"start": "gem install xcodeproj", "end": "integration-tests/scripts/make-project $RN_VERSION integration-tests/Setup", "alternative end": "integration"}, {"start": "gem install xcodeproj", "end": "integration-tests/scripts/make-project $RN_VERSION integration-tests/Setup", "alternative end": "generic"}, {"start": "gem install xcodeproj", "end": "integration-tests/scripts/make-project $RN_VERSION integration-tests/Setup", "alternative end": "objective-c"}, {"start": "npm install", "end": "npm run lint", "alternative end": "npm test"}, {"start": "gem install xcodeproj", "end": "integration-tests/scripts/make-project $RN_VERSION integration-tests/Setup", "alternative end": "generic"}, {"start": "gem install xcodeproj", "end": "integration-tests/scripts/make-project $RN_VERSION integration-tests/Setup", "alternative end": "objective-c"}, {"start": "gem install xcodeproj", "end": "integration-tests/scripts/make-project $RN_VERSION integration-tests/Setup", "alternative end": "generic"}, {"start": "gem install xcodeproj", "end": "integration-tests/scripts/make-project $RN_VERSION integration-tests/Setup", "alternative end": "objective-c"}, {"start": "gem install xcodeproj", "end": "integration-tests/scripts/make-project $RN_VERSION integration-tests/Setup", "alternative end": "generic"}, {"start": "gem install xcodeproj", "end": "integration-tests/scripts/make-project $RN_VERSION integration-tests/Setup", "alternative end": "objective-c"}], "bclozel/spring-resource-handling": [], "Polidea/RxAndroidBle": [], "rbarrois/django_xworkflows": [{"start": "pip install tox", "end": "3.4", "alternative end": "TOXENV=py34-django111"}], "Microsoft/ptvsd": [{"start": "pip install -U pip setuptools flake8", "end": "flake8", "alternative end": "sudo sysctl kernel.yama.ptrace_scope=0"}, {"start": "pip install -U pip setuptools tox tox-travis", "end": "tox -- -n4 -v", "alternative end": "TOX_SKIP_ENV=.*-cov"}], "JuliaSmoothOptimizers/Krylov.jl": [], "Azure/Azure.Mobile": [], "vulcand/vulcand": [], "Microsoft/vscode-azure-iot-edge": [{"start": "npm install", "end": "npm run tslint", "alternative end": "npm run compile"}], "Azure/azure-uamqp-python": [{"start": "pip install -r dev_requirements.txt", "end": "python ./setup.py build_ext --inplace", "alternative end": "pip install -e ."}], "Microsoft/botbuilder-tools": [], "porscheinformatik/sonarqube-licensecheck": [], "porscheinformatik/clarity-addons": [], "pivotal-cf/brokerapi": [], "pivotal/postfacto": [], "Microsoft/vscode-azure-iot-toolkit": [{"start": "npm install", "end": "npm run tslint", "alternative end": "npm run compile"}], "portworx/lcfs": [{"start": "sudo apt-get update -yq", "end": "sudo apt-get -o Dpkg::Options::=\"--force-confnew\" install -yq docker-ce", "alternative end": "make gr-plugin"}], "portworx/px-docs": [], "Azure/vscode-azureterraform": [{"start": "npm install -g vsce", "end": "npm run lint", "alternative end": "npm run test"}], "portworx/kvdb": [], "portworx/torpedo": [{"start": "sudo apt-get update -yq", "end": "sudo apt-get -o Dpkg::Options::=\"--force-confnew\" install -yq docker-ce", "alternative end": "make all"}], "libopenstorage/gossip": [{"start": "sudo apt-get update -yq", "end": "make docker-test", "alternative end": "aditya@portworx.com"}], "libopenstorage/openstorage": [{"start": "make install verify", "end": "bash hack/docker-integration-test.sh", "alternative end": "if [ \"${TRAVIS_PULL_REQUEST}\" == \"false\" ]; then echo \"${DOCKER_PASS}\" | docker login -u \"${DOCKER_USER}\" --password-stdin; make push-mock-sdk-server; fi"}], "portworx/terraporx": [], "libopenstorage/stork": [{"start": "sudo apt-get update -yq", "end": "$HOME/.cache/go-build", "alternative end": "if [ \"${TRAVIS_BRANCH}\" == \"master\" ]; then\n  export DOCKER_HUB_STORK_TAG=master\n  export DOCKER_HUB_STORK_TEST_TAG=latest\n  export DOCKER_HUB_CMD_EXECUTOR_TAG=master\nelse\n  export DOCKER_HUB_STORK_TAG=`git rev-parse --short HEAD`\n  export DOCKER_HUB_STORK_TEST_TAG=`git rev-parse --short HEAD`\n  export DOCKER_HUB_CMD_EXECUTOR_TAG=`git rev-parse --short HEAD`\nfi\nmake -j 2 && make test && make container && make integration-test && make integration-test-container &&\nif [ \"${TRAVIS_PULL_REQUEST}\" == \"false\" ]; then\n  docker login -u \"${DOCKER_USER}\" -p \"${DOCKER_PASSWORD}\";\n  make deploy;\n  make integration-test-deploy;\nfi &&\nif [ \"${TRAVIS_PULL_REQUEST}\" == \"false\" ] && [ \"${TRAVIS_BRANCH}\" == \"master\" ]; then\n  aws s3 cp --acl public-read bin/linux/storkctl s3://${BUCKET_NAME}/storkctl/master/linux/;\n  aws s3 cp --acl public-read bin/windows/storkctl.exe s3://${BUCKET_NAME}/storkctl/master/windows/;\n  aws s3 cp --acl public-read bin/darwin/storkctl s3://${BUCKET_NAME}/storkctl/master/darwin/;\nfi\n"}], "Microsoft/botbuilder-java": [], "pivotal-sprout/sprout-wrap": [{"start": "brew cask list && brew cask uninstall $(brew cask list)", "end": "rm -rf /usr/local/var/postgres", "alternative end": "for ruby in $(rvm list strings); do rvm uninstall \"${ruby}\"; done"}], "Azure/azure-event-hubs-go": [], "postgrespro/testgres": [], "zkoss/zk": [], "postgrespro/imgsmlr": [{"start": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then sudo apt-get -y install -qq wget ca-certificates; fi", "end": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then source ./travis/dep-ubuntu-postgres.sh; fi", "alternative end": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then source ./travis/dep-ubuntu-llvm.sh; fi"}, {"start": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then sudo apt-get update -qq; fi", "end": "LLVM_VER=4.0", "alternative end": "PG_VER=10  CHECK_TYPE=normal"}], "postgrespro/jsquery": [{"start": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then sudo apt-get -y install -qq wget ca-certificates; fi", "end": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then source ./travis/dep-ubuntu-postgres.sh; fi", "alternative end": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then source ./travis/dep-ubuntu-llvm.sh; fi"}, {"start": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then sudo apt-get update -qq; fi", "end": "LLVM_VER=4.0", "alternative end": "PG_VER=11  CHECK_TYPE=normal"}], "Powerspace/pg2bq": [{"start": "if [[ \"$TRAVIS_OS_NAME\" = \"osx\" ]]; then brew update; brew install xz; brew install sbt; fi", "end": "sbt ++$TRAVIS_SCALA_VERSION clean compile", "alternative end": "find $HOME/.sbt -name \"*.lock\" | xargs rm"}], "postgrespro/mamonsu": [], "postgrespro/pg_variables": [], "postgrespro/sr_plan": [], "postgrespro/pg_wait_sampling": [], "Azure/helm-elasticstack": [], "Azure/iotedgedev": [{"start": "pip install -r requirements_travis.txt", "end": "pytest -m unit", "alternative end": "DOTENV_FILE=\".env.tmp\""}], "Pragmatists/junitparams": [], "Microsoft/spring-data-gremlin": [], "chainer/chainercv": [{"start": "pip install cython", "end": "autopep8 -r . | tee check_autopep8", "alternative end": "test ! -s check_autopep8"}], "premium-minds/billy": [], "PrestaShop/docs": [{"start": "npm install && npm run build", "end": "cd ../../../", "alternative end": "../hugo"}], "pressbooks/pressbooks": [{"start": "sudo apt-get install -y default-jdk libxml2-utils ghostscript imagemagick poppler-utils unzip", "end": "wget https://github.com/w3c/epubcheck/releases/download/v4.1.1/epubcheck-4.1.1.zip", "alternative end": "unzip epubcheck-4.1.1.zip -d /opt/"}, {"start": "npm install", "end": "composer install", "alternative end": "ulimit -n 4096"}], "PressLabs/z3": [{"start": "pip install pytest boto==$BOTO_VERSION", "end": "python setup.py develop", "alternative end": "./_tests/run_tests.sh"}], "Azure/buffalo-azure": [], "PressLabs/pyolite": [{"start": "pip install -r requirements.txt", "end": "pytest tests/", "alternative end": "coveralls"}], "pricingassistant/mrq": [], "PressLabs/gitium": [], "PressLabs/toplytics": [], "pricingassistant/mongokat": [], "Azure/kubernetes-volume-drivers": [], "processone/stringprep": [{"start": "pip install --user cpp-coveralls coveralls-merge", "end": "./configure --enable-gcov", "alternative end": "rebar get-deps"}], "prograils/lit": [], "processone/xmpp": [], "processone/tsung": [], "NativeScript/nativescript-camera": [{"start": "sudo pip install --upgrade pip", "end": "tns usage-reporting disable", "alternative end": "tns error-reporting disable"}], "processone/stun": [{"start": "pip install --user cpp-coveralls coveralls-merge", "end": "rebar get-deps", "alternative end": "rebar compile xref && rebar skip_deps=true eunit"}], "processone/cache_tab": [{"start": "pip install --user cpp-coveralls coveralls-merge", "end": "rebar get-deps", "alternative end": "rebar compile xref && rebar skip_deps=true eunit"}], "NativeScript/nativescript-imagepicker": [{"start": "sudo pip install --upgrade pip", "end": "tns usage-reporting disable", "alternative end": "tns error-reporting disable"}], "processone/eimp": [{"start": "pip install --user cpp-coveralls coveralls-merge", "end": "sudo apt-get -q install libgd-dev libwebp-dev libpng-dev libjpeg-dev", "alternative end": "./configure --enable-gcov"}], "Microsoft/ConversationLearner-Samples": [], "Microsoft/ConversationLearner-SDK": [], "processone/fast_tls": [{"start": "pip install --user cpp-coveralls coveralls-merge", "end": "./configure --enable-gcov", "alternative end": "rebar get-deps"}], "NativeScript/nativescript-facebook": [{"start": "sudo pip install --upgrade pip", "end": "tns usage-reporting disable", "alternative end": "tns error-reporting disable"}], "processone/ejabberd": [{"start": "pip install --user coveralls-merge", "end": "sudo apt-get -qq install libexpat1-dev libyaml-dev libpam0g-dev libsqlite3-dev libgd-dev libwebp-dev", "alternative end": "mysql -u root -e \"CREATE USER 'ejabberd_test'@'localhost' IDENTIFIED BY 'ejabberd_test';\""}, {"start": "make install -s", "end": "make xref", "alternative end": "./tools/hook_deps.sh ebin"}], "Microsoft/ConversationLearner-UI": [], "NativeScript/nativescript-geolocation": [{"start": "sudo pip install --upgrade pip", "end": "tns usage-reporting disable", "alternative end": "tns error-reporting disable"}], "processone/iconv": [{"start": "pip install --user cpp-coveralls coveralls-merge", "end": "./configure --enable-gcov", "alternative end": "rebar get-deps"}], "processone/fast_xml": [{"start": "pip install --user cpp-coveralls coveralls-merge", "end": "./configure --enable-gcov", "alternative end": "rebar get-deps"}], "zhangao0086/DKImagePickerController": [{"start": "brew install ruby", "end": "pod repo update", "alternative end": "xcodebuild clean build test -workspace Example/DKImagePickerControllerDemo.xcworkspace -scheme DKImagePickerControllerDemo -destination \"$DESTINATION\""}], "prolificinteractive/simcoe": [{"start": "gem install bundler", "end": "bundle install", "alternative end": "pod install --repo-update"}], "ROGUE-JCTD/MapLoom": [{"start": "npm install --quiet -g grunt-cli karma bower", "end": "bower install", "alternative end": "grunt"}], "Promact/md2": [{"start": "npm install", "end": "mkdir -p $LOGS_DIR", "alternative end": "bash ./scripts/ci/test-build-and-deploy.sh"}], "wcm-io-frontend/aem-clientlib-generator": [], "Microsoft/service-fabric-explorer": [{"start": "npm install -g npm@latest", "end": "pushd ./src/SfxWeb; ng test --watch=false --browsers=ChromeHeadless", "alternative end": "ng build --prod"}], "PositiveTechnologies/flower": [], "LibProtection/libprotection-dotnet": [], "decentralized-identity/hub-node-core": [], "apostrophecms/apostrophe-headless": [], "pubnub/pubnub-angular2": [{"start": "npm install -g gulp-cli yarn", "end": "yarn install", "alternative end": "gulp test"}, {"start": "npm install -g bower", "end": "bash <(curl -s https://codecov.io/bash)"}], "pubnub/unity": [], "Pupil-Labs/Pupil": [{"start": "pip install -U pip", "end": "black . --check --exclude pupil_src/tests || (\n  echo -e \"\\033[0;31m PLEASE RUN THE BLACK FORMATTER ON YOUR CODE: \\033[0m\" &&\n  echo \"See https://github.com/psf/black for details\" &&\n  false\n)\n"}], "puppetlabs/puppetlabs-ntp": [{"start": "[ -z \"$RUBYGEMS_VERSION\" ] || (yes || true) | gem update --system $RUBYGEMS_VERSION", "end": "gem --version", "alternative end": "bundle -v"}], "puppetlabs/puppetlabs-accounts": [{"start": "[ -z \"$RUBYGEMS_VERSION\" ] || (yes || true) | gem update --system $RUBYGEMS_VERSION", "end": "gem --version", "alternative end": "bundle -v"}], "puppetlabs/puppetlabs-powershell": [{"start": "[ -z \"$RUBYGEMS_VERSION\" ] || (yes || true) | gem update --system $RUBYGEMS_VERSION", "end": "gem --version", "alternative end": "bundle -v"}, {"start": "brew update", "end": "bundle exec rake spec_prep", "alternative end": "osx"}], "puppetlabs/puppetlabs-kubernetes": [{"start": "[ -z \"$RUBYGEMS_VERSION\" ] || (yes || true) | gem update --system $RUBYGEMS_VERSION", "end": "gem --version", "alternative end": "bundle -v"}], "pubnub/chat-engine": [{"start": "npm install codecov codacy-coverage", "end": "cat ./coverage/lcov.info | node_modules/.bin/codacy-coverage", "alternative end": "./scripts/deploy_docs_from_master.sh"}], "Microsoft/pxt-arcade": [], "pusher/chatkit-server-node": [], "pubnub/pubnub-angular": [{"start": "npm install -g gulp-cli", "end": "bower install", "alternative end": "gulp test"}, {"start": "npm install -g bower", "end": "npm run codecov", "alternative end": "True"}], "pusher/pusher-http-python": [{"start": "pip install --upgrade setuptools", "end": "python setup.py test"}], "pusher/pusher-websocket-swift": [{"start": "brew update", "end": "carthage bootstrap --no-use-binaries --cache-builds", "alternative end": "SIMULATOR_ID=$(xcrun instruments -s | grep -o \"$DEVICE \\[.*\\]\" | grep -o \"\\[.*\\]\" | sed \"s/^\\[\\(.*\\)\\]$/\\1/\")"}, {"start": "SIMULATOR_ID=$(xcrun instruments -s | grep -o \"$DEVICE \\[.*\\]\" | grep -o \"\\[.*\\]\" | sed \"s/^\\[\\(.*\\)\\]$/\\1/\")", "end": "echo \"$SIMULATOR_ID\"", "alternative end": "carthage build --no-skip-current"}], "pubnub/java": [], "pubnub/javascript": [{"start": "npm install codecov codacy-coverage", "end": "cat ./coverage/lcov.info | node_modules/.bin/codacy-coverage"}], "Microsoft/language-server-protocol-inspector": [], "pubnub/python": [], "pubnub/ruby": [{"start": "gem update --system", "end": "--without development", "alternative end": "test"}], "pubnub/objective-c": [{"start": "sudo gem install xcpretty", "end": ". \"./Tests/Support Files/Scripts/create-configuration.sh\"", "alternative end": "test"}], "pusher/pusher-websocket-java": [], "pusher/pusher-http-java": [], "pubnub/php": [], "pusher/pusher-http-ruby": [], "pusher/chatkit-server-php": [], "pusher/chatkit-android": [], "Microsoft/TextWorld": [], "pubnub/go": [], "pusher/pusher-angular": [], "pusher/pusher-http-dotnet": [{"start": "if [ -z \"${DOTNETCORE}\" ]; then sudo apt-get install nunit-console; fi", "end": "if [ -z \"${DOTNETCORE}\" ]; then nuget restore pusher-dotnet-server.sln; fi", "alternative end": "if [ -n \"${DOTNETCORE}\" ]; then sudo bash -x ./build.sh; fi"}], "pusher/pusher-js": [{"start": "npm install", "end": "./node_modules/.bin/prettier --version", "alternative end": "npm run check-format && ./.travis.build"}], "pusher/libPusher": [{"start": "gem install xcpretty", "end": "chmod u+x Scripts/travis-set-constants.sh", "alternative end": "Scripts/travis-set-constants.sh"}], "pusher/pusher-http-go": [], "pusher/pusher-http-laravel": [], "pusher/pusher-http-php": [], "huntlabs/collie": [], "pusher/chatkit-client-js": [], "Microsoft/paris": [], "huntlabs/hunt-framework": [], "huntlabs/hunt": [], "pusher/atom-pair": [], "pusher/pusher-http-node": [], "hitobito/hitobito": [{"start": "sudo apt-get install sphinxsearch", "end": "echo '[mysqld]'              | sudo tee    /etc/mysql/conf.d/sort_buffer_size.cnf > /dev/null", "alternative end": "echo 'sort_buffer_size = 2M' | sudo tee -a /etc/mysql/conf.d/sort_buffer_size.cnf > /dev/null"}], "hitobito/hitobito_pbs": [{"start": "gem install bundler --version 1.9.10", "end": "bundle install --path vendor/bundle", "alternative end": "for d in ../hitobito_*; do cd $d && cp -v $HITOBITO_CORE_DIR/Gemfile.lock ./ && rvm use $TRAVIS_RUBY_VERSION --fuzzy && bundle install --path vendor/bundle; done"}], "puzzle/cryptopus": [{"start": "gem install bundler:1.17.3", "end": "bundle install --path vendor/bundle", "alternative end": "yarn"}], "ChronixDB/chronix.server": [], "Microsoft/charticulator": [], "ChronixDB/chronix.spark": [], "qaware/cloud-native-zwitscher": [], "qaware/go-offline-maven-plugin": [], "qiniu/pandora-go-sdk": [], "qiniu/java-sdk": [{"start": "npm install", "end": "QINIU_ACCESS_KEY=vHg2e7nOh7Jsucv2Azr5FH6omPgX22zoJRWa0FN5", "alternative end": "khCbQFPFoQpvN9l48yYnK/FTyYhrbtYgYBDNwG1o0a0sZHpjFyFkSqVNvQf97cQdEZXZ+URKZjt2COcw90JzMotpH22k1QnY9CgwEng4rVhJcGPv8kPlJLH7cAOzhhCQjB5tN2JJtuJEX/ZI+ZhwLD6ck5LcXYTuSJLoZxmGDus="}], "seu-as-code/seu-as-code.plugins": [], "qaware/gradle-cloud-deployer": [], "Azure/azure-functions-signalrservice-extension": [], "Azure/iotedgehubdev": [{"start": "sudo pip install --upgrade docker-compose", "end": "AZ_REPO=$(lsb_release -cs)", "alternative end": "echo \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main\" | sudo tee /etc/apt/sources.list.d/azure-cli.list"}, {"start": "sudo apt-get update", "end": "az extension add --name azure-cli-iot-ext", "alternative end": "az --version"}], "cambridgehackers/connectal": [{"start": "(if [ \"$CONNECTAL_ARCH\" == \"verilator\" ]; then curl -L http://www.veripool.org/ftp/verilator-3.888.tgz | tar -zxf -; cd verilator-3.888/; ./configure --prefix=`dirname $PWD`/verilator; make -j4;  make install; fi)", "end": "curl http://www.dabeaz.com/ply/ply-3.9.tar.gz | tar -zxf -", "alternative end": "ln -s ../ply-3.9/ply scripts"}], "saurabhnemade/react-twitter-embed": [{"start": "npm install -g rollup", "end": "npm run build-storybook", "alternative end": "npm"}], "quandl/quandl-ruby": [{"start": "gem install bundler -v '~> 1.17.3'", "end": "bundle update", "alternative end": "rubocop"}], "quandl/quandl-python": [{"start": "pip install flake8", "end": "flake8", "alternative end": "python -W always setup.py -q test"}], "quandl/quandl-r": [], "QuantConnect/Lean": [], "quantopian/empyrical": [{"start": "pip install -e .[dev]", "end": "flake8 .", "alternative end": "nosetests"}], "lief-project/LIEF": [{"start": "if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then brew update; fi", "end": "if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then export PATH=\"/usr/local/opt/ccache/libexec:$PATH\"; fi", "alternative end": "if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then export PYTHON_CONFIGURE_OPTS=\"--enable-shared --enable-unicode=ucs2\"; fi"}, {"start": "if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then brew upgrade pyenv||true; fi", "end": "if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then pyenv install --list  ;fi", "alternative end": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" && \"$PYTHON_VERSION\" == \"2.7\" ]]; then pyenv install 2.7.12; fi"}, {"start": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then $PYTHON_BINARY -m pip install --upgrade pip        ;fi", "end": "if [ \"$GCOV\" == \"ON\" ]; then sudo ln -sf /usr/bin/gcov-5 /usr/bin/gcov; fi", "alternative end": "if [ \"$GCOV\" == \"ON\" ]; then wget http://ftp.de.debian.org/debian/pool/main/l/lcov/lcov_1.13.orig.tar.gz; fi"}, {"start": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then sudo $PYTHON_BINARY -m pip install -U pip setuptools wheel && $PYTHON_BINARY ./setup.py --lief-test --sdk build -j8 bdist_wheel; fi", "end": "make package", "alternative end": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then export PYTHON_BINARY=python3; sudo apt-get update && sudo apt-get install -y python3 python3-pip; fi"}, {"start": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then export PYTHON_BINARY=python3; sudo apt-get update && sudo apt-get install -y python3 python3-pip; fi", "end": "cd $TRAVIS_BUILD_DIR", "alternative end": "bash ./.github/deploy.sh"}], "Microsoft/jericho": [], "qubole/qds-sdk-py": [{"start": "pip install urllib3==1.22 requests", "end": "python setup.py install", "alternative end": "pip install mock"}, {"start": "pip install mock", "end": "curl https://deepsource.io/cli | sh", "alternative end": "py.test --cov=./ --cov-report xml"}], "qubole/quark": [], "qubole/kinesis-sql": [], "qubole/presto-udfs": [], "openprocurement/openprocurement.api": [{"start": "sudo apt-get install libsodium13 -y", "end": "2.7", "alternative end": "couchdb"}, {"start": "pip install setuptools==7.0", "end": "python2 bootstrap.py", "alternative end": "bin/buildout -N"}], "themuseblockchain/Muse-Source": [{"start": "sudo apt-get update", "end": "cmake -DCMAKE_BUILD_TYPE=Debug -DBoost_USE_STATIC_LIBS=OFF .", "alternative end": "make -j 2"}], "QuickBlox/quickblox-javascript-sdk": [], "quobyte/docker-volume": [], "primeroIMS/primero": [], "Microsoft/typescript-tslint-plugin": [{"start": "npm install", "end": "npm run compile", "alternative end": "npm run test"}], "rabbitmq/rabbitmq-sharding": [], "rabbitmq/rabbitmq-federation": [], "rabbitmq/rabbitmq-tracing": [], "rabbitmq/rabbitmq-event-exchange": [], "rabbitmq/rabbitmq-mqtt": [], "rackerlabs/ohai-plugins": [], "rabbitmq/rabbitmq-delayed-message-exchange": [], "rabbitmq/rabbitmq-dotnet-client": [], "rabbitmq/rabbitmq-objc-client": [{"start": "brew update", "end": "cp .travis/etc/* /usr/local/etc/rabbitmq/", "alternative end": "cp TestCertificates/* /usr/local/etc/rabbitmq/"}, {"start": "brew services start rabbitmq", "end": "make bootstrap", "alternative end": "until sudo lsof -i:5672; do echo \"Waiting for RabbitMQ to start...\"; sleep 1; done"}], "rackerlabs/encore-ui": [{"start": "npm install -g grunt-cli bower", "end": "bower install", "alternative end": "cd utils/rx-page-objects; npm i; cd -;"}], "rabbitmq/rabbitmq-management": [], "rackerlabs/blueflood": [], "rabbitmq/rabbitmq-peer-discovery-consul": [], "GetCarina/carina": [], "rabbitmq/chef-cookbook": [{"start": "gem update bundler", "end": "bundle update --bundler", "alternative end": "INSTANCE=default-deb-debian-10"}], "rabbitmq/rabbitmq-auth-mechanism-ssl": [], "rabbitmq/rabbitmq-shovel": [], "rackerlabs/mimic": [], "rabbitmq/rabbitmq-management-agent": [], "rabbitmq/rabbitmq-common": [], "rabbitmq/rabbitmq-auth-backend-ldap": [], "rabbitmq/rabbitmq-cli": [], "rabbitmq/rabbitmq-auth-backend-http": [], "rabbitmq/hop": [], "rackerlabs/canon-react": [], "rabbitmq/rabbitmq-java-client": [], "rabbitmq/rabbitmq-recent-history-exchange": [], "rabbitmq/ra": [], "rabbitmq/rabbitmq-metronome": [], "rabbitmq/rabbitmq-server": [], "rabbitmq/rabbitmq-top": [], "rackerlabs/canon": [], "rabbitmq/rabbitmq-consistent-hash-exchange": [], "rackerlabs/recap": [], "rabbitmq/rabbitmq-erlang-client": [], "rabbitmq/rabbitmq-web-mqtt": [], "rackerlabs/kthresher": [{"start": "docker exec \\\nkthresher_on_${DISTRO/:/_} \\\n  bash -c \\\n   'apt-get update; \\\n    apt-get install -yq --no-install-suggests --no-install-recommends \\\n     python \\\n     python3 \\\n     python-apt \\\n     python3-apt \\\n     python-pip \\\n     python3-pip \\\n     python-setuptools \\\n     python3-setuptools'\n", "end": "docker exec \\\n  kthresher_on_${DISTRO/:/_} \\\n  bash -c 'cd /kthresher/; tox'\n"}], "rabbitmq/rabbitmq-web-stomp": [], "rabbitmq/rabbitmq-message-timestamp": [], "rabbitmq/rabbitmq-stomp": [], "rackerlabs/otter": [{"start": "pip install -U pip wheel", "end": "make lint-code", "alternative end": "make coverage"}], "rabbitmq/rabbitmq-perf-test": [], "Microsoft/Ethr": [], "rabbitmq/rabbitmq-peer-discovery-k8s": [], "rabbitmq/rabbitmq-jms-client": [{"start": "sudo apt-get update", "end": "master", "alternative end": "./bin/before_build.sh"}], "Rademade/rademade_admin": [{"start": "npm install bower", "end": "mysql -u root -e \"SET PASSWORD FOR 'root'@'localhost' = PASSWORD('root');\"", "alternative end": "mysql -e \"CREATE DATABASE rademade_admin_test;\""}], "rabbitmq/rabbitmq-amqp1.0": [], "radiasoft/sirepo": [], "radicalbit/NSDb": [], "radixdlt/radixdlt-java": [], "AzureAD/microsoft-authentication-library-for-python": [{"start": "pip install -r requirements.txt", "end": "python -m unittest discover -s tests", "alternative end": "pypi"}], "railslove/fontello_rails_converter": [], "railslove/cmxl": [], "railslove/rack-tracker": [], "rakutentech/ios-perftracking": [{"start": "gem update fastlane cocoapods --no-document", "end": "pod repo update", "alternative end": "fastlane ci"}], "railslove/birthday": [{"start": "gem install rails -v 3.2.14", "end": "DB=mysql RAILS=4.0.0", "alternative end": "DB=postgres RAILS=4.0.0"}], "railsware/js-routes": [{"start": "gem install bundler", "end": "2.3.1", "alternative end": "2.4.1"}], "railsware/capistrano-multiconfig": [], "railsware/upterm": [], "RallyApps/rally-app-builder": [], "railsware/rack_session_access": [], "railsware/global": [], "railsware/BloodMagic": [{"start": "gem update --system", "end": "ios_ci cedar --source-root ./ --target Specs", "alternative end": "1101.debian@gmail.com"}], "rambler-digital-solutions/rambler-webpack-boilerplate": [], "Ramotion/paper-switch": [], "Azure/vdc": [], "rapid7/recog": [], "rapid7/dap": [], "rapid7/jsobfu": [], "Microsoft/SandDance": [], "rapid7/awsaml": [], "rapid7/convection": [{"start": "gem update bundler", "end": "master"}], "rapid7/github-connector": [], "rapid7/metasploit-credential": [], "rapid7/raptor-io": [], "Ravenbrook/mps": [], "rapid7/metasploit_data_models": [], "rapid7/conqueso": [{"start": "npm install -g grunt-cli bower", "end": "grunt"}], "Razorpay/razorpay-ruby": [{"start": "gem update --system", "end": "bundle exec rake test", "alternative end": "if [[ \"$LINT\" == \"rubocop\" ]] ; then\n  bundle exec rake rubocop\nfi\n"}], "rapid7/godap": [], "rapid7/smbj-rpc": [], "Razorpay/razorpay-node": [], "rapid7/metasploit-framework": [{"start": "gem update --system 3.0.6", "end": "cp config/database.yml.travis config/database.yml", "alternative end": "bundle exec rake --version"}], "Razorpay/razorpay-python": [{"start": "pip install requests responses coveralls", "end": "nosetests -v --with-coverage --cover-package=razorpay", "alternative end": "coveralls"}], "rapid7/rex-powershell": [], "rapid7/propsd": [], "rapid7/nexpose-client-python": [{"start": "pip install -r requirements.txt", "end": "if [[ $TRAVIS_PYTHON_VERSION != 2.6 ]]; then flake8; fi", "alternative end": "py.test tests"}], "rapid7/nexpose-client": [], "rapid7/ruby_smb": [], "rapid7/le_node": [], "rapid7/marionette.carpenter": [{"start": "npm install -g grunt-cli", "end": "bower install -f --offline", "alternative end": "node_js"}], "Razorpay/razorpay-php": [], "rapid7/builderator": [], "Opetushallitus/scala-schema": [], "Realm/realm-cocoa": [{"start": "brew update; brew outdated swiftlint || brew upgrade swiftlint", "end": "./build.sh verify-docs", "alternative end": "JOB=verify-docs"}, {"start": "gem install jazzy", "end": "./build.sh verify-osx-swift", "alternative end": "JOB=verify-osx-swift"}], "redBorder/cep": [], "Realm/realm-cocoa-converter": [], "Realm/realm-browser-osx": [], "oVirt/ovirt-ansible-disaster-recovery": [{"start": "pip install tox ansible docker-py yamllint", "end": "ansible --version", "alternative end": "tox"}], "redhat-developer/yaml-language-server": [], "RedisLabs/spark-redis": [], "Real-Serious-Games/C-Sharp-Promise": [], "hercules-team/python-augeas": [{"start": "sudo apt-get update", "end": "wget http://mirrors.kernel.org/ubuntu/pool/universe/a/augeas/libaugeas0_1.12.0-1build1_amd64.deb", "alternative end": "sudo dpkg -i libaugeas0_1.12.0-1build1_amd64.deb"}, {"start": "pip install .", "end": "make check", "alternative end": "pypi"}], "Real-Serious-Games/Unity-Weld": [], "RedisLabs/rejson-py": [{"start": "pip install -r requirements.txt", "end": "./redis/src/redis-server --loadmodule ReJSON/src/rejson.so &", "alternative end": "coverage run --source=rejson setup.py test"}], "zanata/zanata-python-client": [{"start": "pip install -r requirements-dev.txt", "end": "make flake8 test"}], "Real-Serious-Games/Factory": [], "RedMadRobot/input-mask-ios": [], "oVirt/ovirt-ansible": [{"start": "pip install tox ansible docker-py yamllint", "end": "ansible --version", "alternative end": "tox"}], "Real-Serious-Games/Fluent-State-Machine": [], "pulp/pulp_docker": [{"start": "pip install -r test_requirements.txt", "end": "flake8 --config=flake8.cfg ."}], "distributed-system-analysis/pbench": [{"start": "sudo apt-get update", "end": "tox", "alternative end": "$HOME/.cache/pip"}], "rei/rei-cedar": [{"start": "npm install", "end": "npm run lint", "alternative end": "if [ \"$TRAVIS_PULL_REQUEST\" == \"false\" ]; then npm run unit; else npm run test; fi"}], "NYCComptroller/Checkbook": [], "libstorage/libstoragemgmt": [], "openshift/origin-web-catalog": [], "redhat-developer/rpm-packaging-guide": [], "clusterbench/clusterbench": [], "sosreport/sos": [{"start": "sudo apt-get update; sudo apt install flake8 python3-pexpect;", "end": "flake8 sos tests bin/*", "alternative end": "sudo ./tests/simple.sh"}, {"start": "sudo apt-get update; sudo apt install python3-pexpect;", "end": "sudo ./tests/simple.sh", "alternative end": "18.04 native run for arm64"}, {"start": "pip install -r requirements.txt; python3 setup.py install;", "end": "nosetests -v --with-cover --cover-package=sos --cover-html", "alternative end": "sudo ./tests/simple.sh ~/virtualenv/python$TRAVIS_PYTHON_VERSION/bin/python"}, {"start": "pip install -r requirements.txt; python3 setup.py install;", "end": "nosetests -v --with-cover --cover-package=sos --cover-html", "alternative end": "sudo ./tests/simple.sh ~/virtualenv/python$TRAVIS_PYTHON_VERSION/bin/python"}, {"start": "pip install -r requirements.txt; python3 setup.py install;", "end": "nosetests -v --with-cover --cover-package=sos --cover-html", "alternative end": "sudo ./tests/simple.sh ~/virtualenv/python$TRAVIS_PYTHON_VERSION/bin/python"}], "3scale/3scale_ws_api_for_ruby": [], "rhtconsulting/fuse-quickstarts": [], "release-engineering/pom-manipulation-ext": [], "torquebox/torquebox": [{"start": "gem install bundler", "end": "travis_retry bundle install", "alternative end": "unset RACK_ENV RAILS_ENV"}], "OSAS/ansible-role-ansible_bastion": [{"start": "sudo apt-get update -qq", "end": "( cd .. ; git clone https://gitlab.com/osas/ansible-role-tor.git tor)", "alternative end": "set -e ; for i in tasks/*.yml; do ansible-lint $i; done"}], "SatelliteQE/robottelo-ci": [{"start": "pip install -r requirements.txt", "end": "./setup_jjb.sh", "alternative end": "echo -e '[jenkins]\\nurl=http://127.0.0.1:8080/' >> jenkins_jobs.ini"}], "openshift-s2i/s2i-wildfly": [], "ansibleplaybookbundle/ansible-playbook-bundle": [{"start": "pip install -U flake8 kubernetes", "end": "flake8 src", "alternative end": "python setup.py install"}], "danielwippermann/resol-vbus": [], "fedora-selinux/selinux-policy-contrib": [], "restlet/restlet-framework-java": [], "restlet/restlet-framework-js": [], "skontar/cvss": [{"start": "pip install -e .", "end": "cd tests", "alternative end": "python test_cvss2.py"}], "Restream/obeder": [{"start": "gem install bundler", "end": "2.4.3", "alternative end": "bundle"}], "SSSD/sssd": [], "revelrylabs/elixir-stellar-client": [{"start": "gem install coveralls-multi --no-document", "end": "mix local.hex --force", "alternative end": "mix local.rebar --force"}], "wildfly/wildfly-maven-plugin": [], "revelrylabs/ecto_soft_delete": [{"start": "gem install coveralls-multi --no-document", "end": "cp config/test.exs.travis config/test.exs", "alternative end": "MIX_ENV=test mix ecto.create"}], "revinate/assertj-json": [{"start": "pip install --user codecov", "end": "codecov"}], "RHsyseng/container-rhel-examples": [{"start": "if [ ${BUILD} ]; then sudo apt-get install -y nodejs jq; fi", "end": "if [ ${BUILD} ]; then make lint -C ${VARIANT}; fi", "alternative end": "if [ ${BUILD} ]; then export PATH=$PATH:$HOME/bin; fi"}], "revelrylabs/elixir-nodejs": [{"start": "gem install coveralls-multi --no-document", "end": "rm -rf ~/.nvm && git clone https://github.com/creationix/nvm.git ~/.nvm && (cd ~/.nvm && git checkout `git describe --abbrev=0 --tags`) && source ~/.nvm/nvm.sh && nvm install 9", "alternative end": "mix local.hex --force"}, {"start": "npm install", "end": "cd test/js", "alternative end": "npm install"}, {"start": "npm install", "end": "cd ../..", "alternative end": "MIX_ENV=test mix coveralls.json"}], "revelrylabs/elixir_react_render": [{"start": "gem install coveralls-multi --no-document", "end": "rm -rf ~/.nvm && git clone https://github.com/creationix/nvm.git ~/.nvm && (cd ~/.nvm && git checkout `git describe --abbrev=0 --tags`) && source ~/.nvm/nvm.sh && nvm install 9", "alternative end": "mix local.hex --force"}, {"start": "npm install", "end": "MIX_ENV=test mix coveralls.json", "alternative end": "coveralls-multi"}], "patternfly/angular-patternfly": [{"start": "npm install -g npm@5.4.0", "end": "True", "alternative end": "sh -x ./node_modules/patternfly-eng-release/scripts/_build.sh -a"}], "rewe-digital/katana": [], "rezozero/starting-blocks": [], "rezozero/mixedfeed": [], "GitHubRGI/geopackage-python": [{"start": "pip install -r dependencies.txt", "end": "py.test Testing/test_tiles2gpkg.py --doctest-modules -v --cov Packaging --cov-report term-missing", "alternative end": "coveralls"}], "RhoInc/Webcharts": [], "hawkular/hawkular-datamining": [], "riboseinc/asciidoctor-bibliography": [], "riboseinc/retrace": [], "RhoInc/CRANsearcher": [], "openshift/sprint_tools": [], "ManageIQ/manageiq-pods": [], "rightscale/rsc": [], "ModeShape/modeshape": [], "oVirt/ovirt-engine-sdk": [{"start": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then brew install curl --with-openssl; brew install python; sudo easy_install pip; fi", "end": "git clone https://github.com/machacekondra/pdoc.git pdoc", "alternative end": "pip install --user ./pdoc -U"}, {"start": "pip install --user ./pdoc -U", "end": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then mvn package -DskipTests ; fi", "alternative end": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then sudo pip install ./sdk -U ; fi"}, {"start": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then sudo pip install ./sdk -U ; fi", "end": "if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then travis_wait 20 pdoc --overwrite --html --html-dir=target/generated-html/ sdk/lib/ovirtsdk4/ ; fi", "alternative end": "script"}], "RIPE-NCC/ripe-atlas-cousteau": [{"start": "pip install tox", "end": "tox", "alternative end": "coveralls --verbose"}], "wind-python/windpowerlib": [{"start": "pip install .", "end": "coverage run --rcfile=.coveragerc --source windpowerlib -m py.test", "alternative end": "coverage report"}], "fedora-selinux/selinux-policy": [], "SatelliteQE/nailgun": [{"start": "pip install -r requirements.txt -r requirements-dev.txt --no-cache-dir", "end": "pre-commit clean", "alternative end": "pre-commit run --all-files"}], "roblox/Rodux": [{"start": "pip install hererocks", "end": "hererocks lua_install -r^ --$LUA", "alternative end": "export PATH=$PATH:$PWD/lua_install/bin"}], "robinpowered/glamorous-native": [], "hawkular/hawkular-agent": [], "ROBOTIS-GIT/turtlebot3": [], "ManageIQ/linux_admin": [], "ROBOTIS-GIT/hls_lfcd_lds_driver": [], "ROBOTIS-GIT/ROBOTIS-OP3": [], "ROBOTIS-GIT/turtlebot3_simulations": [], "redhat-documentation/modular-docs": [], "redhat-developer/opencompose": [], "ROBOTIS-GIT/turtlebot3_autorace": [], "ROBOTIS-GIT/open_manipulator": [], "linux-system-roles/selinux": [{"start": "pip install tox tox-travis", "end": "./.travis/runtox"}], "ROBOTIS-GIT/DynamixelSDK": [], "ROBOTIS-GIT/turtlebot3_applications": [], "scribery/tlog": [{"start": "gem install coveralls-lcov", "end": "mkdir -p ~/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS,SDEBS,DEBS}", "alternative end": "ln -sr ~/rpmbuild ~/debbuild"}], "ROBOTIS-GIT/OpenCR": [], "ibmdb/python-ibmdb": [{"start": "pip install --upgrade pip", "end": "flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics", "alternative end": "scripts/setup-docker.sh"}, {"start": "pip install .", "end": "cp config.py.sample config.py", "alternative end": "echo -e '[sample]\\nHostname=localhost\\nProtocol=TCPIP\\nDatabase=sample' > db2cli.ini"}], "Rokid/docs": [{"start": "npm install", "end": "npm run build", "alternative end": "echo \"Removing unwanted files\""}], "RocketChat/Rocket.Chat.Ansible": [], "openshift/openshift-restclient-java": [], "stratis-storage/stratisd": [{"start": "sudo apt-get -y install util-linux libblkid-dev", "end": "sudo apt-get remove cryptsetup-bin", "alternative end": "sudo apt-get install -y libargon2-0 libjson-c3"}, {"start": "sudo apt-get install -y libargon2-0 libjson-c3", "end": "wget \"https://github.com/jbaublitz/stratisd/raw/deb/cryptsetup_2.3.0-1_amd64.deb\"\n", "alternative end": "sudo dpkg -i ./cryptsetup_2.3.0-1_amd64.deb"}, {"start": "pip install pylint==2.4.4 dbus-client-gen==0.4 dbus-python-client-gen==0.7 psutil==5.6.7 pyudev==0.22.0\n", "end": "(cd developer_tools; make -f Makefile lint) && (cd tests/client-dbus; PYTHONPATH=./src make -f Makefile lint)\n", "alternative end": "format Python code on recommended development interpreter"}, {"start": "pip install black==19.10b0 isort==4.3.21", "end": "(cd developer_tools; make fmt-travis) && (cd tests/client-dbus; make fmt-travis)\n", "alternative end": "lint Python code on lowest supported interpreter"}, {"start": "pip install pylint==2.4.4 dbus-client-gen==0.4 dbus-python-client-gen==0.7 psutil==5.4.3 pyudev==0.22.0\n", "end": "(cd developer_tools; make -f Makefile lint) && (cd tests/client-dbus; PYTHONPATH=./src make -f Makefile lint)\n", "alternative end": "run yamllint 1.23.0 on .travis.yml"}, {"start": "pip install yamllint==1.23.0", "end": "TASK=yamllint", "alternative end": "lint Rust source using beta toolchain"}], "RocketChat/Rocket.Chat.Ops": [{"start": "not valid", "stop": "not valid"}], "hercules-team/augeas": [], "RocketChat/Rocket.Chat.Federation": [], "pulp/pulp_ansible": [], "RocketChat/hubot-rocketchat": [{"start": "npm install -g npm@'>=2.13.5'", "end": "npm", "alternative end": "buildmaster@rocket.chat"}], "CoinSpace/CoinSpace": [], "kiali/kiali-ui": [], "containers/image": [], "projectatomic/container-best-practices": [{"start": "gem install asciidoctor", "end": "make check", "alternative end": "make html"}], "3scale/3scale_ws_api_for_php": [], "hawkular/hawkular-alerts": [], "rstudio/rstudioapi": [], "Katello/katello.org": [], "rstudio/packrat": [], "rstudio/pool": [], "rstudio/rsconnect": [], "rstudio/ggvis": [], "stratis-storage/stratis-cli": [{"start": "pip install pylint==2.4.4 dbus-client-gen==0.4 dbus-python-client-gen==0.7 justbytes==0.11 python-dateutil==2.8.0 wcwidth==0.1.9 psutil==5.6.7 semantic_version==2.6.0\n", "end": "PYTHONPATH=./src make -f Makefile lint", "alternative end": "check formatting using Python 3.7.7"}, {"start": "pip install black==19.10b0 isort==4.3.21", "end": "TASK=fmt-travis", "alternative end": "run tests that do not require stratisd using Python 3.7.7"}, {"start": "pip install dbus-client-gen==0.4 dbus-python-client-gen==0.7 justbytes==0.11 python-dateutil==2.8.0 wcwidth==0.1.9 psutil==5.6.7 semantic_version==2.6.0\n", "end": "PYTHONPATH=./src make -f Makefile test-travis", "alternative end": "run pylint using Python 3.6.8, omit optional wcwidth dependency"}, {"start": "pip install pylint==2.4.4 dbus-client-gen==0.4 dbus-python-client-gen==0.7 justbytes==0.11 python-dateutil==2.6.1 psutil==5.4.3 semantic_version==2.6.0\n", "end": "PYTHONPATH=./src make -f Makefile lint", "alternative end": "run yamllint 1.23.0 on .travis.yml"}, {"start": "pip install yamllint==1.23.0", "end": "TASK=yamllint", "alternative end": "make -f Makefile $TASK"}], "rstudio/shinydashboard": [], "ceph/ceph-ansible": [{"start": "pip install -r tests/requirements.txt", "end": "if [[ -n $(grep --exclude-dir=.git -P \"\\xa0\" -r .) ]]; then echo 'NBSP characters found'; exit 1; fi", "alternative end": "pytest --cov=library/ --cov=plugins/filter/ -vvvv tests/library/ tests/plugins/filter/"}], "keycloak/keycloak-quickstarts": [], "RTBHOUSE/avro-fastserde": [], "rte-antares-rpackage/leaflet.minicharts": [{"start": "sudo apt-get install --yes libudunits2-dev libproj-dev libgeos-dev libgdal-dev", "end": "rgeos", "alternative end": "Rscript -e 'covr::codecov()'"}], "rte-antares-rpackage/manipulateWidget": [], "rticommunity/rticonnextdds-examples": [{"start": "gem install mdl -v 0.9.0", "end": "if [ -n \"$RTI_MIN_PACKAGE_URL\" ]; then resources/travis/linux_install.py; fi", "alternative end": "if [ -n \"$RTI_MIN_PACKAGE_URL\" ]; then resources/travis/linux_static_analysis.py; fi"}], "RT-Thread/packages": [{"start": "sudo apt-get update && sudo apt-get install python-tk", "end": "sudo apt-get -qq install gcc-multilib libc6:i386 libgcc1:i386 gcc-4.6-base:i386 libstdc++5:i386 libstdc++6:i386 libsdl-dev || true", "alternative end": "cd .. && BASE_ROOT=$(pwd) && mkdir packages_temp && mv packages packages_temp && cd packages_temp && echo \"source \\\"\\$PKGS_DIR/packages/Kconfig\\\"\" > Kconfig"}], "RUB-NDS/TLS-Attacker": [], "Runalyze/Runalyze": [], "runtastic/Matrioska": [{"start": "gem install danger --no-ri --no-doc", "end": "danger", "alternative end": "bash <(curl -s https://codecov.io/bash) -J 'Matrioska'"}], "redhat-developer/vscode-java": [{"start": "npm install -g typescript", "end": "wget http://download.eclipse.org/jdtls/snapshots/jdt-language-server-latest.tar.gz", "alternative end": "mkdir server"}, {"start": "npm install", "end": "npm run compile", "alternative end": "npm run vscode:prepublish"}, {"start": "npm install -g vsce", "end": "vsce package", "alternative end": "ls -ll java-*vsix"}], "Runnable/docker-mock": [{"start": "npm install -g codeclimate-test-reporter", "end": "npm run lint", "alternative end": "npm run coverage"}], "devlucky/Kakapo": [{"start": "gem install danger --no-ri --no-doc", "end": "danger", "alternative end": "pod lib lint --quick"}], "Runnable/scientist": [{"start": "if [[ \"$(npm --version)\" =~ ^1\\..+ ]]; then npm install -g npm@2; fi", "end": "npm run lint:type:start-server", "alternative end": "npm run lint"}], "runtimerevolution/survey": [], "Runnable/ponos": [], "runtimerevolution/citizenship": [], "hercules-team/ruby-augeas": [{"start": "sudo apt-get update", "end": "bundle install"}], "openshift/origin-ci-tool": [{"start": "pip install 'pip<19.0'", "end": "make verify", "alternative end": "make test"}], "ManageIQ/manageiq-schema": [], "modm-io/modm-devices": [{"start": "pip install lxml jinja2 deepdiff CppHeaderParser", "end": "(cd tools/device; make test)", "alternative end": "(cd tools/generator; make init)"}], "sagemathinc/cocalc": [{"start": "pip3 install --upgrade pytest PyYAML", "end": "cd src", "alternative end": "source smc-env"}], "keycloak/keycloak": [], "openshift/rhc": [], "modcluster/mod_cluster": [], "pulp/crane": [{"start": "sudo apt-get update -qq", "end": "mkdir rpm", "alternative end": "touch rpm/__init__.py"}, {"start": "pip install .", "end": "flake8", "alternative end": "nosetests --with-coverage --cover-package crane  --cover-min-percentage 95 --cover-erase"}], "redhat-developer/kestrel-linux-transport": [], "salsify/avro-schema-registry": [], "salsify/ember-cli-pact": [], "openshift/openshift-ansible": [{"start": "pip install --upgrade pip", "end": "tox", "alternative end": "echo \"Here's a list of installed Python packages:\""}], "salesagility/SuiteCRM": [{"start": "sudo apt-get update", "end": "sudo cp ~/.phpenv/versions/$(phpenv version-name)/etc/php-fpm.d/www.conf.default ~/.phpenv/versions/$(phpenv version-name)/etc/php-fpm.d/www.conf 2>/dev/null || true", "alternative end": "sudo cp ~/.phpenv/versions/$(phpenv version-name)/etc/php-fpm.conf.default ~/.phpenv/versions/$(phpenv version-name)/etc/php-fpm.conf"}], "salsify/avro-builder": [{"start": "gem install bundler -v 2.0.1 --no-document", "end": "bundle exec appraisal install --jobs=3", "alternative end": "bundle exec rubocop"}], "wadewegner/sfdx-waw-plugin": [], "salsify/delayed_job_worker_pool": [{"start": "gem install bundler -v '~> 2.1'", "end": "bundle exec rspec", "alternative end": "bundle exec rubocop"}], "salsify/rails-multitenant": [], "salesforce-marketingcloud/FuelSDK-Java": [], "salsify/avromatic": [], "salesforce/design-system-react": [], "salesforce-marketingcloud/FuelSDK-Node-REST": [], "salsify/goldiloader": [], "salesforce-marketingcloud/FuelSDK-Node-SOAP": [], "salsify/ember-cli-dependency-lint": [], "salesforce/pyplyn": [], "salsify/jsonstreamingparser": [], "3scale/apicast": [], "la1k/flyby": [{"start": "cd libpredict-master && mkdir -p build; cd build; cmake -D CMAKE_INSTALL_PREFIX=$LIBPREDICT_FOLDER .. && make && make install", "end": "export LIBPREDICT_LIBRARY_PATH=\"$LIBPREDICT_FOLDER/lib/\"", "alternative end": "export LD_LIBRARY_PATH=\"$LIBPREDICT_LIBRARY_PATH\""}], "hercules-team/augeasproviders": [], "RedHatInsights/vmaas": [{"start": "pip install -U pip", "end": "docker-compose -f docker-compose.test.yml up --build --exit-code-from test", "alternative end": "bash scripts/db_docs_generator.sh"}, {"start": "pip install python-semantic-release", "end": "semantic-release publish"}], "3scale/3scale_ws_api_for_java": [], "redhat-developer-demos/istio-tutorial": [], "salesforce/Argus": [{"start": "pip install --user codecov", "end": "codecov", "alternative end": "df -h"}], "samsung/cordova-tv-webos": [{"start": "npm install -g grunt-cli", "end": "grunt precommit"}], "gluster/glusterdocs": [{"start": "pip install -r requirements.txt", "end": "mkdocs build --clean --strict"}], "psss/did": [{"start": "pip install -U pip setuptools virtualenv python-coveralls", "end": "git fetch --unshallow", "alternative end": "coverage run --source=bin,did -m py.test $CAPTURE tests"}], "samsung/libtuv": [], "namjaejeon/cifsd": [{"start": "sudo apt-get install libelf-dev wget tar gzip python", "end": "wget --no-check-certificate https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/linux-4.1.36.tar.gz", "alternative end": "tar xf linux-4.1.36.tar.gz"}, {"start": "sudo apt-get install cifs-utils", "end": "git clone --branch=ksmbd-tools-next https://github.com/cifsd-team/cifsd-tools", "alternative end": "git clone https://github.com/cifsd-team/cifsd-test-result"}, {"start": "sudo apt-get install liblmdb-dev libgnutls28-dev libgpgme-dev libjansson-dev libarchive-dev libacl1-dev", "end": "mv linux-stable ../", "alternative end": "mv linux ../"}, {"start": "sudo make install > /dev/null", "end": "sudo modprobe ksmbd", "alternative end": "sudo modprobe cifs"}, {"start": "sudo make install > /dev/null", "end": "cd ..", "alternative end": "sudo mkdir -p /etc/ksmbd/"}], "ExactTarget/fuelux": [{"start": "time npm install", "end": "time ./node_modules/bower/bin/bower update", "alternative end": "export DISPLAY=':99.0'"}], "gearvrf/GearVRf-Demos": [], "mbroz/cryptsetup": [], "samsung/Tizen.CircularUI": [], "samsung/netcoredbg": [{"start": "if [ ${TRAVIS_OS_NAME} = 'osx' ]; then\n  brew update\n  brew install ninja\nelif [ ${TRAVIS_OS_NAME} = 'linux' ] && [ ! -z \"$TIZEN\" ]; then\n  sudo apt-get update && sudo apt-get install -y --allow-unauthenticated gbs rpm2cpio\nfi\n", "end": "eval \"${MATRIX_EVAL}\"\nif [ -z \"$TIZEN\" ]; then\n  # Build and run tests\n  mkdir build && cd build\n  if [ ${TRAVIS_OS_NAME} = 'windows' ]; then\n    powershell -Command \"Set-ExecutionPolicy Unrestricted\"\n    cmake .. -G \"Visual Studio 15 2017 Win64\" -DCMAKE_INSTALL_PREFIX=$PWD/../bin\n    cmake --build . --config Release --target install\n  else\n    cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PWD/../bin\n    ninja && ninja install\n  fi\n  cd ..\n  export PATH=$PWD/.dotnet:$PATH\n  dotnet build tests && dotnet test tests/runner\nelse\n  # Verify that Tizen build does not break\n  cat <<EOF > $HOME/.gbs.conf\n[general]\nprofile = profile.target-TM1.unified\nbuildroot = ~/GBS-ROOT/\n[profile.target-TM1.unified]\nrepos = repo.target.unified, repo.target.base\n[repo.target.unified]\nurl=http://download.tizen.org/releases/milestone/tizen/unified/tizen-unified_20180528.1/repos/standard/packages/\n[repo.target.base]\nurl=http://download.tizen.org/releases/milestone/tizen/base/tizen-base_20180518.1/repos/standard/packages/\nEOF\n  gbs build -A armv7l\nfi\n", "alternative end": "if [ \"$TRAVIS_BRANCH\" = \"$RELEASE_BRANCH\" -a \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then\n  # Tag last commit as 'latest'.\n  git config --local user.name \"Travis\"\n  git config --local user.email \"travis@travis-ci.org\"\n\n  git remote add release \"https://${GITHUB_API_KEY}@github.com/${RELEASE_REPO}.git\"\n\n  git push -d release latest\n  git tag -d latest\n  git tag -a \"latest\" -m \"[Autogenerated] This is the latest version pushed to the ${TRAVIS_BRANCH} branch.\"\n  git push release --tags\n  # Prepare files for deployment\n  if [ -z \"$TIZEN\" ]; then\n    mv bin netcoredbg\n    if [ ${TRAVIS_OS_NAME} = 'windows' ]; then\n      7z a netcoredbg-win64-${TRAVIS_BRANCH}.zip netcoredbg\n    else\n      tar cfz netcoredbg-${TRAVIS_OS_NAME}-${TRAVIS_BRANCH}.tar.gz ./netcoredbg/*\n    fi\n  else\n    # Generate tar.gz from rpm for Tizen SDK\n    RPMFILE=$(find ~/GBS-ROOT/local/repos/target_TM1.unified/armv7l/RPMS -type f -name 'netcoredbg-[0-9]*.rpm')\n    if [ ! -f \"$RPMFILE\" ]; then travis_terminate; fi\n    PKGNAME=`rpm -q --qf \"%{n}\" -p $RPMFILE`\n    PKGVERSION=`rpm -q --qf \"%{v}\" -p $RPMFILE`\n    PKGARCH=`rpm -q --qf \"%{arch}\" -p $RPMFILE`\n    TARGZNAME=$PKGNAME-$PKGVERSION-$PKGARCH.tar.gz\n    mkdir unpacked && cd unpacked\n    rpm2cpio \"$RPMFILE\" | cpio -idmv\n    touch ./home/owner/share/tmp/sdk_tools/$PKGNAME/version-$PKGVERSION\n    tar cfz ../$TARGZNAME --owner=root --group=root -C ./home/owner/share/tmp/sdk_tools .\n    cd ..\n    cp \"$RPMFILE\" ./\n  fi\nfi\n"}], "chorankates/rouster": [], "redhat-developer/vscode-yaml": [{"start": "npm install -g typescript", "end": "if [ $TRAVIS_OS_NAME == \"linux\" ]; then\n  export DISPLAY=':99.0';\n  /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &\nfi\n", "alternative end": "npm install"}, {"start": "npm install", "end": "npm run vscode:prepublish", "alternative end": "npm install -g vsce"}, {"start": "npm install -g vsce", "end": "vsce package", "alternative end": "npm test"}], "darcy-framework/darcy-webdriver": [], "samsung/rlottie": [], "samsung/WATT": [], "stratis-storage/stratis-docs": [{"start": "pip3 install yamllint==1.23.0", "end": "TASK=yamllint", "alternative end": "make -f Makefile $TASK"}], "samsung/TizenRT": [], "apache/qpid-dispatch": [{"start": "sudo apt-get install clang-10 llvm-10-dev", "end": "CC=clang-10", "alternative end": "CXX=clang++-10"}], "samsung/cordova-plugin-toast": [{"start": "npm install -g grunt-cli", "end": "grunt precommit"}], "samsung/grunt-cordova-sectv": [{"start": "npm install -g grunt-cli", "end": "grunt precommit"}], "quipucords/quipucords": [{"start": "pip install -U pip", "end": "nvm install node", "alternative end": "npm install swagger-cli"}, {"start": "npm install swagger-cli", "end": "make lint", "alternative end": "make server-init"}], "wvanbergen/scoped_search": [], "sandialabs/scot": [], "SAP/openui5": [{"start": "npm install -g grunt-cli", "end": "gh-pages"}], "TriBITSPub/TriBITS": [{"start": "sudo apt-get update -qq", "end": "wget -O cmake.sh https://cmake.org/files/v3.10/cmake-3.10.3-Linux-x86_64.sh", "alternative end": "sudo mkdir /usr/local/cmake-3.10.3"}, {"start": "sudo apt-get -y install gfortran", "end": "cd ..", "alternative end": "mkdir tribits-build"}], "SAP/ui5-builder": [], "SAP/ui5-project": [], "SAP/cf-java-logging-support": [], "SAP/less-openui5": [], "libvirt/libvirt-go": [{"start": "sudo make install", "end": "popd", "alternative end": "sudo cp libvirtd.sasl /etc/sasl2/libvirt.conf"}], "sassoftware/epdb": [{"start": "pip install tox", "end": "virtualenv --version", "alternative end": "easy_install --version"}], "patternfly/patternfly-ng": [], "kubevirt/containerized-data-importer": [], "patternfly/patternfly-design": [], "SAP/cloud-dirigible": [], "3scale/3scale_ws_api_for_nodejs": [{"start": "npm install -g npm@2", "end": "CXX=g++-4.8", "alternative end": "TEST_3SCALE_APP_ID=4d4b20b9"}], "openshift/ansible-service-broker": [], "satellogic/orbit-predictor": [{"start": "pip install -U pip", "end": "pytest -v  --cov-report= --cov=orbit_predictor tests/", "alternative end": "flake8 orbit_predictor"}, {"start": "pip install coveralls", "end": "coveralls", "alternative end": "True"}], "CentOS-PaaS-SIG/linchpin": [{"start": "pip install -U setuptools", "end": "flake8 --exclude=\\.eggs,tests,docs,config/Dockerfiles --ignore=E124,E303,W504 --max-line-length 80 .", "alternative end": "$(which python) setup.py test"}], "lightblue-platform/lightblue-core": [], "satellogic/telluric": [{"start": "pip install pycodestyle mypy", "end": "pycodestyle . --count", "alternative end": "mypy --ignore-missing-imports --check-untyped-defs telluric/"}, {"start": "pip install numpy", "end": "pytest -vv", "alternative end": "pip uninstall telluric -y"}, {"start": "pip install --editable .", "end": "pytest --cov", "alternative end": "pip install codecov"}, {"start": "pip install codecov", "end": "codecov"}], "redhat-openstack/openstack-puppet-modules": [], "SAP/ui5-uiveri5": [{"start": "npm install --no-optional", "end": "required", "alternative end": "stable"}], "openshift/jenkins-plugin": [], "ManageIQ/manageiq-content": [], "saucelabs/saucerest-java": [{"start": "pip install --user codecov", "end": "mvn install -DskipTests=true -Dgpg.skip=true -B -V", "alternative end": "openjdk8"}], "cloudfoundry-incubator/multiapps-controller": [], "SAP/fundamental-ngx": [], "saucelabs/sauce_whisk": [], "SAP/fundamental-vue": [], "saucelabs/sauce_ruby": [], "saucelabs/monocle": [{"start": "pip install tox", "end": "tox"}], "saucelabs/sauce-java": [{"start": "pip install --user codecov", "end": "True", "alternative end": "mvn test -B -V"}], "patternfly/patternfly-sass": [{"start": "npm install bower", "end": "bundle exec rake compile", "alternative end": "bundle exec rake serve > /dev/null 2>&1 &"}], "SAP/node-hdb": [], "feedhenry-raincatcher/raincatcher-core": [], "SAP/angular-metaui": [], "radanalyticsio/oshinko-webui": [{"start": "sudo apt-get update -qq", "end": "sudo sed -i \"s/\\DOCKER_OPTS=\\\"/DOCKER_OPTS=\\\"--insecure-registry=172.30.0.0\\/16 /g\" /etc/default/docker", "alternative end": "sudo cat /etc/default/docker"}, {"start": "npm install -g protractor", "end": "export DISPLAY=:99.0", "alternative end": "sh -e /etc/init.d/xvfb start"}], "autotest/tp-qemu": [{"start": "pip install sphinx", "end": "inspekt checkall --disable-style E501,E265,W601,E402,E722,E741 --no-license-check"}], "savoirfairelinux/num2words": [{"start": "pip install tox-travis", "end": "tox", "alternative end": "if [ -e .coverage ]; then coveralls; fi"}], "savoirfairelinux/opendht": [{"start": "# proxy builds\nif [[ \"$OPENDHT_TEST_JOB\" != *\"opendht.llvm\"* ]] && [[ \"$OPENDHT_TEST_JOB\" != *\"opendht.classic\"* ]]; then\n  docker build -t opendht-proxy -f docker/DockerfileTravisProxy .;\n  options='-DOPENDHT_SANITIZE=On ';\n  if [[ \"$OPENDHT_TEST_JOB\" == *\"opendht.proxyserver\"* ]] || [[ \"$OPENDHT_TEST_JOB\" == *\"opendht.push\"* ]]; then\n    options+='-DOPENDHT_PROXY_SERVER=ON ';\n  else\n    options+='-DOPENDHT_PROXY_SERVER=OFF ';\n  fi\n  if [[ \"$OPENDHT_TEST_JOB\" == *\"opendht.proxyclient\"* ]] || [[ \"$OPENDHT_TEST_JOB\" == *\"opendht.push\"* ]]; then\n    options+='-DOPENDHT_PROXY_CLIENT=ON ';\n  else\n    options+='-DOPENDHT_PROXY_CLIENT=OFF ';\n  fi\n  if [[ \"$OPENDHT_TEST_JOB\" == *\"opendht.push\"* ]]; then\n    options+='-DOPENDHT_PUSH_NOTIFICATIONS=ON ';\n  else\n    options+='-DOPENDHT_PUSH_NOTIFICATIONS=OFF ';\n  fi\n  docker run opendht-proxy /bin/sh -c \"cd /root/opendht && mkdir build && cd build && cmake -DCMAKE_INSTALL_PREFIX=/usr -DOPENDHT_PYTHON=ON -DOPENDHT_LTO=ON -DOPENDHT_TESTS=ON $options .. && make -j8 && ./opendht_unit_tests && make install\";\nfi\n", "end": "# llvm build\nif [[ \"$OPENDHT_TEST_JOB\" == *\"opendht.llvm\"* ]]; then\n  docker build -f docker/DockerfileTravisLlvm .\nfi\n", "alternative end": "adrien.beraud@savoirfairelinux.com"}], "SAP/fundamental-react": [], "teiid/teiid": [], "hawkular/hawkular-metrics": [], "savoirfairelinux/sflvault": [{"start": "pip install -r requirements.freeze", "end": "nosetests -w server"}], "SAP/ui5-inspector": [{"start": "npm install -g grunt-cli", "end": "xvfb", "alternative end": "grunt travis"}], "pulp/pulp_rpm": [], "SAP/openui5-masterdetail-app": [], "SAP/openui5-worklist-app": [], "savoirfairelinux/sous-chef": [{"start": "docker-compose exec web sh -c \"pip install pep8 coveralls\"", "end": "docker-compose exec web sh -c \"PYTHONWARNINGS=once coverage run --omit=*.virtualenvs*,*virtualenv* src/manage.py test --settings=sous_chef.settings_test member meal order notification delivery note billing page\"", "alternative end": "docker-compose exec web sh -c \"python3 src/manage.py test --settings=sous_chef.settings_test_fr member meal order notification delivery note billing page\""}], "stratis-storage/devicemapper-rs": [{"start": "pip3 install yamllint==1.23.0", "end": "TASK=yamllint", "alternative end": "master"}], "sialcasa/mvvmFX": [], "pulp/pulp_python": [], "sbg/sevenbridges-python": [{"start": "if [[ $TRAVIS_PYTHON_VERSION < 3 ]]; then pip install -r requirements2.txt; else pip install -r requirements.txt; fi", "end": "flake8 sevenbridges", "alternative end": "py.test -v --cov=sevenbridges"}], "ManageIQ/ovirt": [], "SAP/connect-openui5": [], "jbossdemocentral/coolstore-microservice": [{"start": "BUILD_CMD=\"npm install --prefix coolstore-ui\"", "end": "$BUILD_CMD"}], "rabix/cwl-ts": [{"start": "npm install", "end": "True", "alternative end": "develop"}], "rabix/composer": [], "freeipa/freeipa-container": [{"start": "if test -n \"$ca\" ; then sudo apt-get install -y libnss3-tools ; fi", "end": "export docker=${docker:-docker}", "alternative end": "if test \"$docker\" == \"sudo podman\" ; then . /etc/os-release && echo \"deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/ /\" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list && curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/Release.key | sudo apt-key add - && sudo apt-get update -y && sudo apt-get install -y podman ; fi"}, {"start": "if test \"$docker\" == \"sudo podman\" ; then . /etc/os-release && echo \"deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/ /\" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list && curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/Release.key | sudo apt-key add - && sudo apt-get update -y && sudo apt-get install -y podman ; fi", "end": "True", "alternative end": "TRAVIS_COMMIT_RANGE=${TRAVIS_COMMIT_RANGE:-$TRAVIS_COMMIT~..$TRAVIS_COMMIT} && echo \"$TRAVIS_COMMIT_RANGE\""}], "Katello/hammer-cli-katello": [], "rabix/bunny": [{"start": "sudo apt-get install libffi-dev libssl-dev", "end": "cd rabix-integration-testing", "alternative end": "git clone https://github.com/common-workflow-language/common-workflow-language.git"}], "SAP/openui5-sample-app": [], "ScalaConsultants/reactive-rabbit": [], "weld/api": [], "SAP/ui5-webcomponents": [{"start": "gem install jekyll -v 3.8.6", "end": "yarn build", "alternative end": "yarn test"}], "jboss/metadata": [], "oVirt/ovirt-engine": [], "oVirt/vdsm": [], "sapcc/elektra": [{"start": "gem install bundler", "end": "bundle update --bundler", "alternative end": "bundle install --jobs=3 --retry=3 --without \"development production\""}], "SatelliteQE/robottelo": [{"start": "sudo apt-get install -y libgnutls-dev", "end": "pip uninstall -y pycurl", "alternative end": "pip install --compile --no-cache-dir pycurl"}, {"start": "pip install --compile --no-cache-dir pycurl", "end": "pre-commit clean", "alternative end": "pre-commit run --all-files"}], "SAP/cf-nodejs-logging-support": [], "theforeman/foreman_maintain": [{"start": "if ruby -v | grep 'ruby 2.0';then\n  gem install bundler -v '~> 1.3'\nelif ruby -v | grep 'ruby 2.4';then\n  gem install bundler -v '~> 1.17'\nfi", "end": "2.0.0", "alternative end": "2.3.3"}], "SAP/fundamental": [{"start": "gem update --system", "end": "script", "alternative end": "bash ./ci-scripts/publish.sh"}], "alanbover/deathnode": [], "Schibsted-Tech-Polska/stp.rtm": [], "SAP/python-pyodata": [{"start": "pip install .", "end": "make check", "alternative end": "bandit -r -lll ."}], "Schibsted-Tech-Polska/nodesi": [], "Schibsted-Tech-Polska/good-guy-http": [], "cgrail/github-chrome-fullname": [], "SciLifeLab/Sarek": [], "SAP/openui5-basic-template-app": [], "robinandeer/puzzle": [{"start": "pip install gemini", "end": "wget https://s3-us-west-2.amazonaws.com/robinandeer/HapMapFew.db -O tests/fixtures/HapMapFew.db", "alternative end": "wget https://s3-us-west-2.amazonaws.com/robinandeer/HapMapSv.db -O tests/fixtures/HapMapSv.db"}], "SAP/grunt-openui5": [], "SAP/ui5-tooling": [], "scottlogic/finput": [], "SAP/olingo-jpa-processor-v4": [], "SAP/PyHDB": [{"start": "pip install -U pip setuptools wheel", "end": "pytest -v"}], "SAP/ui5-cli": [], "sdl/odata": [], "SAP/ui5-server": [], "seagate/openSeaChest": [], "seatgeek/nomad-helper": [], "seatgeek/sixpack-php": [], "seegno/bookshelf-json-columns": [], "seatgeek/nomad-firehose": [], "seatgeek/fuzzywuzzy": [{"start": "pip install -U pip setuptools wheel", "end": "$TEST_SUITE", "alternative end": "always"}], "abrom/rocketchat-ruby": [{"start": "gem update bundler", "end": "bundle install --jobs=3 --retry=3", "alternative end": "ruby --version | grep '^ruby 2\\.3\\.' > /dev/null || gem install rubocop"}, {"start": "ruby --version | grep '^ruby 2\\.3\\.' > /dev/null || gem install rubocop", "end": "curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter", "alternative end": "chmod +x ./cc-test-reporter"}], "seegno/uphold-sdk-php": [], "seatgeek/hashi-helper": [], "seegno/objection-guid": [], "seatgeek/react-infinite": [], "seegno/primus-objc": [{"start": "gem install cocoapods", "end": "seegno:AoXFWrkPDMfOuaxvckPs7hc0"}], "seegno/bookshelf-cascade-delete": [], "seatgeek/android-PlacesAutocompleteTextView": [], "seegno/objection-unique": [], "seatgeek/sixpack": [{"start": "pip install -r requirements.txt", "end": "redis-server", "alternative end": "cd sixpack && nosetests --with-coverage --cover-erase --cover-package=sixpack"}], "seibert-media/Highton": [{"start": "pip install .", "end": "python -m pytest"}], "seatgeek/docker-build-cacher": [{"start": "brew update > /dev/null", "end": "upx -q --best --ultra-brute \"./releases/${BINARY_NAME}\"", "alternative end": "export BINARY_NAME=\"docker-build-cacher-$(uname -s)-$(uname -m)\""}], "seatgeek/SGHTTPRequest": [{"start": "gem install cocoapods --no-rdoc --no-ri --no-document --quiet", "end": "cd Example && pod install", "alternative end": "xctool test -workspace SGHTTPRequest.xcworkspace  -scheme SGHTTPRequestTests -sdk iphonesimulator ONLY_ACTIVE_ARCH=NO"}], "seatgeek/businesstime": [], "segmentio/yal": [], "sendwithus/sendwithus_ruby": [], "segmentio/is-url": [], "sendwithus/vic-startup-jobs": [], "sendwithus/sendwithus_python": [{"start": "pip install tox", "end": "tox"}], "sendwithus/sendwithus_nodejs": [{"start": "npm install", "end": "12", "alternative end": "10"}], "sendwithus/sendwithus_php": [], "mrworf/photoframe": [{"start": "sudo apt-get update", "end": "./travis/validate.sh"}], "sensorberg-dev/android-sdk": [], "Seravo/seravo-plugin": [], "JayVora-SerpentCS/MassEditing": [], "JayVora-SerpentCS/SerpentCS_Contributions": [{"start": "pip install git+https://github.com/jseutter/ofxparse.git", "end": "travis_install_nightly", "alternative end": "travis_run_tests"}], "demoiselle/framework": [], "segmentio/analytics.js": [], "platform-experience/serviceportal-widget-library": [], "segmentio/analytics-php": [], "sevenval/SHMT": [], "MontiCore/monticore": [{"start": "pip install mkdocs", "end": "sh docs/scripts/preprocessing.sh", "alternative end": "mkdocs build --verbose --clean --strict"}], "segmentio/ware": [], "segmentio/metalsmith": [], "shadow-robot/sr-ros-interface": [], "segmentio/myth": [], "Shapelets/Khiva": [{"start": "$HOME/Library/Caches/Homebrew", "end": "False", "alternative end": "git submodule update --init"}, {"start": "$HOME/Library/Caches/Homebrew", "end": "False", "alternative end": "git submodule update --init"}], "Shapelets/Khiva-python": [{"start": "$HOME/Library/Caches/Homebrew", "end": "${HOME}/.conan", "alternative end": "codecov -F MacOS -X gcov"}, {"start": "$HOME/Library/Caches/Homebrew", "end": "${HOME}/.conan", "alternative end": "source .CI/travis/install.sh"}], "shapesecurity/shift-ast-js": [], "shapesecurity/shift-java": [], "segmentio/analytics-ruby": [], "shapesecurity/shift-parser-js": [], "shapesecurity/shift-codegen-js": [], "shapesecurity/shift-reducer-js": [], "shapesecurity/shift-spec": [{"start": "npm install", "end": "npm test", "alternative end": "8"}], "shapesecurity/salvation": [], "shapesecurity/superpack-js": [], "shiwaforce/poco": [{"start": "pip install -r requirements.txt", "end": "curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter", "alternative end": "chmod +x ./cc-test-reporter"}], "ShiftLeftSecurity/joern": [], "shinesolutions/aem-aws-stack-builder": [], "shogodev/argilla": [], "Shopify/theme-scripts": [], "shopsys/http-smoke-testing": [], "Shopify/js-buy-sdk": [], "shopware/devdocs": [], "Shopify/browser_sniffer": [{"start": "gem update bundler", "end": "bundle exec rake test"}], "Shopify/shopify_app": [], "Shopify/unity-buy-sdk": [{"start": "xcrun instruments -w \"iPhone 8 (12.0) [\" || true", "end": "./scripts/test_unity.sh", "alternative end": "./scripts/test_iOS.sh"}], "Shopify/graphql_swift_gen": [{"start": "gem install bundler -v 1.14.3", "end": "2.3.3", "alternative end": "bundle exec rake"}], "fed135/ha-store": [], "ShuyunFF2E/ccms-components": [], "Shopify/buildkit": [{"start": "gem install bundler", "end": "2.5"}], "shuup/shuup": [{"start": "npm install -g selenium-standalone@6.15.3", "end": "selenium-standalone install", "alternative end": "selenium-standalone start &"}, {"start": "npm install -g selenium-standalone@6.15.3", "end": "selenium-standalone install", "alternative end": "selenium-standalone start &"}, {"start": "pip install -U pip", "end": "tox -vv", "alternative end": "coveralls"}], "Shopify/starter-theme": [], "Shopify/slate": [], "legatoproject/legato-af": [], "Shopify/identity_cache": [], "riscv/riscv-openocd": [], "signalfx/signalfx-python": [{"start": "pip install tox tox-travis", "end": "tox", "alternative end": "False"}], "riscv/riscv-isa-manual": [{"start": "sudo apt-get -qq update && sudo apt-get install -y --no-install-recommends texlive-fonts-recommended texlive-latex-extra texlive-fonts-extra dvipng texlive-latex-recommended", "end": "make -C build", "alternative end": "git tag \"draft-$(date +'%Y%m%d')-$(git log --format=%h -1)\""}], "sigopt/sigopt-examples": [{"start": "pip install sigopt", "end": "python -c \"import numpy; print(numpy.__version__)\"", "alternative end": "./test/run_python classifier classifier_tuner.py --client-token $SIGOPT_API_TOKEN --num-sigopt-suggestions 2 --num-random-searches 1 --grid-search-width 1"}], "riscv/riscv-gnu-toolchain": [{"start": "brew update", "end": "export MAKEFLAGS=\"-j3\"", "alternative end": "travis_wait 60 git submodule update --init --recursive"}], "sifive/freedom-metal": [{"start": "docker exec -t host bash -c \"yes | apt-get update\"", "end": "sudo curl -L -o /tmp/wake.deb https://github.com/sifive/wake/releases/download/v0.19.0/ubuntu-16-04-wake_0.19.0-1_amd64.deb", "alternative end": "sudo apt install /tmp/wake.deb"}, {"start": "sudo apt install /tmp/wake.deb", "end": "docker exec -t host bash -c \"cd /travis && ./scripts/check-format\"", "alternative end": "wake --init . && wake -x Unit"}], "riscv/riscv-tools": [], "sentinel-hub/eo-learn": [{"start": "sudo apt-get install -y libgdal-dev", "end": "if [ $TRAVIS_PYTHON_VERSION == '3.6' ]; then python install_all.py -e; else python install_all.py; fi", "alternative end": "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then sentinelhub.config --instance_id $INSTANCE_ID && sentinelhub.config --sh_client_secret $SH_CLIENT_SECRET && sentinelhub.config --sh_client_id $SH_CLIENT_ID ; fi"}], "sinnerschrader/aem-react-js": [], "sinnerschrader/esdoc-custom-theme": [], "sinnerschrader/feature-hub": [], "sinnerschrader/aem-react": [{"start": "not valid", "stop": "not valid"}], "sinnerschrader/account-tool": [], "sismics/music": [], "sismics/reader": [], "sitewards/B2BProfessional": [], "sinnerschrader/react-over-scroll": [], "saferpay/jsonapi": [], "sixhours-team/memcached-spring-boot": [], "deeplearning4j/nd4s": [], "dojo/dojo.io": [{"start": "npm install @dojo/cli grunt-cli typings -g", "end": "pushd .", "alternative end": "if [ -d \"site/source/tutorials/$TUTORIAL/demo/initial/biz-e-corp\" ]; then cd site/source/tutorials/$TUTORIAL/demo/initial/biz-e-corp || travis_terminate 1; npm install || travis_terminate 1; npm run build || travis_terminate 1; fi"}, {"start": "if [ -d \"site/source/tutorials/$TUTORIAL/demo/initial/biz-e-corp\" ]; then cd site/source/tutorials/$TUTORIAL/demo/initial/biz-e-corp || travis_terminate 1; npm install || travis_terminate 1; npm run build || travis_terminate 1; fi", "end": "popd", "alternative end": "pushd ."}, {"start": "if [ -d \"site/source/tutorials/$TUTORIAL/demo/finished/biz-e-corp\" ]; then cd site/source/tutorials/$TUTORIAL/demo/finished/biz-e-corp || travis_terminate 1; npm install || travis_terminate 1; npm run build || travis_terminate 1; npm test || travis_terminate 1; fi", "end": "popd", "alternative end": "Test site"}], "slackapi/node-slack-interactive-messages": [], "sky-uk/feed": [], "slackapi/python-slackclient": [], "sky-uk/bslint": [{"start": "sudo apt-get install python-enchant", "end": "nosetests --with-coverage --cover-inclusive --cover-package=bslint", "alternative end": "cd bslint && pylint bslint"}], "slockit/DAO": [{"start": "sudo apt-get update -y -qq", "end": "cd tests && ./test.py --compile-test"}], "ONNC/onnc": [], "smarkets/marge-bot": [], "smartnsoft/extra": [], "smartsheet-platform/smartsheet-java-sdk": [], "smartsheet-platform/smartsheet-javascript-sdk": [], "smartsheet-platform/smartsheet-csharp-sdk": [], "Smile-SA/elasticsuite": [], "smartsheet-platform/smartsheet-python-sdk": [], "Smile-SA/magento2-module-store-locator": [], "smsapi/smsapi-php-client": [], "SnowdogApps/magento2-frontools": [], "Snyk/resolve-deps": [{"start": "npm install", "end": "npm test", "alternative end": "Release"}], "Snyk/broker": [], "SnowdogApps/magento2-theme-blank-sass": [], "snipsco/dinghy": [], "Socialbakers/BakeryJS": [], "snipsco/snips-nlu": [{"start": "python -m pip install tox codecov", "end": "tox", "alternative end": "tox -e coverage-report"}], "snipsco/snips-nlu-rs": [], "socialpoint-labs/bsk": [{"start": "make install-tools", "end": "make ci-check", "alternative end": "test $TRAVIS_GO_VERSION != 'tip' && bash <(curl -s https://codecov.io/bash)"}], "snipsco/rustling-ontology": [], "snipsco/Postal": [{"start": "gem install cocoapods --pre --no-document --quiet", "end": "set -o pipefail", "alternative end": "xcodebuild -version"}], "socialwifi/jsonapi-requests": [{"start": "pip install -r base_requirements.txt", "end": "flake8 .", "alternative end": "python -m pytest --cov ."}], "sociomantic-tsunami/swarm": [], "snipsco/rust-threshold-secret-sharing": [], "snipsco/snips-nlu-ontology": [], "sociomantic-tsunami/ocean": [], "SoCreate/angular-playground": [], "sociomantic-tsunami/git-hub": [], "snipsco/rustling": [], "snipsco/tract": [], "SoftwareAG/sagdevops-templates": [], "snipsco/hermes-protocol": [{"start": "(cd platforms/hermes-javascript && npm install && npm start)", "end": "nightly"}], "snipsco/snipsmanager": [{"start": "sudo apt-get update -qq", "end": "python setup.py install", "alternative end": "python setup.py test"}], "srsLTE/srsLTE": [{"start": "sudo apt-get install -qq build-essential cmake libfftw3-dev libmbedtls-dev libpcsclite-dev libboost-program-options-dev libconfig++-dev libsctp-dev libczmq-dev libpcsclite-dev rapidjson-dev colordiff ninja-build clang-format-8", "end": "cpp", "alternative end": "gcc"}], "solana-labs/solana": [], "openboxes/openboxes": [{"start": "npm install", "end": "npm run bundle", "alternative end": "grails test-app unit: --non-interactive -echoOut -echoErr"}], "soixantecircuits/idle-vue": [], "solidfire/solidfire-sdk-python": [{"start": "sudo apt-get install cabal-install", "end": "cabal update", "alternative end": "cabal install pandoc"}], "OpenMRS/openmrs-module-fhir": [], "solita/functional-utils": [], "sonalake/utah-parser": [], "sonalake/generator-jhipster-multitenancy": [{"start": "npm install -g npm", "end": "npm test"}], "mataki/dekiru": [{"start": "gem update --system --no-document", "end": "False", "alternative end": "bundler"}], "kevinsawicki/http-request": [], "SonarSource/sonar-go": [], "SonarSource/sonarqube": [], "SonarSource/SonarTS": [], "SonarSource/eslint-plugin-sonarjs": [], "SonarSource/sonarlint-atom": [], "src-d/hercules": [{"start": "sudo pip3 install cython", "end": "docker run -d --privileged -p 9432:9432 --name bblfshd bblfsh/bblfshd", "alternative end": "docker exec -it bblfshd bblfshctl driver install python bblfsh/python-driver:latest"}, {"start": "sudo pip3 install twine pyopenssl", "end": "test v$(python3 python/setup.py --version) == $TRAVIS_TAG", "alternative end": "set -e"}], "SouthbankSoftware/dbkoda": [], "src-d/vecino": [{"start": "not valid", "stop": "not valid"}], "src-d/go-kallax": [], "SonarSource/slang": [], "SonarSource/sonarlint-cli": [], "src-d/kmcuda": [{"start": "sudo apt-get update", "end": "mkdir src/build", "alternative end": "cd src/build"}], "src-d/go-queue": [], "src-d/ml": [{"start": "pip install --upgrade pip", "end": "SCRIPT=\"coverage run --concurrency=multiprocessing -m unittest discover && coverage combine\"", "alternative end": "script"}, {"start": "pip install -r doc/requirements.txt -r requirements-lint.txt", "end": "test", "alternative end": "3.5"}, {"start": "pip install --upgrade pip", "end": "3.6", "alternative end": "trusty"}, {"start": "pip install --upgrade pip", "end": "codecov", "alternative end": "3.7"}, {"start": "pip install --upgrade pip", "end": "deploy", "alternative end": "3.5"}, {"start": "pip3 install --upgrade pip", "end": "skip", "alternative end": "python3 setup.py bdist_wheel"}], "src-d/awesome-machine-learning-on-source-code": [{"start": "gem install awesome_bot", "end": "awesome_bot --allow 429 --allow-redirect --skip-save-results README.md --white-list dl.acm.org,arxiv.org", "alternative end": "False"}], "src-d/gitbase": [], "src-d/enry": [{"start": "if [[ \"${ONIGURUMA}\" -gt 0 ]]; then\n  export CGO_ENABLED=1\n  export GO_TAGS='oniguruma'\n  # install oniguruma manually as trusty has only ancient 5.x\n  sudo apt-get install -y dpkg # dpkg >= 1.17.5ubuntu5.8 fixes https://bugs.launchpad.net/ubuntu/+source/dpkg/+bug/1730627\n  wget \"http://archive.ubuntu.com/ubuntu/pool/universe/libo/libonig/libonig5_${ONIGURUMA_VERSION}-1_amd64.deb\"\n  sudo dpkg -i \"libonig5_${ONIGURUMA_VERSION}-1_amd64.deb\"\n  wget \"http://archive.ubuntu.com/ubuntu/pool/universe/libo/libonig/libonig-dev_${ONIGURUMA_VERSION}-1_amd64.deb\"\n  sudo dpkg -i \"libonig-dev_${ONIGURUMA_VERSION}-1_amd64.deb\"\nfi;\n", "end": "make test-coverage", "alternative end": "bash <(curl -s https://codecov.io/bash)"}, {"start": "sudo apt-get update", "end": "cd ${HOME}", "alternative end": "curl -sfSL ${OSXCROSS_URL} | tar -C ${HOME} -xzf -"}], "src-d/datasets": [], "Spatie/viewport-utility": [], "src-d/modelforge": [{"start": "pip install --upgrade pip", "end": "SCRIPT=\"coverage run -m unittest discover\"", "alternative end": "style"}, {"start": "pip install -r requirements-lint.txt", "end": "test", "alternative end": "3.6"}, {"start": "pip install --upgrade pip", "end": "test", "alternative end": "3.7"}, {"start": "pip install --upgrade pip", "end": "codecov", "alternative end": "deploy"}, {"start": "pip install --upgrade pip", "end": "python3 setup.py bdist_wheel", "alternative end": "script"}], "src-d/go-mysql-server": [], "src-d/apollo": [{"start": "pip install --upgrade pip", "end": "SCRIPT=\"coverage run --concurrency=multiprocessing -m unittest discover && coverage combine\"", "alternative end": "3.4"}, {"start": "pip install --upgrade pip", "end": "3.5", "alternative end": "SCRIPT=\"coverage run --concurrency=multiprocessing -m unittest discover && coverage combine\""}, {"start": "pip install --upgrade pip", "end": "3.6", "alternative end": "SCRIPT=\"flake8 .\""}, {"start": "pip install flake8", "end": "3.6", "alternative end": "SCRIPT=\"coverage run --concurrency=multiprocessing -m unittest discover && coverage combine\""}, {"start": "pip install --upgrade pip", "end": "codecov", "alternative end": "True"}], "src-d/gemini": [{"start": "pip3 install yapf", "end": "make lint-python", "alternative end": "docker logs db"}], "src-d/wmd-relax": [{"start": "pip3 install --upgrade pip", "end": "generic", "alternative end": "osx"}, {"start": "pip3 install --upgrade pip", "end": "3.7", "alternative end": "pip3 install --upgrade pip"}, {"start": "pip3 install --upgrade pip", "end": "pycodestyle --max-line-length=99 wmd", "alternative end": "coverage run --concurrency=multiprocessing -m unittest discover . && coverage combine"}], "src-d/minhashcuda": [{"start": "pip install numpy auditwheel==1.4 setuptools twine", "end": "python3 setup.py bdist_wheel", "alternative end": "auditwheel repair -w dist dist/*"}, {"start": "pip install numpy auditwheel==1.4 setuptools twine", "end": "python3 setup.py bdist_wheel", "alternative end": "auditwheel repair -w dist dist/*"}, {"start": "pip install numpy auditwheel==1.4 setuptools twine", "end": "python3 setup.py bdist_wheel", "alternative end": "auditwheel repair -w dist dist/*"}, {"start": "pip install numpy auditwheel==1.4 setuptools twine", "end": "python3 setup.py bdist_wheel", "alternative end": "auditwheel repair -w dist dist/*"}], "fusepoolP3/p3-batchrefine": [], "src-d/go-license-detector": [], "src-d/go-siva": [], "speedment/speedment": [], "src-d/go-git": [], "src-d/flamingo": [], "SparkPost/elixir-sparkpost": [], "src-d/lookout": [{"start": "npm install -g yarn", "end": "tests", "alternative end": "release"}], "src-d/borges": [], "SparkPost/python-sparkpost": [{"start": "pip install -r dev-requirements.txt", "end": "pip uninstall django --yes", "alternative end": "pip install -q django$DJANGO_VERSION"}, {"start": "pip install -q django$DJANGO_VERSION", "end": "flake8 sparkpost test", "alternative end": "py.test --cov sparkpost test/ --cov-report term-missing"}], "bblfsh/libuast": [{"start": "if [[ $TRAVIS_OS_NAME = linux ]]; then sudo apt-get update -y && sudo apt-get install -y libcunit1 libcunit1-doc libcunit1-dev gcc-mingw-w64-x86-64; fi", "end": "make package-all", "alternative end": "ls -l ./build"}], "SparkPost/node-sparkpost": [], "src-d/style-analyzer": [{"start": "pip install --upgrade pip cython codecov", "end": "cd $(pip show lookout-style|grep Location|cut -d' ' -f2)/lookout/style", "alternative end": "find . -name tests -type d -exec chmod 555 {} \\;"}, {"start": "pip3 install git+https://github.com/facebookresearch/fastText@51e6738d734286251b6ad02e4fdbbcfe5b679382", "end": "pip3 uninstall -y modelforge", "alternative end": "pip3 install --no-warn-conflicts modelforge>=0.12.1"}, {"start": "pip3 install --no-warn-conflicts modelforge>=0.12.1", "end": "coverage run --concurrency=multiprocessing -m unittest discover", "alternative end": "coverage combine"}, {"start": "pip install -r doc/requirements.txt -r requirements-lint.txt", "end": "set -e", "alternative end": "make check"}, {"start": "pip install --upgrade pip cython codecov", "end": "cd $(pip show lookout-style|grep Location|cut -d' ' -f2)/lookout/style", "alternative end": "find . -name tests -type d -exec chmod 555 {} \\;"}, {"start": "pip3 install git+https://github.com/facebookresearch/fastText@51e6738d734286251b6ad02e4fdbbcfe5b679382", "end": "pip3 uninstall -y modelforge", "alternative end": "pip3 install --no-warn-conflicts modelforge>=0.12.1"}, {"start": "pip3 install --no-warn-conflicts modelforge>=0.12.1", "end": "3.6", "alternative end": "set -e"}, {"start": "pip install --upgrade pip cython codecov", "end": "cd $(pip show lookout-style|grep Location|cut -d' ' -f2)/lookout/style", "alternative end": "find . -name tests -type d -exec chmod 555 {} \\;"}, {"start": "pip3 install git+https://github.com/facebookresearch/fastText@51e6738d734286251b6ad02e4fdbbcfe5b679382", "end": "pip3 uninstall -y modelforge", "alternative end": "pip3 install --no-warn-conflicts modelforge>=0.12.1"}, {"start": "pip3 install --no-warn-conflicts modelforge>=0.12.1", "end": "codecov", "alternative end": "deploy"}, {"start": "pip3 install --upgrade pip", "end": "skip", "alternative end": "test $(python3 setup.py --version) == $TRAVIS_TAG"}, {"start": "make install-helm", "end": "HELM_RELEASE=lookout-style-analyzer HELM_CHART=lookout-style-analyzer K8S_NAMESPACE=lookout HELM_ARGS=\"--tiller-namespace=lookout --repo https://src-d.github.io/charts/stable/ --set image.tag=$TRAVIS_TAG -f .helm_staging_format.yml\" make deploy", "alternative end": "Deploy typos to staging"}, {"start": "make install-helm", "end": "HELM_RELEASE=lookout-typos-analyzer HELM_CHART=lookout-typos-analyzer K8S_NAMESPACE=lookout HELM_ARGS=\"--tiller-namespace=lookout --repo https://src-d.github.io/charts/stable/ --set image.tag=$TRAVIS_TAG -f .helm_staging_typos.yml\" make deploy", "alternative end": "True"}], "SparkPost/php-sparkpost": [], "src-d/lapjv": [{"start": "pip install --upgrade pip", "end": "python3 -m unittest discover .", "alternative end": "False"}], "src-d/jgscm": [{"start": "pip install --upgrade pip", "end": "pycodestyle --max-line-length=100 .", "alternative end": "python -c \"import jgscm\""}], "splone/splonebox-core": [{"start": "cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr .. && make -j2 && sudo make install", "end": "cd ../..", "alternative end": "rm -rf cmocka-1.1.3"}], "src-d/tmsc": [{"start": "not valid", "stop": "not valid"}], "src-d/go-billy": [], "SparkPost/java-sparkpost": [], "splunk/pion": [], "SparkPost/wordpress-sparkpost": [], "SparkPost/ruby-sparkpost": [], "src-d/proteus": [], "SparkPost/gosparkpost": [], "SparkPost/nodemailer-sparkpost-transport": [], "sourcegraph/appdash": [], "sportngin/hubstats": [{"start": "gem install bundler -v 1.17.3", "end": "bundle _1.17.3_ install --jobs=3 --retry=3", "alternative end": "master"}], "quii/mockingjay-server": [], "sourcegraph/srclib-go": [], "sourcegraph/srclib-python": [{"start": "pip install setuptools", "end": "mkdir -p $HOME/src/sourcegraph.com/sourcegraph", "alternative end": "mv $TRAVIS_BUILD_DIR $HOME/src/sourcegraph.com/sourcegraph/srclib-python"}, {"start": "make install", "end": "make test"}], "sourcegraph/srclib": [{"start": "gem update bundler", "end": "curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -", "alternative end": "sudo add-apt-repository -y ppa:openjdk-r/ppa"}, {"start": "sudo apt-get update", "end": "export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/", "alternative end": "npm install -g typescript"}, {"start": "npm install -g typescript", "end": "make", "alternative end": "make test"}], "spotify/bazel-tools": [], "spotify/async-google-pubsub-client": [], "spotify/mobius": [], "sourcegraph/javascript-typescript-langserver": [{"start": "npm install -g npm@6.0.0", "end": "npm ci", "alternative end": "npm run lint"}], "spotify/dns-java": [], "springload/react-portal-popover": [], "sourcegraph/python-langserver": [], "springload/wagtaildraftail": [{"start": "npm install", "end": "make test-ci", "alternative end": "coveralls-lcov -v -n coverage/lcov.info > js_coverage.json"}], "sourcegraph/go-langserver": [], "springload/wagtailgmaps": [{"start": "pip install tox coveralls", "end": "make test-ci", "alternative end": "coveralls-lcov -v -n coverage/lcov.info > js_coverage.json"}], "spotify/reactochart": [], "springload/draftail": [], "sourcegraph/jsonrpc2": [], "springload/wagtail-django-recaptcha": [{"start": "pip install tox coveralls", "end": "make test-ci", "alternative end": "coveralls-lcov -v -n coverage/lcov.info > js_coverage.json"}], "sourcegraph/codeintellify": [], "springload/react-d3-integration": [], "springload/draftjs_exporter": [{"start": "pip install -e '.[testing]'", "end": "make lint", "alternative end": "make benchmark"}, {"start": "npm install --no-optional --no-audit --progress=false", "end": "npm run lint", "alternative end": "pip install tox coveralls==1.10.0"}, {"start": "pip install tox coveralls==1.10.0", "end": "make test-ci", "alternative end": "coveralls"}], "danielnorberg/auto-matter": [], "sourcegraph/go-diff": [], "sourcegraph/syntaxhighlight": [], "sourcegraph/checkup": [], "spryker/demoshop": [], "scup/speck": [], "sourcegraph/go-vcs": [], "sourcegraph/src-cli": [], "squarespace/template-compiler": [], "squarespace/jersey2-guice": [], "squarespace/pgbedrock": [{"start": "pip install -e . -r requirements-docs.txt", "end": "make docs", "alternative end": "cp -r pgbedrock/ /opt/"}, {"start": "pip install coveralls", "end": "coveralls"}], "squarespace/datasheets": [{"start": "pip install tox coveralls", "end": "TOX_ENV=py27", "alternative end": "TOX_ENV=py36"}], "ashish-gehani/SPADE": [{"start": "sudo apt-get update", "end": "./configure;", "alternative end": "make"}, {"start": "sudo make install", "end": "raza.ahmad@sri.com", "alternative end": "hassaan.irshad@sri.com"}], "squarespace/less-compiler": [], "square/mortar": [], "square/certstrap": [], "square/react-native-square-reader-sdk": [], "stablekernel/aqueduct": [], "square/connect-python-sdk": [{"start": "pip install -r requirements.txt", "end": "nosetests ./test", "alternative end": "openssl aes-256-cbc -K $encrypted_2acd2c8c6780_key -iv $encrypted_2acd2c8c6780_iv -in ./travis-ci/accounts.enc -out ./travis-ci/accounts.json -d"}], "stackbuilders/scalendar": [], "stackbuilders/inflections-hs": [], "weibocom/motan-go": [], "weibocom/motan-php": [{"start": "sudo apt-get install -y iproute2", "end": "sudo cp /sbin/tc /usr/sbin/tc", "alternative end": "travis_retry composer update --prefer-dist --no-interaction --prefer-stable --no-suggest"}], "square/connect-php-sdk": [], "stackbuilders/hapistrano": [{"start": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then brew update && brew install ghc cabal-install zsh; fi", "end": "zsh --version", "alternative end": "cabal --version"}], "square/connect-csharp-sdk": [], "square/quotaservice": [], "stackbuilders/dotenv-hs": [{"start": "pip install --user awscli", "end": "echo $(which pip)", "alternative end": "mkdir -p ~/$TRAVIS_BUILD_NUMBER"}, {"start": "pip install --user awscli", "end": "echo $(which pip)", "alternative end": "mkdir -p ~/$TRAVIS_BUILD_NUMBER"}, {"start": "pip install --user awscli", "end": "echo $(which pip)", "alternative end": "mkdir -p ~/$TRAVIS_BUILD_NUMBER"}], "stackhpc/ansible-role-libvirt-vm": [{"start": "pip install ansible ansible-lint", "end": "ansible --version", "alternative end": "printf '[defaults]\\nroles_path=../' >ansible.cfg"}], "square/connect-ruby-sdk": [], "StamusNetworks/scirius": [{"start": "npm install", "end": "webpack", "alternative end": "cd hunt"}, {"start": "npm install", "end": "npm run build", "alternative end": "node node_modules/eslint/bin/eslint.js -c .eslintrc ."}], "square/sqeduler": [{"start": "gem update --system", "end": "gem --version", "alternative end": "gem update bundler"}, {"start": "gem update bundler", "end": "bundle --version"}], "StarkAndWayne/shield": [], "square/flow": [], "square/git-fastclone": [], "starschema/tableau-web-table-connector": [], "openpreserve/scape-xcorrsound": [{"start": "gem install rdiscount hpricot mustache:0.99.6 ronn", "end": "mkdir build && cd build", "alternative end": "cmake  -DBoost_NO_BOOST_CMAKE=ON .."}], "status-im/nim-beacon-chain": [{"start": "HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_NO_INSTALL_CLEANUP=1 brew install ccache", "end": "NPROC=2", "alternative end": "scripts/setup_official_tests.sh jsonTestsCache"}], "status-im/nim-chronicles": [], "status-im/status-network-token": [], "status-im/nimbus": [{"start": "sudo apt-get install -y librocksdb-dev", "end": "linux", "alternative end": "arm64"}, {"start": "sudo apt-get install -y libpcre3-dev librocksdb-dev", "end": "osx", "alternative end": "NPROC=2"}], "status-im/status-go": [], "stfalcon-studio/lost-and-found": [{"start": "sudo pip install codecov", "end": "composer install --dev", "alternative end": "app/console doctrine:database:create --env=test"}], "storageos/cluster-operator": [{"start": "sudo apt -y update && sudo apt install -y jq", "end": "curl -Lo yq https://github.com/mikefarah/yq/releases/download/2.3.0/yq_linux_amd64 && chmod +x yq && sudo mv yq /usr/local/bin/", "alternative end": "curl -Lo storageos https://github.com/storageos/go-cli/releases/download/1.0.0/storageos_linux_amd64 && chmod +x storageos && sudo mv storageos /usr/local/bin/"}, {"start": "OPERATOR_IMAGE=storageos/cluster-operator:$TRAVIS_TAG make install-manifest", "end": "docker login -u \"$REGISTRY_USER\" -p \"$REGISTRY_PASS\"", "alternative end": "script"}], "Storj/storj.js": [], "Storj/node-libstorj": [{"start": "npm install", "end": "npm run test"}], "stfalcon/portfolio": [], "Storj/storjshare-daemon": [], "Storj/kfs": [], "Storj/storjshare-gui": [], "streamr-dev/engine-and-editor": [], "Storj/core": [], "Storj/bridge": [], "Storj/libstorj": [{"start": "sudo apt-get update -qq", "end": "mkdir /tmp/storj-test", "alternative end": "export TMPDIR=/tmp/storj-test/"}], "Stratio/khermes": [], "strongtyped/active-slick": [], "stripe/subprocess": [], "stripe/unilog": [], "stripe/goforit": [], "stripe/jquery.mobilePhoneNumber": [], "Stratio/crossdata": [], "stripe/openapi": [], "stripe/skycfg": [], "suttacentral/suttacentral": [{"start": "sudo apt-get update", "end": "sudo apt-get -y -o Dpkg::Options::=\"--force-confnew\" install docker-ce", "alternative end": "sudo rm /usr/local/bin/docker-compose"}], "stripe/stripe-python": [{"start": "pip install --upgrade pip virtualenv", "end": "make venv", "alternative end": "if [[ $TRAVIS_PYTHON_VERSION == '2.7' ]]; then make lint; fi"}], "stripe/bonsai": [], "ifesdjeen/zweikopf": [], "stripe/ios-dashboard-ui": [], "stripe/dagon": [{"start": "pip install --user codecov", "end": "$HOME/.m2", "alternative end": "$HOME/.ivy2/cache"}], "stripe/stripe-php": [], "stripe/jquery.payment": [], "stripe/stripe-ruby": [], "stratisproject/Breeze": [{"start": "brew update", "end": "ulimit -n 4098", "alternative end": "os_platform=darwin"}, {"start": "npm install -g npm@6.2.0", "end": "if [ -z \"$TRAVIS_TAG\" ] ; then TRAVIS_TAG=cd-unstable; fi", "alternative end": "npm --version"}], "stripe/sequins": [], "stripe/stripe-ios": [{"start": "SIMULATOR_ID=$(xcrun instruments -s | grep -o \"iPhone 6 (11.4) \\[.*\\]\" | grep -o \"\\[.*\\]\" | sed \"s/^\\[\\(.*\\)\\]$/\\1/\")", "end": "open /Applications/Xcode.app/Contents/Developer/Applications/Simulator.app --args -CurrentDeviceUDID $SIMULATOR_ID", "alternative end": "./ci_scripts/check_version.rb"}], "stripe/mosql": [], "stripe/stripe-java": [], "stripe/mongoriver": [], "sugarcrm/Tidbit": [], "stripe/falconer": [], "sugarcrm/sucrose": [], "stripe/stripe-node": [], "stripe/stripe-go": [], "stripe/einhorn": [], "stripe/brushfire": [], "stripe/react-stripe-elements": [], "stripe/stripe-mock": [], "team-supercharge/rxsnappy": [], "team-supercharge/ShimmerLayout": [], "team-supercharge/SCConfiguration": [{"start": "gem install activesupport -v 4.2.6", "end": "pod install --project-directory=Example", "alternative end": "set -o pipefail && xcodebuild test -workspace Example/SCConfiguration.xcworkspace -scheme SCConfiguration-Example -sdk iphonesimulator ONLY_ACTIVE_ARCH=NO | xcpretty"}], "SurveyMonkey/pyteamcity": [{"start": "travis_retry pip install python-coveralls", "end": "tox", "alternative end": "coveralls"}], "SUSE/rmt": [], "SUSE/hackweek": [{"start": "gem install bundler -v \"$(grep -A 1 \"BUNDLED WITH\" Gemfile.lock | tail -n 1)\"", "end": "wget -nv http://sphinxsearch.com/files/dicts/en.pak", "alternative end": "sudo apt-get -qq update"}, {"start": "sudo apt-get install sphinxsearch", "end": "RAILS_ENV=test bundle exec rake dev:bootstrap --trace", "alternative end": "bundle exec rspec --color --format documentation"}], "SUSE/Portus": [], "swiftstack/ProxyFS": [], "Swirrl/grafter": [], "Swirrl/tripod": [], "SUSE/doc-caasp": [], "Swimlane/trafficlight": [], "SUSE/salt-netapi-client": [], "swisnl/laravel-fulltext": [], "Swimlane/mongtype": [], "swisnl/jQuery-contextMenu": [], "openSUSE/daps": [{"start": "sudo apt-get update", "end": "git clone https://github.com/openSUSE/suse-xsl.git suse", "alternative end": "./configure --sysconfdir=/etc"}, {"start": "sudo make install", "end": "./.travis-debug", "alternative end": "echo \"Done\""}], "Swimlane/DocSPA": [], "swisnl/json-api-client": [], "swisnl/laravel-graylog2": [], "openSUSE/software-o-o": [{"start": "gem install bundler:1.17.2", "end": "bundle exec rake rubocop", "alternative end": "bundle exec rails test"}], "Swimlane/ngx-charts": [{"start": "npm install", "end": "npm run build", "alternative end": "npm run build:lib:prod"}], "SUSE/zypper-docker": [], "openSUSE/obs-docu": [], "swisnl/json-api-server": [], "SUSE/doc-sle": [], "SUSE/sle2docker": [{"start": "gem install bundler", "end": "bundle exec rake test", "alternative end": "bundle exec rubocop -V"}], "Swimlane/coconspirators": [], "Swimlane/ngx-ui": [{"start": "npm install", "end": "npm run build", "alternative end": "npm run build:lib"}], "Swimlane/makobot": [], "Swimlane/ngx-dnd": [], "Swimlane/ngx-datatable": [{"start": "npm install codeclimate-test-reporter", "end": "npm run build", "alternative end": "npm run build:lib:prod"}], "Synacor/eslint-config-synacor": [], "Swimlane/node-microservice-demo": [], "nats-io/prometheus-nats-exporter": [], "nats-io/nkeys": [], "nats-io/nats-streaming-server": [], "foss-for-synopsys-dwc-arc-processors/embarc_osp": [], "draios/python-sdc-client": [{"start": "sudo apt-get install linux-headers-$(uname -r) dkms gcc-multilib g++-multilib", "end": "bash test/start_agent.sh", "alternative end": "bash test/test_monitor_apis.sh"}], "sysgears/webpack-virtual-modules": [], "sysgears/persistgraphql-webpack-plugin": [], "sysgears/apollo-universal-starter-kit": [], "draios/sysdig": [], "tagbangers/wallride": [], "tableau/tableau-log-viewer": [], "tailoredmedia/Endpoints": [], "tableau/server-client-python": [{"start": "pip install -e .", "end": "python setup.py test", "alternative end": "pycodestyle tableauserverclient test samples"}], "talpor/django-dashing": [{"start": "pip install -r requirements.txt", "end": "rm -rf ~/.nvm && git clone https://github.com/creationix/nvm.git ~/.nvm && (cd ~/.nvm && git checkout `git describe --abbrev=0 --tags`) && source ~/.nvm/nvm.sh && nvm install $TRAVIS_NODE_VERSION", "alternative end": "npm install"}, {"start": "npm install", "end": "npm test"}], "Talend/ui": [], "tableau/document-api-python": [{"start": "pip install -e .", "end": "python setup.py test", "alternative end": "pycodestyle tableaudocumentapi test samples"}], "tableau/webdataconnector": [], "TankerHQ/sdk-js": [], "oat-sa/qti-sdk": [], "target/grease": [{"start": "pip install pymongo requests psycopg2-binary psutil elasticsearch", "end": "sudo mkdir /opt/grease/", "alternative end": "sudo chmod 777 /opt/grease/"}, {"start": "if [ $TRAVIS_OS_NAME = linux ]; then true; else brew install mongo; fi", "end": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then rm -rf /usr/local/var/postgres; fi", "alternative end": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then initdb /usr/local/var/postgres; fi"}], "target/nix-fetchers": [], "target/network_interfaces_v2-cookbook": [], "taxjar/taxjar-node": [], "target/portauthority": [], "taxjar/taxjar-php": [], "taxjar/taxjar-ruby": [], "target/f5-bigip-cookbook": [], "aol/micro-server": [], "aol/cyclops": [], "target/matrixprofile-ts": [{"start": "pip install -r requirements.txt", "end": "pytest"}], "Teambition/gear": [], "Teambition/teambition-mobile-web": [], "Teamwork/node-auto-launch": [], "Teambition/snapper-core": [], "Teambition/kafka-connect-mongo": [], "Teambition/ratelimiter-go": [], "Teambition/gulp-ssh": [], "Teambition/timed-queue": [], "bdring/Grbl_Esp32": [{"start": "pip install -U platformio", "end": "./configure-features.py -e WIFI -d BLUETOOTH -v", "alternative end": "./build-machine.py test_drive.h"}], "luc-github/ESP3D": [{"start": "pip install -U platformio", "end": "platformio update", "alternative end": "wget http://downloads.arduino.cc/arduino-1.8.5-linux64.tar.xz"}], "techdivision/import": [], "luc-github/ESP3D-WEBUI": [{"start": "npm install --global gulp-cli", "end": "echo \"build index.html\"", "alternative end": "gulp package"}], "techdivision/import-cli-simple": [], "openbase/bco.bcozy": [], "Teambition/then.js": [], "Teambition/swaggo": [], "Teambition/Sneaky": [], "asterics/AsTeRICS": [], "Teambition/teambition-sdk": [], "Tecsisa/constructr-consul": [], "Teambition/limbo": [], "flyve-mdm/glpi-plugin": [{"start": "not valid", "stop": "not valid"}], "pluginsGLPI/mreporting": [], "flyve-mdm/docker-environment": [], "Teambition/jsonrpc-lite": [], "Teambition/merge2": [], "pluginsGLPI/order": [], "glpi-project/glpi": [], "Teambition/rrule-go": [], "jmartin82/mmock": [], "TeleSign/java_telesign": [], "telefonicaid/fiware-cygnus": [], "TeleMidia/ginga": [], "TeleSign/python_telesign": [{"start": "pip install --quiet codecov", "end": "python setup.py -q install", "alternative end": "coverage run setup.py -v test"}], "telefonicaid/fiware-orion": [], "RestComm/restcomm-ios-sdk": [], "teltek/gst-plugin-ndi": [], "RestComm/Restcomm-Connect": [], "teltek/Galicaster": [{"start": "sudo apt-get install --yes gstreamer1.0-alsa gstreamer1.0-plugins-bad gstreamer1.0-plugins-base gstreamer1.0-plugins-base-apps gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly", "end": "make test-travis"}], "tensult/role-acl": [], "NativeScript/NativeScript": [{"start": "npm install", "end": "npm run tslint", "alternative end": "npm run setup"}], "TarsCloud/TarsGo": [], "chenchun/cgroupfs": [], "NativeScript/sample-Groceries": [{"start": "pip install six", "end": "tns usage-reporting disable", "alternative end": "tns error-reporting disable"}], "teracyhq/dev": [], "tencent/bk-cmdb": [], "IHTSDO/sct-snapshot-rest-api": [], "terrestris/BasiGX": [{"start": "npm install", "end": "npm test", "alternative end": "npm run ci-coverage"}], "tencent/QTAF": [{"start": "pip install -r requirements.txt", "end": "python tests/__init__.py", "alternative end": "echo $TRAVIS_TAG | sed 's/^.//' > version.txt"}], "testdouble/clojurescript.csv": [], "roomai/RoomAI": [{"start": "docker exec ${DOCKER_JOB_NAME}  /bin/sh -c 'python -m pip install -U pip';", "end": "docker exec ${DOCKER_JOB_NAME}  /bin/sh -c 'cd /roomai && python -m unittest discover -s tests';", "alternative end": "lili1987mail@gmai.com"}], "testdouble/quibble": [], "testdouble/teenytest": [], "testdouble/suture": [{"start": "gem install bundler", "end": "cd example/rails_app && ./script/setup.sh && cd ../..", "alternative end": "bundle exec codeclimate-test-reporter"}], "dbdd4us/qcloudapi-sdk-go": [], "testdouble/scripty": [], "tencentyun/cos-nodejs-sdk-v5": [{"start": "npm install", "end": "npm test", "alternative end": "wjielai@tencent.com"}], "testdouble/grunt-markdown-blog": [], "testdouble/test-smells": [], "tencentyun/cos-java-sdk-v5": [], "jerryOnlyZRJ/mobile-events": [], "xingePush/xinge-api-java": [], "TencentCloudBase/tcb-admin-node": [], "Textalk/jquery.jsonrpcclient.js": [], "tendenci/tendenci": [{"start": "pip install \"Django>=1.11,<2.0\"", "end": "./transifex.sh", "alternative end": "master"}], "topfreegames/pusher": [], "topfreegames/pitaya": [], "thecodingmachine/mouf": [], "thecodingmachine/best-practices": [{"start": "npm install", "end": "bower install", "alternative end": "gulp"}], "thehyve/glowing-bear": [], "theiconic/name-parser": [], "theiconic/php-ga-measurement-protocol": [], "untangled-web/untangled-server": [], "Backendless/JS-SDK": [], "tendermint/clearchain": [], "riebl/vanetza": [], "TheSoftwareHouse/Kakunin": [], "ThinkboxSoftware/Deadline": [], "thinkshout/redhen": [], "thorgate/tg-modal": [], "ThreatConnect-Inc/threatconnect-playbooks": [{"start": "pip install pytest", "end": "pytest ./tests/"}], "Bahmni/openmrs-module-bahmniapps": [{"start": "npm install -g bower", "end": "cat npm-debug.log || true", "alternative end": "bower install"}], "threatstack/threatstack-chef": [{"start": "gem update --system 3.0.2", "end": "CHEF_VERSION=\"= 12.21.14\"", "alternative end": "CHEF_VERSION=\">= 0.0.0\""}], "threatstack/threatstack-ansible": [{"start": "sudo apt-get update -qq", "end": "{ echo '[defaults]'; echo 'roles_path = ../'; } >> ansible.cfg", "alternative end": "ansible-playbook -v -i tests/inventory tests/test.yml --syntax-check"}], "letsdrink/ouzo": [], "ThoughtWorksStudios/eb_deployer": [{"start": "gem install bundler", "end": "bundle exec rake", "alternative end": "--without repl documentation"}], "thoughtworksarts/EmoPy": [{"start": "pip install -r requirements.txt", "end": "coverage run --source EmoPy --omit \"*test*\" EmoPy/tests/run_all.py", "alternative end": "coverage report -m"}], "TIBCOSoftware/bw6-plugin-maven": [], "TIBCOSoftware/flogo-services": [], "TIBCOSoftware/flogo-contrib": [], "TIBCOSoftware/flogo-cli": [], "TIBCOSoftware/flogo-lib": [], "tinify/magento1-plugin": [], "TIBCOSoftware/flogo": [], "tig-nl/postnl-magento2": [], "TileDB-Inc/TileDB-Py": [{"start": "pip install -U tox-travis pip", "end": "python setup.py build_ext --inplace", "alternative end": "python setup.py bdist_wheel"}, {"start": "pip install $whl_file", "end": "python -c \"import tiledb ; tiledb.libtiledb.version()\"", "alternative end": "popd"}], "timescale/timescaledb-tune": [], "timescale/timescaledb": [{"start": "docker exec docker_arm_emulator /bin/bash -c \"cd /build && make install\"", "end": "docker exec -u postgres -it docker_arm_emulator find /build -name regression.diffs -exec cat {} +", "alternative end": "docker exec -u postgres -it docker_arm_emulator find /build -name postmaster.log -exec cat {} +"}, {"start": "travis_wait 50 docker exec -u postgres docker_arm_emulator /bin/bash -c \"cd /build && make installcheck IGNORES='multi_transaction_indexing bgw_db_scheduler bgw_job_delete continuous_aggs_insert continuous_aggs_bgw plan_ordered_append-11 parallel-11 compression_ddl continuous_aggs_insert continuous_aggs_multi'\"", "end": "docker rm -f docker_arm_emulator", "alternative end": "branch = arm_test"}, {"start": "docker exec docker_arm_emulator /bin/bash -c \"cd /build && make install\"", "end": "docker exec -u postgres -it docker_arm_emulator find /build -name regression.diffs -exec cat {} +", "alternative end": "docker exec -u postgres -it docker_arm_emulator find /build -name postmaster.log -exec cat {} +"}, {"start": "travis_wait 50 docker exec -u postgres docker_arm_emulator /bin/bash -c \"cd /build && make installcheck IGNORES='multi_transaction_indexing bgw_db_scheduler bgw_job_delete continuous_aggs_insert continuous_aggs_bgw plan_ordered_append-12 parallel-12 compression_ddl continuous_aggs_insert continuous_aggs_multi'\"", "end": "docker rm -f docker_arm_emulator"}], "timescale/tsbs": [], "ThoughtWorksInc/DeepLearning.scala": [{"start": "brew update", "end": "find $HOME/.sbt -name '*.lock' -delete", "alternative end": "find $HOME/.ivy2 -name 'ivydata-*.properties' -delete"}, {"start": "$HOME/Library/Caches/Homebrew", "end": "sbt +test +unidoc"}], "timescale/prometheus-postgresql-adapter": [], "tethys-json/tethys": [], "Tivix/django-common": [{"start": "pip install -q Django==$DJANGO --use-mirrors", "end": "python setup.py test"}], "tjfoc/fabric-ca-gm": [], "Tivix/django-cron": [{"start": "pip install -q Django==$DJANGO", "end": "coverage run --source=django_cron setup.py test", "alternative end": "coveralls"}], "tjfoc/gmsm": [], "Tivix/django-rest-auth": [{"start": "pip install -q Django==$DJANGO djangorestframework==$DRF", "end": "coverage run --source=rest_auth setup.py test", "alternative end": "coveralls"}], "tmobile/jazz": [], "TNG/junit-dataprovider": [], "TNG/jgiven": [], "tmobile/jazz-installer": [{"start": "pip install flake8", "end": "test/python-unittests.sh", "alternative end": "test/check-tf.sh"}], "TNG/ArchUnit": [], "TNG/boost-python-examples": [], "opentok/Opentok-Ruby-SDK": [{"start": "gem update bundler", "end": "2.1", "alternative end": "2.2"}], "opentok/opentok-ios-sdk-samples-swift": [], "toggl/toggl-button": [], "opentok/opentok-android-sdk-samples": [], "opentok/Opentok-.NET-SDK": [], "opentok/opentok-ios-sdk-samples": [], "opentok/opentok-network-test-js": [], "opentok/Opentok-Python-SDK": [{"start": "pip install -r test_requirements.txt", "end": "nosetests", "alternative end": "JHQCkY3tajvauFzD0V5A19QN/ZWNNAgt+qsYgaQTPkmhxbxeu48lOifp/jUaaf07aemOm9nFCla/PlTHemCQAe71CsjPIOLNHkXAWjLQ3RJJscIvyKCUbuzn/zZIDt774wx+xIuf5SSjFGmqZFJSyfE/bbNKo1I2EDUmRztrp7c="}], "tomitribe/http-signatures-java": [], "opentok/Opentok-PHP-SDK": [], "tomitribe/crest": [], "tomtom-international/cpp-dependencies": [{"start": "brew update", "end": "CMAKEFLAGS=\"-DWITH_BOOST=ON -DHAS_MEMRCHR=OFF\" CXX=g++", "alternative end": "clang"}, {"start": "brew update", "end": "CMAKEFLAGS=\"-DWITH_BOOST=ON -DHAS_MEMRCHR=OFF\" CXX=clang++", "alternative end": "gcc"}], "opentok/Opentok-Java-SDK": [], "opentok/opentok-node": [], "opentok/accelerator-core-js": [], "toptal/granite": [], "opentok/accelerator-core-ios": [{"start": "gem install cocoapods --pre", "end": "pod update", "alternative end": "set -o pipefail"}], "totalgood/twip": [{"start": "pip install -r requirements-test.txt", "end": "python setup.py install", "alternative end": "python setup.py test"}], "opentok/opentok-web-samples": [], "totalgood/nlpia": [{"start": "sudo apt-get update", "end": "sudo apt-get remove -y python-boto", "alternative end": "sudo apt-get install -y build-essential gfortran libopenblas-dev liblapack-dev pandoc portaudio19-dev libasound2-dev pulseaudio libpulse-dev"}, {"start": "sudo apt-get install -y build-essential gfortran libopenblas-dev liblapack-dev pandoc portaudio19-dev libasound2-dev pulseaudio libpulse-dev", "end": "source tests/install_miniconda.sh", "alternative end": "export PATH=\"$CONDA_DIR/bin:$PATH\""}, {"start": "pip install --upgrade PyScaffold", "end": "pip list", "alternative end": "pip install -e ."}, {"start": "pip install -e .", "end": "python -c \"import nltk; nltk.download('punkt')\"", "alternative end": "pytest"}], "TOTVS/ttalk-standard-message": [{"start": "npm install", "end": "git config pull.rebase false", "alternative end": "git remote set-branches --add origin $TRAVIS_BRANCH"}], "TOTVS/tds-vscode": [{"start": "npm install", "end": "npm run compile", "alternative end": "npm test --silent"}], "TouK/sputnik": [{"start": "sudo pip install codecov", "end": "codecov", "alternative end": "python <(curl -s https://raw.githubusercontent.com/TouK/sputnik-ci/master/sputnik-ci.py)"}], "touchlane/SlideController": [{"start": "gem install cocoapods", "end": "pod repo add-cdn trunk 'https://cdn.cocoapods.org/'", "alternative end": "script"}], "TouK/bubble": [], "TouK/nussknacker": [{"start": "npm install -g npm", "end": "node -v", "alternative end": "npm -v"}, {"start": "npm install -g npm", "end": "node -v", "alternative end": "npm -v"}, {"start": "npm install -g npm", "end": "node -v", "alternative end": "npm -v"}], "TouK/excel-export": [], "kturney/ember-mapbox-gl": [], "transifex/txgh": [], "piotrkowalczuk/pqt": [], "trailofbits/dmarc": [], "travelping/ergw": [], "treasure-data/td": [], "Treeptik/cloudunit": [{"start": "sudo apt-get install -qq -y --force-yes dnsmasq", "end": "echo \"listen-address=127.0.0.1\" | sudo tee -a /etc/dnsmasq.conf > /dev/null", "alternative end": "echo \"bind-interfaces\" | sudo tee -a /etc/dnsmasq.conf > /dev/null"}], "travelping/gen_socket": [], "travelping/exometer_influxdb": [], "travelping/hello": [{"start": "sudo apt-get update -qq", "end": "wget https://s3.amazonaws.com/rebar3/rebar3", "alternative end": "chmod u+x ./rebar3"}], "trendmicro/serverless-survey-forms": [{"start": "npm install coveralls", "end": "cd web", "alternative end": "npm install"}, {"start": "npm install", "end": "cd ..", "alternative end": "npm run-script coverage"}], "travelping/gtplib": [], "travelping/eradius": [], "trailofbits/trailofphish": [], "travis-ci/travis-foundation": [], "travis-ci/travis-core": [{"start": "gem install bundler -v 1.9.0", "end": "bundle _1.9.0_ install --jobs=3 --retry=3 --path=${BUNDLE_PATH:-vendor/bundle}", "alternative end": "redis-cli config set save \"\""}], "trailofbits/protofuzz": [{"start": "pip install codeclimate-test-reporter py3-protobuffers", "end": "sudo add-apt-repository -y ppa:5-james-t/protobuf-ppa", "alternative end": "sudo apt-get -qq update"}, {"start": "sudo apt-get -y install protobuf-compiler", "end": "nosetests --with-coverage --cover-inclusive", "alternative end": "codeclimate-test-reporter"}], "tresorit/ZeroKit-iOS-SDK": [], "travis-ci/travis-rubies": [{"start": "sudo apt-get install haveged", "end": "sudo service haveged start", "alternative end": "docker"}, {"start": "sudo apt-get install haveged", "end": "sudo service haveged start", "alternative end": "linux"}, {"start": "sudo apt-get install haveged", "end": "sudo service haveged start", "alternative end": "linux"}, {"start": "sudo apt-get install haveged", "end": "sudo service haveged start", "alternative end": "osx"}], "travis-ci/casher": [], "travis-ci/gh": [{"start": "gem update bundler", "end": "2.7.0", "alternative end": "jruby-head"}], "trailofbits/spf-query": [], "travis-ci/travis-support": [], "travis-ci/dpl": [{"start": "gem install dpl-*.gem", "end": "node --version", "alternative end": ".travis/test_install"}, {"start": "gem install dpl-*.gem", "end": "node --version", "alternative end": ".travis/test_install"}, {"start": "gem install dpl-*.gem", "end": "node --version", "alternative end": ".travis/test_install"}, {"start": "gem install dpl-*.gem", "end": "node --version", "alternative end": ".travis/test_install"}, {"start": "gem install dpl-*.gem", "end": "node --version", "alternative end": ".travis/test_install"}, {"start": "gem install dpl-*.gem", "end": "node --version", "alternative end": ".travis/test_install"}, {"start": "gem install dpl-*.gem", "end": "node --version", "alternative end": ".travis/test_install"}], "eBookingServices/htmld": [], "travis-ci/gimme": [], "trailofbits/http-security": [], "trivago/rumi": [{"start": "sudo apt-get update -qq", "end": "sudo apt-get -o Dpkg::Options::=\"--force-confnew\" install -y docker-ce", "alternative end": "docker version"}], "travis-ci/docs-travis-ci-com": [{"start": "sudo apt-get install libcurl4-openssl-dev", "end": "bundle exec rake test", "alternative end": "xmllint --noout _site/feed.build-env-updates.xml"}, {"start": "gem install dpl-*.gem", "end": "cd ..", "alternative end": "rm -rf dpl"}], "travis-ci/terraform-config": [], "tronprotocol/java-tron": [], "travis-ci/build-stages-demo": [], "travis-ci/travis-tasks": [], "trobz/openerp-web-unleashed": [], "travis-ci/travis-build": [{"start": "gem install bundler -v 1.17.3", "end": "eval \"$(script/handle-docker-config)\"", "alternative end": "bundle install"}, {"start": "sudo pip install -U -I Pygments", "end": "./script/build-s3-index-html", "alternative end": "s3"}], "travis-ci/worker": [], "travis-ci/travis-listener": [], "travis-ci/travis-api": [{"start": "gem update --system", "end": ":ship: it to Quay.io", "alternative end": "echo skip"}], "travis-ci/travis-cookbooks": [], "travis-ci/php-src-builder": [{"start": "sudo apt-get update", "end": "sudo ln -s /usr/include/x86_64-linux-gnu/curl/ /usr/local/include", "alternative end": "command -v expect || sudo apt-get install expect"}, {"start": "command -v expect || sudo apt-get install expect", "end": "if ! command -v phpenv; then\n  pushd $HOME\n  curl -L http://git.io/phpenv-installer | bash\n  popd\n  export PHPENV_ROOT=\"/home/travis/.phpenv\"\n  if [ -d \"${PHPENV_ROOT}\" ]; then\n    export PATH=\"${PHPENV_ROOT}/bin:${PATH}\"\n    eval \"$(phpenv init -)\"\n  fi\nfi\n", "alternative end": "env(VERSION) !~ /^7\\.[23]/"}, {"start": "sudo apt-get update", "end": "sudo ln -s /usr/include/x86_64-linux-gnu/curl/ /usr/local/include", "alternative end": "command -v expect || sudo apt-get install expect"}, {"start": "command -v expect || sudo apt-get install expect", "end": "if ! command -v phpenv; then\n  pushd $HOME\n  curl -L http://git.io/phpenv-installer | bash\n  popd\n  export PHPENV_ROOT=\"/home/travis/.phpenv\"\n  if [ -d \"${PHPENV_ROOT}\" ]; then\n    export PATH=\"${PHPENV_ROOT}/bin:${PATH}\"\n    eval \"$(phpenv init -)\"\n  fi\nfi\n", "alternative end": "xenial"}, {"start": "sudo apt-get update", "end": "if ! command -v phpenv; then\n  pushd $HOME\n  curl -L http://git.io/phpenv-installer | bash\n  popd\n  export PHPENV_ROOT=\"/home/travis/.phpenv\"\n  if [ -d \"${PHPENV_ROOT}\" ]; then\n    export PATH=\"${PHPENV_ROOT}/bin:${PATH}\"\n    eval \"$(phpenv init -)\"\n  fi\nfi\n", "alternative end": "docker"}, {"start": "sudo apt-get update", "end": "sudo apt-get -y -q=2 --no-install-recommends --no-install-suggests  install libtidy-dev libxml2-dev libcurl4-openssl-dev libjpeg-dev libpng-dev libxpm-dev libmysqlclient-dev libpq-dev libicu-dev libfreetype6-dev libldap2-dev libxslt-dev libssl-dev libldb-dev libc-client-dev libkrb5-dev libsasl2-dev libmcrypt-dev expect re2c", "alternative end": "if ! command -v phpenv; then\n  pushd $HOME\n  curl -L http://git.io/phpenv-installer | bash\n  popd\n  export PHPENV_ROOT=\"/home/travis/.phpenv\"\n  if [ -d \"${PHPENV_ROOT}\" ]; then\n    export PATH=\"${PHPENV_ROOT}/bin:${PATH}\"\n    eval \"$(phpenv init -)\"\n  fi\nfi\n"}, {"start": "sudo apt-get update", "end": "sudo apt-get -y -q=2 --no-install-recommends --no-install-suggests  install libtidy-dev libxml2-dev libcurl4-openssl-dev libjpeg-dev libpng-dev libxpm-dev libmysqlclient-dev libpq-dev libicu-dev libfreetype6-dev libldap2-dev libxslt-dev libssl-dev libldb-dev libc-client-dev libkrb5-dev libsasl2-dev libmcrypt-dev expect re2c", "alternative end": "if ! command -v phpenv; then\n  pushd $HOME\n  curl -L http://git.io/phpenv-installer | bash\n  popd\n  export PHPENV_ROOT=\"/home/travis/.phpenv\"\n  if [ -d \"${PHPENV_ROOT}\" ]; then\n    export PATH=\"${PHPENV_ROOT}/bin:${PATH}\"\n    eval \"$(phpenv init -)\"\n  fi\nfi\n"}, {"start": "sudo apt-get update", "end": "sudo apt-get -y -q=2 --no-install-recommends --no-install-suggests  install libtidy-dev libxml2-dev libcurl4-openssl-dev libjpeg-dev libpng-dev libxpm-dev libmysqlclient-dev libpq-dev libicu-dev libfreetype6-dev libldap2-dev libxslt-dev libssl-dev libldb-dev libc-client-dev libkrb5-dev libsasl2-dev libmcrypt-dev expect re2c", "alternative end": "if ! command -v phpenv; then\n  pushd $HOME\n  curl -L http://git.io/phpenv-installer | bash\n  popd\n  export PHPENV_ROOT=\"/home/travis/.phpenv\"\n  if [ -d \"${PHPENV_ROOT}\" ]; then\n    export PATH=\"${PHPENV_ROOT}/bin:${PATH}\"\n    eval \"$(phpenv init -)\"\n  fi\nfi\n"}, {"start": "sudo apt-get update", "end": "sudo apt-get -y -q=2 --no-install-recommends --no-install-suggests  install libtidy-dev libxml2-dev libcurl4-openssl-dev libjpeg-dev libpng-dev libxpm-dev libmysqlclient-dev libpq-dev libicu-dev libfreetype6-dev libldap2-dev libxslt-dev libssl-dev libldb-dev libc-client-dev libkrb5-dev libsasl2-dev libmcrypt-dev expect re2c", "alternative end": "if ! command -v phpenv; then\n  pushd $HOME\n  curl -L http://git.io/phpenv-installer | bash\n  popd\n  export PHPENV_ROOT=\"/home/travis/.phpenv\"\n  if [ -d \"${PHPENV_ROOT}\" ]; then\n    export PATH=\"${PHPENV_ROOT}/bin:${PATH}\"\n    eval \"$(phpenv init -)\"\n  fi\nfi\n"}, {"start": "sudo apt-get update", "end": "sudo apt-get -y -q=2 --no-install-recommends --no-install-suggests  install libtidy-dev libxml2-dev libcurl4-openssl-dev libjpeg-dev libpng-dev libxpm-dev libmysqlclient-dev libpq-dev libicu-dev libfreetype6-dev libldap2-dev libxslt-dev libssl-dev libldb-dev libc-client-dev libkrb5-dev libsasl2-dev libmcrypt-dev expect re2c", "alternative end": "if ! command -v phpenv; then\n  pushd $HOME\n  curl -L http://git.io/phpenv-installer | bash\n  popd\n  export PHPENV_ROOT=\"/home/travis/.phpenv\"\n  if [ -d \"${PHPENV_ROOT}\" ]; then\n    export PATH=\"${PHPENV_ROOT}/bin:${PATH}\"\n    eval \"$(phpenv init -)\"\n  fi\nfi\n"}, {"start": "sudo apt-get update", "end": "sudo apt-get -y -q=2 --no-install-recommends --no-install-suggests  install libtidy-dev libxml2-dev libcurl4-openssl-dev libjpeg-dev libpng-dev libxpm-dev libmysqlclient-dev libpq-dev libicu-dev libfreetype6-dev libldap2-dev libxslt-dev libssl-dev libldb-dev libc-client-dev libkrb5-dev libsasl2-dev libmcrypt-dev expect re2c", "alternative end": "if ! command -v phpenv; then\n  pushd $HOME\n  curl -L http://git.io/phpenv-installer | bash\n  popd\n  export PHPENV_ROOT=\"/home/travis/.phpenv\"\n  if [ -d \"${PHPENV_ROOT}\" ]; then\n    export PATH=\"${PHPENV_ROOT}/bin:${PATH}\"\n    eval \"$(phpenv init -)\"\n  fi\nfi\n"}, {"start": "sudo apt-get update", "end": "sudo apt-get -y -q=2 --no-install-recommends --no-install-suggests  install libtidy-dev libxml2-dev libcurl4-openssl-dev libjpeg-dev libpng-dev libxpm-dev libmysqlclient-dev libpq-dev libicu-dev libfreetype6-dev libldap2-dev libxslt-dev libssl-dev libldb-dev libc-client-dev libkrb5-dev libsasl2-dev libmcrypt-dev expect re2c", "alternative end": "if ! command -v phpenv; then\n  pushd $HOME\n  curl -L http://git.io/phpenv-installer | bash\n  popd\n  export PHPENV_ROOT=\"/home/travis/.phpenv\"\n  if [ -d \"${PHPENV_ROOT}\" ]; then\n    export PATH=\"${PHPENV_ROOT}/bin:${PATH}\"\n    eval \"$(phpenv init -)\"\n  fi\nfi\n"}, {"start": "sudo apt-get update", "end": "sudo apt-get -y -q=2 --no-install-recommends --no-install-suggests  install libtidy-dev libxml2-dev libcurl4-openssl-dev libjpeg-dev libpng-dev libxpm-dev libmysqlclient-dev libpq-dev libicu-dev libfreetype6-dev libldap2-dev libxslt-dev libssl-dev libldb-dev libc-client-dev libkrb5-dev libsasl2-dev libmcrypt-dev expect re2c", "alternative end": "if ! command -v phpenv; then\n  pushd $HOME\n  curl -L http://git.io/phpenv-installer | bash\n  popd\n  export PHPENV_ROOT=\"/home/travis/.phpenv\"\n  if [ -d \"${PHPENV_ROOT}\" ]; then\n    export PATH=\"${PHPENV_ROOT}/bin:${PATH}\"\n    eval \"$(phpenv init -)\"\n  fi\nfi\n"}, {"start": "sudo apt-get update", "end": "sudo apt-get -y -q=2 --no-install-recommends --no-install-suggests  install libtidy-dev libxml2-dev libcurl4-openssl-dev libjpeg-dev libpng-dev libxpm-dev libmysqlclient-dev libpq-dev libicu-dev libfreetype6-dev libldap2-dev libxslt-dev libssl-dev libldb-dev libc-client-dev libkrb5-dev libsasl2-dev libmcrypt-dev expect re2c", "alternative end": "if ! command -v phpenv; then\n  pushd $HOME\n  curl -L http://git.io/phpenv-installer | bash\n  popd\n  export PHPENV_ROOT=\"/home/travis/.phpenv\"\n  if [ -d \"${PHPENV_ROOT}\" ]; then\n    export PATH=\"${PHPENV_ROOT}/bin:${PATH}\"\n    eval \"$(phpenv init -)\"\n  fi\nfi\n"}], "travis-ci/docker-sinatra": [], "travis-ci/travis-worker": [], "tryolabs/requestium": [{"start": "pip install tox-travis", "end": "wget -N https://chromedriver.storage.googleapis.com/2.33/chromedriver_linux64.zip -P ~/", "alternative end": "unzip ~/chromedriver_linux64.zip -d ~/"}], "travis-ci/travis-hub": [{"start": "gem install bundler:1.16.2", "end": "testing time", "alternative end": "bundle exec rspec"}, {"start": "gem update --system", "end": ":ship: it to quay.io", "alternative end": "bionic"}], "travis-ci/artifacts": [], "tryolabs/taggerine": [{"start": "pip install flake8", "end": "flake8 --max-line-length 99 api", "alternative end": "node_js"}, {"start": "npm install", "end": "./node_modules/.bin/eslint src/*.js"}], "google/earthenterprise": [{"start": "sudo apt-get update -qq", "end": "echo \"Running build...\"", "alternative end": "600"}], "travis-ci/travis-yml": [{"start": "gem install bundler -v '2.0.1'", "end": "testing time", "alternative end": "bundle exec rspec spec"}], "tryolabs/luminoth": [{"start": "pip install tox-travis", "end": "tox", "alternative end": "piy/NEf36gPZqw4nTAhs6dZ7Af2ozOt47RdnTSaed3tkwMfXJ+M3nccuCP4UfwmBP7fRRq2yfhLWCKIZagsFGAxhNZ/mSYgRdXfNUUofOWIJdR4+tQuqhxwgQkTfJjAWlYA+gA+GxrOnSFQ3ACRnfd/dUfthokqq7CWOzQtYYHGBSA1rAxuJU1x2qWbl+1tXa7BUJXCsR8ONz7vWDna4Znk+wixG3enOdd2pdrP2dqp9g0eUztySIT2zdjA2CB4iFIIqQLJ5fz3ab8Vpk4H9+JECB7lE8+SJVS9ZbBu8vuD9yZARBJGCPyD8HcwHTNrvlTu/V9p9W+6OeNCUXamZFuCkMHIwLgDxUntG/IyCptJqtG1n/7dOxikY1kfAIIcwMsmTQDej3xXHny1wyGMztD84w23KhNEPMJP7HsLVHmt26TIiT/yFeIOzGnh2ZPenMwtn7ti8uiweEpAH2G3tmH6bShv8myXEp++RcblSNeowHpyFhRsoevuqpT+dd+C+as2Y1DWBSFqvrfCro7AKloErJHtS3GXUiAf1Fi+Vys/sj+PLQFBh88GR5OY0lDC1cTfA4iy3Vy0IICRIylkQ4W0jfbgKF6B40syA6rM0mlu1v15P9oJvI+P5N9/G8jhUA54Ku3Xxmd6qpzlFvx2ivxmPBfHNc7g7MHJZFlzlzvk="}], "travis-ci/travis-web": [{"start": "npm install -g greenkeeper-lockfile@1", "end": "npm ci", "alternative end": "if [ $TRAVIS_PULL_REQUEST = 'false' ] && [ $TRAVIS_EVENT_TYPE != 'cron' ]; then echo \"Enabling Percy on push with default Ember\" && export PERCY_ENABLE=1; else export PERCY_ENABLE=0; fi"}], "travis-ci/travis-logs": [], "tsolucio/corebos": [], "travis-ci/travis-scheduler": [], "tst-labs/esocial": [], "travis-ci/travis.rb": [], "travis-ci/packer-templates": [{"start": "gem install bundler:1.17.1", "end": "bundle install --jobs=3 --retry=2 --path=vendor/bundle", "alternative end": "./bin/packer-build-install"}], "tudelft3d/val3dity": [], "travis-ci/travis-yaml": [], "tud-zih-energy/FIRESTARTER": [{"start": "not valid", "stop": "not valid"}], "tudelft3d/3dfier": [], "tumblr/colossus": [], "tuenti/ButtonMenu": [], "turbonomic/kubeturbo": [], "ulmo-dev/ulmo": [], "Twilio-org/phonebank": [], "twitter/twitter-kit-android": [], "twisted/tubes": [], "twistlock/authz": [], "twitter/torch-ipc": [{"start": "make && make install", "end": "git clone https://github.com/torch/xlua && cd xlua && ${INSTALL_PREFIX}/bin/luarocks make xlua-1.1-0.rockspec", "alternative end": "if [[ $TORCH_LUA_VERSION != 'LUAJIT21' && $TORCH_LUA_VERSION != 'LUAJIT20' ]]; then ${INSTALL_PREFIX}/bin/luarocks install luaffi; fi"}], "TwilioDevEd/sdk-starter-node": [], "twobitlabs/TBLCategories": [{"start": "brew update", "end": "xcodebuild -target TBLCategories", "alternative end": "xcodebuild -target TBLCategories -scheme TBLCategories -destination 'platform=iOS Simulator,name=iPhone 6' test"}], "twitter/rsc": [], "twobitlabs/AnalyticsKit": [{"start": "gem install xcpretty --no-rdoc --no-ri --no-document --quiet", "end": "set -o pipefail && xcodebuild build test -workspace AnalyticsKit/AnalyticsKit.xcworkspace -scheme AnalyticsKit -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 7,OS=10.3.1' | xcpretty"}], "twilio/flex-plugin-builder": [{"start": "sudo apt-get update", "end": "npm run lint", "alternative end": "CI= npm run test:ci"}], "BoLT/boltforms": [], "flightjs/flight-with-child-components": [], "twitter/css-flip": [], "twitter/thrift_client": [], "finagle/finagle-clojure": [], "twitter/twurl": [], "twitter/ios-twitter-image-pipeline": [], "pantsbuild/intellij-pants-plugin": [], "Theia-IDE/yang-lsp": [], "Theia-IDE/theia-apps": [{"start": "npm install -g yarn eclint", "end": "eclint check \"**/*\" || echo \"Warning! Formatting errors encountered...\"", "alternative end": "travis_wait 30 sleep 1800 &"}], "ubc/iPeer": [{"start": "sudo apt-get update", "end": "pecl install -f oauth-2.0.2", "alternative end": "sudo cp ~/.phpenv/versions/$(phpenv version-name)/etc/php-fpm.conf.default ~/.phpenv/versions/$(phpenv version-name)/etc/php-fpm.conf"}], "twitter/hadoop-lzo": [{"start": "sudo apt-get install -qq liblzo2-dev", "end": "C_INCLUDE_PATH=/usr/include/lzo LIBRARY_PATH=/usr/lib/x86_64-linux-gnu", "alternative end": "openjdk8"}], "flightjs/flight": [{"start": "npm install -g bower", "end": "bower install", "alternative end": "export DISPLAY=:99.0"}], "twitter/zktraffic": [{"start": "pip install -r requirements.txt", "end": "python setup.py nosetests --with-coverage --cover-package=zktraffic", "alternative end": "coveralls"}], "TypeFox/monaco-languageclient": [], "twitter/hogan.js": [], "twitter/ambrose": [], "twitter/fatcache": [], "Theia-IDE/yangster-electron": [], "Theia-IDE/yangster": [], "uber-go/dig": [], "twitter/wordpress": [], "Theia-IDE/typescript-language-server": [], "Theia-IDE/racket-language-server": [], "twitter/torch-autograd": [{"start": "make && make install", "end": "${INSTALL_PREFIX}/bin/luarocks install trepl", "alternative end": "${INSTALL_PREFIX}/bin/luarocks install nn"}], "uber-go/multierr": [], "finagle/finagle-websocket": [], "twitter/hbc": [], "uber/h3": [{"start": "gem install coveralls-lcov", "end": "cmake -DCMAKE_BUILD_TYPE=Debug -DWARNINGS_AS_ERRORS=ON -DH3_PREFIX=testprefix_ .", "alternative end": "make"}, {"start": "sudo make install", "end": "if [ \"$TRAVIS_OS_NAME\" = \"linux\" ]; then cpack -D CPACK_PACKAGE_CONTACT=\"Test build in CI\"; fi", "alternative end": "mkdir examples"}], "twitter/util": [], "uber/r-dom": [], "twitter/cloudhopper-commons": [], "uber-web/math.gl": [], "twitter/scrooge": [], "crossdock/crossdock": [{"start": "make install", "end": "make test", "alternative end": "timeout 5 docker-compose logs || true"}], "uber/zanzibar": [{"start": "sudo apt-get install -qq time", "end": "wget http://us.archive.ubuntu.com/ubuntu/pool/universe/w/wrk/wrk_4.0.1-2_amd64.deb", "alternative end": "sudo dpkg -i wrk_4.0.1-2_amd64.deb"}, {"start": "make install", "end": "make cover", "alternative end": "make fast-bench"}], "twitter/cli-guide.js": [], "OpenLogicProject/OpenLogic": [], "m3db/m3db-operator": [], "twitter/ostrich": [], "uber/nebula.gl": [], "twitter/ccommon": [], "twitter/twitter-text": [{"start": "brew install libidn", "end": "objective-c", "alternative end": "osx"}], "twitter/storehaus": [], "twitter/hpack": [], "uber/tchannel-java": [{"start": "make install_ci", "end": "make test_ci", "alternative end": "rm -rf $HOME/.m2/repository/com/uber/tchannel"}], "twitter/summingbird": [], "thriftrw/thriftrw-go": [], "twitter/joauth": [], "jaegertracing/jaeger-client-go": [{"start": "make install-ci USE_DEP=$USE_DEP", "end": "if [ \"$CROSSDOCK\" == true ]; then bash ./travis/install-crossdock-deps.sh ; fi", "alternative end": "if [ \"$TESTS\" == true ]; then make test-ci ; else echo 'skipping tests'; fi"}], "twitter/CocoaSPDY": [{"start": "brew update", "end": "sudo easy_install cpp-coveralls", "alternative end": "xcodebuild test -scheme SPDYUnitTests -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 6'"}], "jaegertracing/jaeger-lib": [{"start": "make install-ci USE_DEP=$USE_DEP", "end": "if [ \"$COVERAGE\" == true ]; then make test-ci ; else echo 'skipping tests'; fi", "alternative end": "if [ \"$TEST\" == true ]; then make test-only-ci ; else echo 'skipping tests'; fi"}], "twitter/scoot": [], "uber-go/config": [], "jaegertracing/jaeger-client-python": [{"start": "sudo apt-get install libgnutls28-dev", "end": "make bootstrap", "alternative end": "if [ \"$CROSSDOCK\" == \"1\" ]; then bash ./scripts/install-crossdock-deps.sh ; fi"}], "finagle/finagle-postgres": [], "twitter/scalding": [{"start": "gem update --system", "end": "$HOME/.scalding.dep.cache", "alternative end": "scripts/testValidator.sh"}], "abinit/abipy": [{"start": "if [ \"${ABIPY_INSTALLER}\" == \"pip\" ]; then\n  # pip-based installation.\n  source dev_scripts/conda_get.sh  # Needed for Abinit\n  # We are gonna use the github version\n  sed -i '/pymatgen/d' requirements.txt\n  travis_wait pip install -r requirements.txt\n  travis_wait pip install -r requirements-optional.txt\n  conda install -y -c conda-forge graphviz python-graphviz\n  #pip install graphviz\n  #travis_wait pip uninstall -y pymatgen\n\nelif [ \"${ABIPY_INSTALLER}\" == \"conda\" ]; then\n  # Install conda https://conda.io/docs/travis.html\n  source dev_scripts/conda_get.sh\n  #sed -i '/pymatgen/d' requirements.txt\n  source dev_scripts/conda_install.sh\n  conda uninstall -y pymatgen\nfi\n", "end": "if [[ \"${TRAVIS_PYTHON_VERSION}\" == \"2.7\" ]]; then conda install mock; fi", "alternative end": "pip install coverage>=4.4 -U --upgrade-strategy=eager"}, {"start": "pip install coverage>=4.4 -U --upgrade-strategy=eager", "end": "git clone --depth=50 https://github.com/gmatteo/pymatgen.git && cd pymatgen && python setup.py install && cd ../", "alternative end": "python setup.py install"}], "twitter/AnomalyDetection": [], "uclouvain/OSIS": [{"start": "pip install -r requirements.txt", "end": "psql -d template1 -c 'create extension unaccent;' -U postgres", "alternative end": "curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter"}], "uber/tchannel-python": [{"start": "make install", "end": "make test_ci", "alternative end": "make crossdock_logs_ci"}], "finagle/finch": [], "twitter/cassovary": [], "ayrna/orca": [{"start": "sudo apt-get update -q", "end": "octave", "alternative end": "liboctave-dev"}], "twitter/twitter-cldr-rb": [], "uber-go/zap": [], "twitter/elephant-bird": [{"start": "sudo apt-get update -qq", "end": "True", "alternative end": "openjdk7"}], "twitter/labella.js": [], "jaegertracing/jaeger": [{"start": "travis_retry make install-ci", "end": "if [ \"$ALL_IN_ONE\" == true ]; then bash ./scripts/travis/install-ui-deps.sh ; fi", "alternative end": "if [ \"$DOCKER\" == true ]; then bash ./scripts/travis/install-ui-deps.sh ; fi"}], "twitter/d3kit": [], "twitter/tormenta": [], "finagle/finagle-serial": [], "twitter/pelikan": [], "uber-go/cadence-client": [], "twitter/finatra": [], "twitter/hraven": [], "uber-go/automaxprocs": [{"start": "make install", "end": "test -z \"$LINT\" || make lint", "alternative end": "make test"}], "finagle/featherbed": [], "uber/uReplicator": [], "twitter/ios-twitter-logging-service": [], "uber-common/opentracing-python-instrumentation": [{"start": "pip install tox-travis coveralls", "end": "docker", "alternative end": "mysql"}], "twitter/twitter-server": [], "twitter/diffy": [], "ufal/neuralmonkey": [{"start": "sudo apt-get install libtcmalloc-minimal4", "end": "export LD_PRELOAD=\"/usr/lib/libtcmalloc_minimal.so.4\"", "alternative end": "easy_install distribute"}, {"start": "pip install -r requirements.txt", "end": "if [ -f tests/$TEST_SUITE\"\"_install.sh ]; then tests/$TEST_SUITE\"\"_install.sh; fi", "alternative end": "tests/$TEST_SUITE\"\"_run.sh"}], "twitter/spitball": [{"start": "gem update --system 2.1.11", "end": "gem --version"}], "twitter/twemoji": [], "ufal/treex": [], "twitter/algebird": [{"start": "gem install sass", "end": "sbt \\ \"++$TRAVIS_SCALA_VERSION clean\" \\ \"++$TRAVIS_SCALA_VERSION test\" \\ \"++$TRAVIS_SCALA_VERSION docs/makeMicrosite\" \\ \"++$TRAVIS_SCALA_VERSION mimaReportBinaryIssues\"", "alternative end": "2.12.12"}], "twitter/twemcache": [], "twitter/bijection": [], "finagle/finagle-oauth2": [], "twitter/twemproxy": [], "twitter/twitter-korean-text": [], "RMLio/RML-Mapper": [], "twitter/GraphJet": [], "pmgbergen/porepy": [{"start": "sudo apt-get update", "end": "export LD_LIBRARY_PATH=/usr/local/lib64/:$LD_LIBRARY_PATH", "alternative end": "pip install -r requirements-dev.txt"}, {"start": "pip install -r requirements-dev.txt", "end": "pip freeze", "alternative end": "cd $TRAVIS_BUILD_DIR"}], "twitter/Serial": [], "uilicious/inboxkitten": [{"start": "npm install -g firebase-tools", "end": "tree", "alternative end": "./config.sh"}], "dftlibs/xcfun": [{"start": "if [[ \"${TRAVIS_OS_NAME}\" == \"linux\" ]]; then\n  pip install --user pipenv --upgrade\nfi\n", "end": "pipenv --three install --dev", "alternative end": "source $(pipenv --venv)/bin/activate"}], "RuntimeTools/appmetrics": [], "aldro61/kover": [{"start": "sudo apt-get update", "end": "change", "alternative end": "change"}], "IBM/portieris": [], "eclipse/paho.mqtt.java": [], "HsuanXyz/ion2-calendar": [], "RuntimeTools/SwiftMetrics": [], "UltimateSoftware/envctl": [], "RuntimeTools/appmetrics-dash": [], "jsonata-js/jsonata": [{"start": "cd website && npm install && GIT_USER=\"${GH_NAME}\" npm run publish-gh-pages", "end": "npm release", "alternative end": "branch = master AND repo = jsonata-js/jsonata"}], "ibm-watson-iot/iot-java": [], "ce-store/ce-store": [], "ibm-watson-iot/iot-python": [{"start": "pip install tox-travis coveralls pyyaml", "end": "echo \"$DOCKER_PASSWORD\" | docker login -u \"$DOCKER_USERNAME\" --password-stdin", "alternative end": "tox"}], "ibm-watson-iot/iot-nodejs": [{"start": "npm install", "end": "if [ -n \"$RUN_COVERAGE\" ]; then\n  if npm run test-cov; then\n    cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js\n    exit 0\n  fi\nelse\n  if npm run test; then\n    exit 0\n  fi\nfi\nexit 1\n"}], "unchartedsoftware/salt-core": [], "unibas-gravis/scalismo-ui": [], "unibas-gravis/scalismo": [], "ugeneunipro/ugene": [{"start": "sudo apt-get update -qq", "end": "qmake ugene.pro CONFIG+=x64 UGENE_EXCLUDE_LIST_ENABLED=1 UGENE_USE_BUNDLED_ZLIB=0", "alternative end": "make -j 3 | sed -n 'p;n;n;n;n;'"}], "unic/ScalaWebTest": [], "unitedstack/gremlin": [{"start": "sudo pip install ansible", "end": "./drill.sh -p playbooks/drill.yml -i inventory/structure -t all --syntax-check", "alternative end": "False"}], "unistra/django-rest-framework-fine-permissions": [{"start": "pip install tox-travis", "end": "tox", "alternative end": "pip install coveralls"}, {"start": "pip install coveralls", "end": "coveralls"}], "ringmesh/ringmesh": [], "unruly/java-8-matchers": [], "untangle/ngfw_src": [], "upyun/java-sdk": [], "Upplication/landing": [{"start": "npm install -g bower", "end": "yarn install", "alternative end": "chmod a+x ./netlify_deploy.sh"}], "upyun/python-sdk": [{"start": "if [[ $TRAVIS_PYTHON_VERSION == '2.6' ]]; then pip install unittest2; fi", "end": "make init test"}], "upyun/go-sdk": [{"start": "sudo apt-get update && sudo apt-get install -y dnsutils", "end": "dig v0.api.upyun.com", "alternative end": "cd upyun && go test -v"}], "Upstatement/stream-manager": [], "upyun/lua-resty-checkups": [{"start": "sudo apt-get update -q", "end": "wget https://openresty.org/download/openresty-$V_OPENRESTY.tar.gz", "alternative end": "tar xzf openresty-$V_OPENRESTY.tar.gz"}, {"start": "cd openresty-$V_OPENRESTY && ./configure && make && sudo make install && cd ..", "end": "make test"}], "Upstatement/routes": [], "upwork/java-upwork": [{"start": "sudo apt install ant-optional", "end": "ant test", "alternative end": "apisupport@upwork.com"}], "uptick/react-keyed-file-browser": [], "UruIT/react-seed": [], "usbr/Pisces": [], "usechain/go-usechain": [], "usemarkup/JobQueueBundle": [], "ipa320/cob_manipulation": [], "citiususc/hipster": [{"start": "pip install --user codecov", "end": ".config/deploy-artifacts.sh", "alternative end": ".config/publish-javadocs.sh"}], "usemarkup/contentful": [], "moodleuulm/moodle-theme_boost_campus": [], "UnivaCorporation/tortuga": [], "warriorframework/warriorframework": [{"start": "if [[ ${INSTALL} = \"yes\" ]] && [[ ! -z ${TRAVIS_PULL_REQUEST_BRANCH} ]]; then pip install pexpect==4.2 ; pip install requests==2.9.1 ; pip install selenium==2.53.0 ; pip install lxml==3.3.3 ; pip install paramiko==2.4.1 ; pip install pysnmp==4.3.2 ; pip install kafka-python==1.4.6; fi", "end": "if [[ -z ${TRAVIS_PULL_REQUEST_BRANCH} ]]; then python ./warrior/Warrior ./wftests/warrior_tests/testcases/framework_tests/cond_var/pass.xml ; elif [[ ${PYLINT} = \"yes\" ]]; then $TESTFILE ; elif [[ ${TESTFILES_1} = \"yes\" ]]; then python ./warrior/Warrior ./wftests/warrior_tests/projects/pj_framework_tests.xml ./wftests/warrior_tests/projects/pj_glob.xml ./wftests/warrior_tests/projects/pj_rest.xml ./wftests/warrior_tests/projects/pj_retry.xml ./wftests/warrior_tests/projects/pj_runmode_retry_at_suite_level_at_project_file.xml ./wftests/warrior_tests/projects/pj_execute_resume.xml ; elif [[ ${TESTFILES_2} = \"yes\" ]]; then python ./warrior/Warrior ./wftests/warrior_tests/projects/pj_cond_var.xml ./wftests/warrior_tests/projects/pj_iterative_execution.xml ./wftests/warrior_tests/projects/pj_parallel_execution.xml ./wftests/warrior_tests/projects/pj_parallel_execution_2.xml ; else python ./warrior/Warrior $TESTFILE ; fi", "alternative end": "if [[ ${COPILOT} = \"yes\" ]]; then bash <(curl -s https://copilot.blackducksoftware.com/ci/travis/scripts/upload); fi"}], "usgs/geomag-algorithms": [{"start": "pip install authlib flask flask-login flask-migrate flask-session flask-sqlalchemy psycopg2-binary", "end": "black --check .", "alternative end": "pytest"}], "usgs/shakemap": [{"start": "pip install codecov codacy-coverage", "end": "codecov", "alternative end": "coverage xml"}], "ushahidi/platform": [], "USGS-VIZLAB/vizlab": [], "usgs/libcomcat": [{"start": "pip install codecov codacy-coverage", "end": "codecov", "alternative end": "coverage xml"}], "ushahidi/SMSSync": [], "ibm-watson-data-lab/shopping-list-preact-pouchdb": [], "modflowpy/flopy": [], "ushahidi/platform-pattern-library": [{"start": "npm install -g gulp", "end": "gulp build", "alternative end": "node before_deploy.js"}, {"start": "npm install request", "end": "node after_deploy.js"}], "USGS-R/glmtools": [{"start": "sudo apt-get install -y libnetcdf-dev netcdf-bin netcdf-doc", "end": "GLEON/GLMr", "alternative end": "oldrel"}], "ushahidi/platform-client": [{"start": "npm install -g gulp", "end": "test/pre_test.sh", "alternative end": "test/test.sh"}], "usgs/earthquake-eventpages": [{"start": "npm install -g codacy-coverage", "end": "TRAVIS_NODE_PATH=$(dirname $(nvm which $TRAVIS_NODE_VERSION))", "alternative end": "export PATH=\"${PATH}:${TRAVIS_NODE_PATH}\""}], "usharesoft/hammr": [{"start": "pip install . --pre", "end": "if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then git reset --soft ${TRAVIS_COMMIT_RANGE%...*} && git status && git log | head -n 1 && git lint; fi || true", "alternative end": "nosetests"}], "Kuniri/kuniri": [{"start": "gem update --system", "end": "bundle install", "alternative end": "gem install yard"}, {"start": "gem install yard", "end": "rubocop lib/ bin/", "alternative end": "rake test:all"}], "USGS-R/EflowStats": [], "IBM/guestbook": [], "IBM/spring-boot-microservices-on-kubernetes": [{"start": "sudo apt-get install shellcheck", "end": "./scripts/install_bx.sh", "alternative end": "./scripts/bx_auth.sh"}], "watson-developer-cloud/language-translator-nodejs": [{"start": "npm install -g bx-blue-green", "end": "script", "alternative end": "bx-blue-green-travis"}], "watson-developer-cloud/food-coach": [{"start": "npm install -g bx-blue-green", "end": "script", "alternative end": "True"}], "ustwo/US2FormValidator": [], "ioos/conda-recipes": [{"start": "brew remove --force $(brew list)", "end": "curl -L -O https://raw.githubusercontent.com/conda-forge/conda-smithy/master/bootstrap-obvious-ci-and-miniconda.py", "alternative end": "python bootstrap-obvious-ci-and-miniconda.py ~/miniconda x64 2 --without-obvci && source ~/miniconda/bin/activate root"}], "ustwo/formvalidator-swift": [{"start": "brew update", "end": "./fastlane/travis.sh"}], "MODFLOW-USGS/modflow6": [], "USGS-CIDA/pyGDP": [{"start": "pip install -r requirements.txt -r requirements-dev.txt", "end": "cp -r Lettuce_Tests/ /tmp", "alternative end": "cd /tmp && lettuce --tag=-not_working Lettuce_Tests"}], "ustwo/mastermind": [], "USGS-R/geoknife": [{"start": "sudo apt-get install -y libgdal-dev libproj-dev", "end": "Rscript -e \"install.packages('knitr')\"", "alternative end": "Rscript -e \"install.packages('rmarkdown')\""}], "x10-lang/x10": [], "agrc/agrc.widgets": [{"start": "npm install -g grunt-cli", "end": "bower install", "alternative end": "change"}], "carbon-design-system/carbon-icons": [], "watson-developer-cloud/retrieve-and-rank-java": [], "watson-developer-cloud/document-conversion-nodejs": [{"start": "npm install -g https://github.com/andresfvilla/bx-blue-green", "end": "script", "alternative end": "bx-blue-green-travis"}], "vaadin/vaadin-charts": [], "watson-developer-cloud/natural-language-classifier-nodejs": [{"start": "npm install -g bx-blue-green", "end": "script", "alternative end": "True"}], "samie/Vaadin-ConfirmDialog": [], "vaadin/vaadin-board": [], "valor-software/ng2-contentful": [{"start": "npm install -g typings tsd", "end": "typings install"}], "vaadin/platform": [{"start": "npm install -g pnpm", "end": "mkdir -p ~/.vaadin && echo '{\"username\":\"'$VAADIN_PRO_KEY_USER'\",\"proKey\":\"'$VAADIN_PRO_KEY_KEY'\"}\"' > ~/.vaadin/proKey", "alternative end": "echo \"sauce.user=$SAUCE_USER\" > local.properties && echo \"sauce.sauceAccessKey=$SAUCE_ACCESS_KEY\" >> local.properties"}], "valor-software/ng2-dragula": [], "IBMStreams/streamsx.topology": [{"start": "pip install flake8", "end": "flake8 . --count --select=E901,E999,F821,F822,F823 --show-source --statistics", "alternative end": "flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics"}], "valor-software/ng2-table": [], "watson-developer-cloud/java-sdk": [{"start": "pip install --user bumpversion", "end": "nvm install 12", "alternative end": "npm install @semantic-release/changelog"}, {"start": "npm install @semantic-release/changelog", "end": "npx semantic-release", "alternative end": "Publish javadoc"}], "valor-software/ng2-charts": [], "valor-software/ng2-handsontable": [], "vaadin/framework8-demo": [], "valor-software/ng2-select": [{"start": "npm install > /dev/null", "end": "npm run build > /dev/null", "alternative end": "npm i ./dist  > /dev/null"}, {"start": "npm install > /dev/null", "end": "True", "alternative end": "stable"}], "valor-software/ngx-bootstrap": [{"start": "sudo apt-get install libgconf-2-4", "end": "npm ci", "alternative end": "if [[ \"$NGV\" == \"latest\" ]]; then  ./scripts/ci/npm-ng-latest.sh; fi"}], "IBM/microservices-traffic-management-using-istio": [], "valor-software/ng2-tree": [], "valor-software/tslint-config-valorsoft": [{"start": "npm install -g npm@latest", "end": "npm test"}], "valor-software/ng2-file-upload": [], "valtech/aem-easy-content-upgrade": [], "IBM-Design/charts": [], "IBM-Design/colors": [], "valtech/ros_hadoop": [], "IBM-Design/icons": [], "ibm-developer/generator-nodeserver": [], "vanilla/jsConnectPHP": [], "varnish/hitch": [{"start": "sudo apt-get update", "end": "./bootstrap", "alternative end": "make -j4"}], "vanilla/garden-cli": [], "carbon-design-system/carbon-addons-data-viz-react": [], "Vauxoo/docker-odoo-image": [{"start": "npm install -g dockerlint", "end": "python ${TRAVIS_BUILD_DIR}/build.py --folder ${TRAVIS_BUILD_DIR}/odoo80 --docker-image vauxoo/odoo-80-image:latest", "alternative end": "python ${TRAVIS_BUILD_DIR}/build.py --folder ${TRAVIS_BUILD_DIR}/odoo-shippable --docker-image vauxoo/odoo-80-image-shippable-auto:latest"}], "Vauxoo/addons-vauxoo": [{"start": "if [ \"${TESTS}\" == \"1\" ]; then pip install -r pseudo_requirements.txt; fi", "end": "travis_run_tests", "alternative end": "travis_after_tests_success"}], "Vauxoo/odoo-venezuela": [], "quintilesims/layer0": [{"start": "sudo apt-get install jq", "end": "make unittest", "alternative end": "docker login -u \"$DOCKER_USERNAME\" -p \"$DOCKER_PASSWORD\""}], "OCA/pylint-odoo": [{"start": "sed -i '/pip install ./d' ${TRAVIS_BUILD_DIR}/install.sh", "end": "${TRAVIS_BUILD_DIR}/install.sh", "alternative end": "pip install coveralls flake8==3.4.1 tox restructuredtext_lint pygments"}, {"start": "pip install coveralls flake8==3.4.1 tox restructuredtext_lint pygments", "end": "flake8 --ignore=F601,W503,W504 --max-line-length=88 --exclude=__init__.py .", "alternative end": "restructuredtext-lint ${TRAVIS_BUILD_DIR}/README.rst"}], "venmo/VENCore": [], "vechain/thor": [], "vechain/thor-client-sdk4j": [], "venmo/business-rules": [{"start": "if [[ $TRAVIS_PYTHON_VERSION == 2* ]]; then pip install unittest2; fi", "end": "nosetests tests"}], "veritrans/veritrans-php": [], "verisign/storm-graphite": [], "Codeinwp/visualizer": [], "VerizonDigital/vflow": [], "viadee/bpmn.ai": [], "viadee/sonarQuest": [], "viadee/vPAV": [], "viadeo/tetra": [], "viltgroup/minium": [], "viant/toolbox": [], "Vincit/db-errors": [], "vimeo/vimeo-networking-java": [], "Vincit/venia": [], "vinsol-spree-contrib/spree_admin_roles_and_access": [], "vinsol/nectarcommerce": [], "Vincit/objection.js": [], "Vincit/objection-rest": [], "vipshop/vjtools": [], "Vincit/tarn.js": [], "Vincit/knex-db-manager": [], "vipshop/Saturn": [], "vintasoftware/drf-rw-serializers": [{"start": "pip install --upgrade pip", "end": "tox", "alternative end": "codecov"}], "VirgilSecurity/virgil-cli": [], "VirgilSecurity/virgil-sdk-x": [{"start": "if [ $SWIFT_LINT == \"YES\" ]; then\n  brew outdated swiftlint || brew upgrade swiftlint\n  swiftlint\nfi\n", "end": "SCHEME=\"VirgilSDK ${PREFIX}\"", "alternative end": "if [ $BUILD == \"2\" ]; then\n  # Build Framework\n  xcodebuild -verbose -project \"$PROJECT\" -scheme \"$SCHEME\" -sdk \"$SDK\" -destination \"$DESTINATION\" -configuration Debug clean build-for-testing | xcpretty;\n  # Run Tests\n  xcodebuild -verbose -project \"$PROJECT\" -scheme \"$SCHEME\" -sdk \"$SDK\" -destination \"$DESTINATION\" -configuration Debug test-without-building | xcpretty;\nelif [ $BUILD == \"1\" ]; then\n  # Build Framework\n  xcodebuild -verbose -project \"$PROJECT\" -scheme \"$SCHEME\" -sdk \"$SDK\" -destination \"$DESTINATION\" -configuration Release clean build | xcpretty;\nfi\n"}, {"start": "if [ $PUBLISH_CARTHAGE == \"YES\" ]; then brew update; brew outdated carthage || brew upgrade carthage; carthage build --no-skip-current; carthage archive; fi", "end": "if [[ $PUBLISH_DOCS = \"YES\" && $TRAVIS_TAG =~ ^[0-9]+\\.[0-9]+\\.[0-9]+ ]]; then ./CI/publish-docs.sh; fi", "alternative end": "releases"}], "VirgilSecurity/virgil-crypto": [], "vintasoftware/django-role-permissions": [{"start": "pip install tox-travis", "end": "tox", "alternative end": "3.5"}], "vintasoftware/tapioca-wrapper": [{"start": "pip install tox-travis", "end": "tox", "alternative end": "3.5"}], "vintasoftware/django-zombodb": [{"start": "sudo apt-get update -y -qq", "end": "sudo apt-get purge -y postgresql-9.1", "alternative end": "sudo apt-get purge -y postgresql-9.2"}, {"start": "pip install -r requirements/travis.txt", "end": "elasticsearch-${ES}/bin/elasticsearch -d", "alternative end": "sudo /etc/init.d/postgresql restart 10"}], "VirtusLab/unicorn": [], "VirtusLab/render": [], "VirtusLab/beholder": [], "koala-framework/koala-framework": [], "Vizir/react-native-autocomplete-select": [{"start": "npm install -g codeclimate-test-reporter", "end": "codeclimate-test-reporter < coverage/lcov.info"}], "viva64/how-to-use-pvs-studio-free": [{"start": "if [ \"${TRAVIS_OS_NAME}\" = \"osx\" ]; then brew update; brew install gcc@8; fi", "end": "if [ \"${TRAVIS_OS_NAME}\" = \"osx\" -o \"${TRAVIS_OS_NAME}\" = \"linux\" ]; then mkdir build; cd build; cmake -DCMAKE_BUILD_TYPE=\"Release\" ..; make -j8; fi", "alternative end": "if [ \"${TRAVIS_OS_NAME}\" = \"windows\" ]; then mkdir build; cd build; cmake -G \"Visual Studio 15 2017 Win64\" ..; cmake --build . --config Release; fi"}], "Vivify-Ideas/laravel-acl": [], "Vizzuality/gfw": [], "go-baa/baa": [], "vodori/missing": [], "vogellacompany/eclipse4book": [], "voorhoede/front-end-tooling-recipes": [], "vmware/vsphere-automation-sdk-python": [{"start": "pip install -r requirements.txt --extra-index-url file://$PWD/lib --upgrade  --ignore-installed six", "end": "pycodestyle samples tests", "alternative end": "pytest"}], "voorhoede/fastatic": [], "vmware/vcd-cli": [{"start": "pip install git+https://github.com/vmware/pyvcloud.git", "end": "python setup.py install", "alternative end": "pip install tox"}, {"start": "pip install tox", "end": "tox -e flake8", "alternative end": "pip list --format=columns | grep pyvcloud"}], "umbrellaTech/ya-boleto-php": [], "voorhoede/lighthouse-security": [], "vmware/purser": [{"start": "make install", "end": "make travis-build", "alternative end": "make check"}], "voorhoede/manifiesta": [], "tinify/wordpress-plugin": [], "tinify/tinify-java": [], "tinify/tinify-php": [], "kubernetes/cloud-provider-vsphere": [], "vshn/tikapy": [], "vmware/tdnf": [], "Waavi/translation": [], "vmware/pyvcloud": [{"start": "pip install -r requirements.txt", "end": "python setup.py install", "alternative end": "pip install tox"}, {"start": "pip install tox", "end": "pip list --format=columns | grep pyvcloud", "alternative end": "python -c 'import pkg_resources; print(pkg_resources.require(\"pyvcloud\")[0].version)'"}], "Waavi/Sanitizer": [], "WallarooLabs/wallaroo": [], "ffan-fe/fancyui": [], "wanelo/pause": [], "walmartlabs/little-loader": [{"start": "npm install -g npm@2", "end": "npm run install-dev", "alternative end": "nohup bash -c \"node_modules/.bin/selenium-standalone start 2>&1 &\""}], "walmartlabs/eslint-config-walmart": [], "AdaptiveConsulting/Aeron.NET": [], "wearefine/fae": [], "AdaptiveConsulting/react-flex-layout": [], "wearefriday/spectre": [{"start": "gem update --system", "end": "--without demo_test_run", "alternative end": "postgresql"}], "lazojs/lazo": [{"start": "npm install -g grunt-cli", "end": "master", "alternative end": "development"}], "electrode-io/electrode": [], "WeareJH/config-gen": [{"start": "sudo apt-get update -qq", "end": "stable", "alternative end": "export PATH=$PATH:~/.cargo/bin"}], "wearereasonablepeople/KalmanFilter": [], "FISCO-BCOS/web3sdk": [], "webcomputing/AssistantJS": [{"start": "npm install", "end": "gulp --version", "alternative end": "gulp"}], "FISCO-BCOS/FISCO-BCOS-DOC": [{"start": "pip install -r requirements.txt", "end": "make html", "alternative end": "bash .ci/ci_check.sh\n"}], "webfactory/exceptions-bundle": [], "webkul/hotelcommerce": [], "Workiva/wGulp": [{"start": "npm install -g gulp", "end": "npm test"}], "WebDevStudios/generator-plugin-wp": [], "wdfe/wdui": [], "WebDevStudios/custom-post-type-ui": [], "weka-io/mecca": [], "WeWork/we-call-gem": [{"start": "gem install bundler", "end": "appraisal install", "alternative end": "bundle exec appraisal rspec"}], "wepay/kafka-connect-bigquery": [], "wepay/Ruby-SDK": [{"start": "gem install bundler", "end": "bundle install --without docs", "alternative end": "bundle exec rake"}], "WeWork/we-js-logger": [], "SGL-UT/GPSTk": [], "wildbit/mustachio": [], "Wikia/vignette": [], "WildDogTeam/demo-ios-danmu": [], "wmde/FundraisingFrontend": [{"start": "make install-js", "end": "bash build/travis/createLocalTestConfig.sh", "alternative end": "echo \"APP_ENV=dev\" > .env"}, {"start": "make install-php COMPOSER_FLAGS=\"--no-dev -q\"", "end": "docker run -v $PWD:/app --rm  wikimediade/fundraising-frontend:stan analyse --level 1 --no-progress cli/ src/", "alternative end": "if [ \"$TYPE\" == \"coverage\" ]; then bash build/travis/uploadCoverage.sh; fi"}], "ros-visualization/rviz": [], "ros-perception/laser_filters": [], "WildDogTeam/wilddog-doc2": [{"start": "npm install hexo-cli -g", "end": "hexo generate", "alternative end": "gulp build"}], "Wingify/across-tabs": [{"start": "npm install -g webpack", "end": "yarn install", "alternative end": "yarn run build"}], "WiproOpenSourcePractice/openbdre": [{"start": "sudo apt-get install curl -y", "end": "sudo service mysql restart", "alternative end": "echo hibernate.current_session_context_class=thread > md-dao/src/main/resources/db.properties"}], "wix-incubator/carmi": [{"start": "npm install", "end": "npm run test", "alternative end": "master"}], "wise2c-devops/breeze": [{"start": "sudo apt-get install -y bzip2", "end": "while sleep 5m; do echo \"=====[ $SECONDS seconds, still building... ]=====\"; done &", "alternative end": "bash init.sh"}], "Wiredcraft/nsq-strategies": [], "wix-playground/react-native-navigation-v1-v2-adapter": [{"start": "npm install", "end": "npm run release"}], "Wiredcraft/pipelines": [{"start": "pip install -r requirements.txt", "end": "nosetests --with-coverage --cover-package=pipelines"}], "wix/angular-viewport-watch": [{"start": "npm install -g npm@2", "end": "bundle install", "alternative end": "npm install -g grunt-cli bower"}, {"start": "npm install -g grunt-cli bower", "end": "bower install", "alternative end": "grunt build:ci"}], "Wiredcraft/loopback-cache": [{"start": "npm install", "end": "npm prune", "alternative end": "make test-coveralls"}], "wix/haste": [{"start": "npm install -g yarn@1.1.0", "end": "yarn install", "alternative end": "yarn build"}], "wix/remote-dom": [], "woboq/woboq_codebrowser": [], "WoltLab/com.woltlab.wcf.conversation": [], "wix/react-templates": [{"start": "npm install", "end": "npm run lint", "alternative end": "npm run test-cov"}], "wolfSSL/wolfssl-py": [], "Workday/escalar": [], "Workiva/go-datastructures": [], "tylertreat/BigQuery-Python": [{"start": "sudo apt-get update -q", "end": "python setup.py develop", "alternative end": "pip install tox"}, {"start": "pip install tox", "end": "tox -e $TOXENV", "alternative end": "False"}], "wix-incubator/rich-content": [{"start": "npm install", "end": "npm run build || travis_terminate 1;", "alternative end": "npm run release || travis_terminate 1;"}], "Workiva/frugal": [{"start": "sudo apt update", "end": "export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64", "alternative end": "make"}], "Workiva/over_react": [], "wix/angular-widget": [{"start": "npm install", "end": "bundle install", "alternative end": "npm install -g grunt-cli bower"}, {"start": "npm install -g grunt-cli bower", "end": "bower install", "alternative end": "grunt build:ci"}], "wix/specs2-jmock": [], "wix/wix-animations": [{"start": "sudo apt-get update", "end": "wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb", "alternative end": "sudo dpkg -i google-chrome*.deb"}], "WorksApplications/elasticsearch-sudachi": [], "Wolox/express-js-bootstrap": [], "WorksApplications/office-maker": [{"start": "npm install -g elm", "end": "elm-package install -y", "alternative end": "sh build.sh"}], "wix/detox": [{"start": "pip install awscli --upgrade --user", "end": "True", "alternative end": "ExAwGcI4WlRoi/F2AKMds2eNQZ90susGT2k/CSU1ZQdTL5jaeMW6/i86Uz6Goilnd7qL/1GhlHF9Q48yYtctLVg4zSKH3uclHDDtPfWsF/R7+UWBPYtvhuW2VvL4ota8b0QzUlTz3iS0G3iD4AFqnAZUgYqjSeF1arv+YKOTEXzGyPtj3xjD9TSSjamnSEgGd18RRKpG8FWQr631yOSucikUsYcetV8bUTs6PtjcIC0XK1d1Nv/eMJxSwTQCAptQbxPTO0FBEEH+lQ6H5oQ7mvyNQ7BBUEunUWkUsCh85SsqHLbnCaiPojmI8ICUJBDNSDvzvyt1JJOxnjWtXlLu5xLOQRYeMvr9p66uBMTxTw2LXagSw4bxAf8LHXK/EOssTv+bE6gujNga0FF3jOLTDUZF93OT7TCsrVQrIkiKBl/YoJVc137dz/fUz3wA/JkmqQIV0i9BMUVNYlBGg3J9Omo8nQXTEvqNpYdSfWEm6cZT73kRrdiuittcBXUeWaTkqThmL8KMO5u+InUQhOhhxMmZ/u3DZRTxtHu9ndOdMrWaOmDj4MXpTsml6qelFHMdQoNQubUgdpSb0H0KvGObnQwFR3V2alPT6Ovx1e+XzjBiV2CNP3jHci52JGAlPtGRxctiXUYL9TZYgpJdO/IxJR/lAhA7ZJLsfHGL4LUF65o="}], "WorksApplications/Sudachi": [], "wix/wix-ui-backoffice": [{"start": "sudo apt-get update", "end": "wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb", "alternative end": "sudo dpkg -i google-chrome*.deb"}], "worthwhile/django-herald": [{"start": "travis_retry pip install --upgrade pip setuptools wheel", "end": "coverage run --source herald runtests.py -v 2", "alternative end": "False"}], "rnxteam/rnx-ui": [{"start": "npm install", "end": "npm run lint"}], "wso2/carbon-identity-framework": [], "xcomponent/react-gojs": [], "wso2/wso2-synapse": [], "xcomponent/xcomponent": [], "mono/md-website": [], "fvanwijk/mox": [{"start": "npm install -g grunt-cli codeclimate-test-reporter", "end": "codeclimate-test-reporter < test/coverage/**/lcov.info"}], "xenit-eu/dynamic-extensions-for-alfresco": [], "mono/website": [], "wso2/product-ei": [], "arqex/freezer": [], "xetus-oss/docker-archiva": [], "ballerina-platform/ballerina-lang": [{"start": "npm install -g npm@'5.6.0'", "end": "Tests", "alternative end": "Run Build + tests (without integration) - Linux"}, {"start": "npm install -g npm@'5.6.0'", "end": "if [ $TRAVIS_OS_NAME == \"linux\" ]; then\n  export DISPLAY=':99.0'\n  /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &\nfi\n", "alternative end": "while sleep 9m; do echo \"=====[ $SECONDS seconds still running ]=====\"; done &"}, {"start": "npm install -g npm@'5.6.0'", "end": "Integration tests - Linux", "alternative end": "bash <(curl -s https://codecov.io/bash)"}], "mono/embeddinator-4000": [], "xfiveco/generator-chisel": [{"start": "npm install -g yo", "end": "wget -P /tmp https://github.com/wp-premium/advanced-custom-fields-pro/archive/master.zip", "alternative end": "wget -P /tmp https://github.com/wp-premium/gravityforms/archive/master.zip"}], "mono/CppSharp": [], "Magomogo/Barberry": [], "XiaoMi/mace": [{"start": "if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then brew update; brew cask install android-platform-tools; fi", "end": "sudo $PIP install setuptools", "alternative end": "sudo $PIP install -I \"tensorflow==1.8.0\" \"numpy==1.15.4\" \"sh==1.12.14\" \"pycodestyle==2.4.0\" \"pyyaml==3.13\" \"jinja2==2.10\" \"filelock==3.0.10\" \"scipy==1.2.0\" \"PTable==0.9.2\""}], "mono/t4": [], "xilinx/XRT": [{"start": "sudo apt-get update", "end": "if [ \"$COVERITY_SCAN_BRANCH\" != 1 ]; then ./build.sh -driver; fi"}], "xilinx/RapidWright": [], "XiaoMi/rdsn": [{"start": "sudo apt-get -y install libaio-dev clang-format-3.9", "end": "cd thirdparty", "alternative end": "wget https://github.com/XiaoMi/pegasus-common/releases/download/deps/pegasus-thirdparty-prebuild-bionic.zip"}], "OpenAMP/libmetal": [{"start": "if [[ \"$TARGET\" == \"zephyr\" ]]; then sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test && sudo apt-get update -qq && sudo apt-get install libc6-dev-i386 make gperf gcc g++ python3-ply python3-yaml python3-pip device-tree-compiler ncurses-dev uglifyjs -qq && sudo pip3 install pyelftools; fi", "end": "if [[ \"$TARGET\" == \"generic\" || \"$TARGET\" == \"freertos\" ]]; then wget http://ppa.launchpad.net/team-gcc-arm-embedded/ppa/ubuntu/pool/main/g/gcc-arm-none-eabi/${GCC_ARM_COMPILER_PACKAGE} && sudo dpkg -i ${GCC_ARM_COMPILER_PACKAGE}; fi", "alternative end": "if [[ \"$TARGET\" == \"freertos\" ]]; then wget $FREERTOS_ZIP_URL && pwd && ls && unzip FreeRTOSv10.0.1.zip > /dev/null; fi"}], "xindong/frontd": [], "skaes/time_bandits": [{"start": "gem install bundler", "end": "bundle exec rake appraisal:test", "alternative end": "redis-server"}], "xing/xing-android-sdk": [], "xamoom/Morpheus": [], "EurekaCommunity/ImageRow": [{"start": "brew update", "end": "carthage update --platform iOS", "alternative end": "gem install xcpretty --no-document --quiet"}, {"start": "gem install xcpretty --no-document --quiet", "end": "xcodebuild clean build -project ImageRow.xcodeproj -scheme \"$SCHEME\" -sdk \"$SDK\" -destination \"$DESTINATION\" -configuration Debug ONLY_ACTIVE_ARCH=NO test | xcpretty -c", "alternative end": "xcodebuild test -project ImageRow.xcodeproj -scheme \"$SCHEME\" -sdk \"$SDK\" -destination \"$DESTINATION\" -configuration Debug ONLY_ACTIVE_ARCH=NO test | xcpretty -c"}], "xmartlabs/Eureka": [{"start": "brew update", "end": "set -o pipefail", "alternative end": "xcodebuild -version"}], "xmartlabs/Swift-Project-Template": [{"start": "brew update", "end": "cd Project-iOS/XLProjectName && bundle install && pod repo update && pod install", "alternative end": "xctool clean build -workspace XLProjectName.xcworkspace -scheme XLProjectName -sdk iphonesimulator | xcpretty"}], "xmartlabs/XLActionController": [], "xogroup/felicity": [], "xpressengine/xe-core": [{"start": "travis_retry npm install -g grunt-cli", "end": "if [ $(phpenv version-name) != \"5.3\" ]; then composer install; fi", "alternative end": "if [ $(phpenv version-name) != \"5.3\" ]; then mysql -e 'create database xe_test;'; fi"}], "xmartlabs/MetalPerformanceShadersProxy": [{"start": "gem install xcpretty --no-rdoc --no-ri --no-document --quiet", "end": "xcodebuild clean -workspace MetalPerformanceShaders.xcworkspace -scheme \"$SCHEME\" -sdk \"$SDK\" -destination \"$DESTINATION\" -configuration Debug ONLY_ACTIVE_ARCH=NO CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO | xcpretty -c; test ${PIPESTATUS[0]} -eq 0", "alternative end": "xcodebuild build -workspace MetalPerformanceShaders.xcworkspace -scheme \"$SCHEME\" -sdk \"$SDK\" -destination \"$DESTINATION\" -configuration Debug ONLY_ACTIVE_ARCH=NO CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO | xcpretty -c; test ${PIPESTATUS[0]} -eq 0"}], "enhavo/enhavo": [{"start": "sudo apt-get install -y php-mysql", "end": "mysql -e 'create database enhavo_test'", "alternative end": "composer install --no-interaction --optimize-autoloader --prefer-dist"}], "xpressengine/xpressengine": [], "xmartlabs/XLPagerTabStrip": [{"start": "brew update", "end": "set -o pipefail", "alternative end": "xcodebuild -version"}], "xsolla/xsolla-sdk-php": [], "xmartlabs/Swift-Framework-Template": [{"start": "brew update", "end": "cd Framework-iOS && carthage update --platform iOS", "alternative end": "xcodebuild clean build -project XLProductName.xcodeproj -scheme \"$SCHEME\" -sdk \"$SDK\" -destination \"$DESTINATION\" -configuration Debug ONLY_ACTIVE_ARCH=NO test | xcpretty -c"}], "xmartlabs/Opera": [{"start": "brew update", "end": "if [ ${SCHEME} = ${IOS_FRAMEWORK_SCHEME} ]; then ./build_dependencies.sh --platform iOS; fi", "alternative end": "if [ ${SCHEME} = ${OSX_FRAMEWORK_SCHEME} ]; then ./build_dependencies.sh --platform OSX; fi"}], "xwp/wp-foo-bar": [{"start": "npm install", "end": "export DEV_LIB_PATH=vendor/xwp/wp-dev-lib/scripts", "alternative end": "export DIFF_HEAD=HEAD"}, {"start": "npm install", "end": "echo \"Running E2E tests with code coverage ...\"", "alternative end": "npm run env:start"}, {"start": "npm install", "end": "echo \"Running JS unit tests with code coverage ...\"", "alternative end": "npm run build:js"}], "xmartlabs/Bender": [{"start": "brew update", "end": "carthage update --platform iOS", "alternative end": "gem install xcpretty --no-rdoc --no-ri --no-document --quiet"}, {"start": "gem install xcpretty --no-rdoc --no-ri --no-document --quiet", "end": "xcodebuild clean -workspace Bender.xcworkspace -scheme \"$SCHEME\" -sdk \"$SDK\" -destination \"$DESTINATION\" -configuration Debug ONLY_ACTIVE_ARCH=NO CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO | xcpretty -c; test ${PIPESTATUS[0]} -eq 0", "alternative end": "xcodebuild build -workspace Bender.xcworkspace -scheme \"$SCHEME\" -sdk \"$SDK\" -destination \"$DESTINATION\" -configuration Debug ONLY_ACTIVE_ARCH=NO CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO | xcpretty -c; test ${PIPESTATUS[0]} -eq 0"}], "xwp/wp-dev-lib": [], "xwp/stream": [{"start": "npm install", "end": "npm run lint", "alternative end": "npm run phpunit"}], "xmartlabs/XLForm": [{"start": "gem install cocoapods --quiet", "end": "cd Tests && pod install && cd $TRAVIS_BUILD_DIR", "alternative end": "rake test"}], "xwp/wp-core-media-widgets": [], "xwp/wp-customize-inline-editing": [], "xwp/wp-docker": [{"start": "sudo apt-get install -y libxml2-utils", "end": "export TRAVIS_PHPUNIT_CONFIG=${TRAVIS_BUILD_DIR}/wp-tests/phpunit.xml.dist", "alternative end": "export DEV_LIB_PATH=dev-lib"}], "Yalantis/Persei": [], "yahoo/YangMingShan": [{"start": "gem install xcpretty -N --no-ri --no-rdoc", "end": "set -o pipefail && xcodebuild -project YangMingShanDemo.xcodeproj -scheme YangMingShanDemo -sdk iphonesimulator11.0 -destination 'platform=iOS Simulator,name=iPhone 6,OS=11.0' build test | xcpretty -c"}], "xwp/wp-customize-snapshots": [], "xwp/wp-customize-image-gallery-control": [], "yahoo/fake-server": [], "yahoo/AppDevKit": [{"start": "gem install xcpretty", "end": "set -o pipefail && xcodebuild -workspace AppDevKit.xcworkspace -scheme AppDevKit -sdk iphonesimulator12.0 -destination 'platform=iOS Simulator,name=iPhone 6,OS=10.0' build test GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=YES GCC_GENERATE_TEST_COVERAGE_FILES=YES | xcpretty -c", "alternative end": "bash <(curl -s https://codecov.io/bash)"}], "yahoo/guerilla": [], "xwp/wp-plugin-dependencies": [], "xwp/wp-js-widgets": [], "yahoo/CaffeOnSpark": [], "xwp/travel": [], "yahoo/context-parser": [], "yahoo/coname": [], "zordius/fluxex": [], "borschik/borschik": [], "yapstudios/YapImageManager": [{"start": "gem update cocoapods", "end": "export LANG=en_US.UTF-8", "alternative end": "pod update"}], "Yalantis/FastEasyMapping": [{"start": "gem install xcpretty -N --no-document", "end": "pod install", "alternative end": "WORKSPACE=FastEasyMapping.xcworkspace"}], "yandex/gixy": [{"start": "pip install -r requirements.txt", "end": "nosetests --with-coverage --cover-package gixy -v", "alternative end": "if [[ $TRAVIS_PYTHON_VERSION != '2.6' ]]; then flake8 --max-line-length=120 setup.py gixy; fi"}], "cocaine/cocaine-framework-python": [{"start": "pip install -U pip wheel setuptools tox tox-travis python-coveralls", "end": "tox", "alternative end": "cocaine:qDewv6ZVDt0TciQeNdE47GqG"}], "Yelp/swagger_spec_validator": [{"start": "pip install tox coveralls", "end": "tox", "alternative end": "if [ \"$TOXENV\" == \"cover\" ]; then coveralls; fi"}], "Yelp/osxcollector": [{"start": "sudo pip install tox setuptools wheel twine", "end": "tox -epy27", "alternative end": "pypi"}], "SeasideSt/Parasol": [], "Yelp/py_zipkin": [{"start": "pip install -U pip==18.0", "end": "tox", "alternative end": "coveralls"}], "Yelp/amira": [{"start": "sudo pip install tox-travis", "end": "pypi", "alternative end": "sdist bdist_wheel"}], "Yelp/kafka-utils": [{"start": "pip install tox tox-travis", "end": "tox -i https://pypi.python.org/simple", "alternative end": "pypi"}], "yandex/pandora": [], "gemini-testing/html-reporter": [], "yetanalytics/xapi-schema": [], "cocaine/cocaine-framework-go": [], "Yelp/pyramid_zipkin": [{"start": "pip install tox coveralls", "end": "tox", "alternative end": "coveralls"}], "YetiForceCompany/YetiForceCRM": [], "Yelp/beans": [{"start": "pip install tox", "end": "cd api/", "alternative end": "ls tests/"}], "catboost/catboost": [{"start": "# `ya` provides it's own compiler toolchains, `CC` and CXX` environment variables will override\n# them so we have to unset them.\n#\nunset CC\nunset CXX\npip install webdavclient || sudo pip2 install webdavclient\n", "end": "linux", "alternative end": "trusty"}], "yandex/tomita-parser": [], "robfig/soy": [], "yandex/ozo": [{"start": "pip3 install --user --upgrade pip", "end": "linux", "alternative end": "xenial"}, {"start": "brew update", "end": "BUILD_ARGS='clang debug'", "alternative end": "scripts/build.sh ${BUILD_ARGS}"}], "yandex/pgcheck": [{"start": "sudo pip install -r tests/requirements.txt", "end": "go get github.com/lib/pq github.com/spf13/viper github.com/stretchr/testify/assert", "alternative end": "go test"}], "yandex/rep": [{"start": "if [[ $TRAVIS_OS_NAME == 'osx' ]]; then brew update > /dev/null; rvm get head; brew install xz; which python; brew install homebrew/science/root; virtualenv venv -p python${PYTHON_VERSION}; source venv/bin/activate; echo 'source THISROOT.sh'; source $(brew --prefix root)/libexec/thisroot.sh; otool -L $(brew --prefix root)/lib/root/libPyROOT.so; sudo install_name_tool -change /System/Library/Frameworks/Python.framework/Versions/2.7/Python /usr/local/Frameworks/Python.framework/Versions/2.7/Python $(brew --prefix root)/lib/root/libPyROOT.so; echo 'TRY IMPORT ROOT'; python -c 'import ROOT'; pip install pip -U; pip install -r requirements.txt; pip install rootpy root_numpy; python -c 'import root_numpy'; mkdir -p $HOME/.matplotlib; echo 'backend:TkAgg' > $HOME/.matplotlib/matplotlibrc; else source ci/install_rep_environment.sh $REP_PYTHON_VERSION; conda list; fi", "end": "which python", "alternative end": "echo $LD_LIBRARY_PATH"}, {"start": "pip install .", "end": "ls -alR ./howto/", "alternative end": "set -e"}], "yandex/yandex-tank": [{"start": "pip install --upgrade setuptools", "end": "flake8 --config .flake8 .", "alternative end": "python setup.py test"}], "cocaine/cocaine-tools": [{"start": "sudo apt-get install zookeeper zookeeperd -y", "end": "docker pull noxiouz/cocaine", "alternative end": "docker run -d --net=host noxiouz/cocaine && docker ps"}, {"start": "pip install tox flake8", "end": "tox && python setup.py nosetests", "alternative end": "cocaine:qDewv6ZVDt0TciQeNdE47GqG"}], "cocaine/cocaine-core": [], "yandex/odyssey": [], "Yoast/comment-hacks": [], "YooZoo/protoapi": [], "iuap-design/tinper-bee": [], "yopeso/Taylor": [], "yandex/pgmigrate": [], "YotpoLtd/metorikku": [], "iuap-design/tinper-neoui": [{"start": "npm install -g webpack", "end": "npm run product"}], "yandex/yoctodb": [], "Yubico/ykneo-oath": [{"start": "sudo apt-get install junit4 ant-optional", "end": "curl -L https://github.com/licel/jcardsim/raw/jc2.2.2/jcardsim-2.2.2-all.jar -o test/lib/jcardsim-2.2.2-all.jar", "alternative end": "ant -Dtest.build.mock=1 test"}], "youzan/zan": [{"start": "make install", "end": "exit 0"}], "Yubico/ykneo-openpgp": [], "youzan/zan-proxy": [{"start": "npm install\n", "end": "npm run test\n"}], "youzan/nsq": [], "bem/bh": [], "yandex-qatools/builders": [{"start": "pip install tox", "end": "tox", "alternative end": "pupssman@gmail.com"}], "gemini-testing/hermione": [], "youzan/open-sdk-php": [], "youzan/TitanRecyclerView": [], "yandex/porto": [], "youzan/zent": [], "yunify/qingcloud-sdk-go": [{"start": "pushd make-4.0 && sudo make install && popd", "end": "popd", "alternative end": "/usr/local/bin/make --version"}], "youzan/vant-weapp": [], "YunoJuno/django-request-token": [{"start": "pip install tox-travis", "end": "tox"}], "yunify/qsctl": [], "yunify/snips": [], "youzan/go-nsq": [], "YunoJuno/django-request-profiler": [{"start": "pip install tox-travis", "end": "tox"}], "yunify/qsftpd": [], "yunify/qsfs-fuse": [{"start": "sudo apt-get install -qy libfuse-dev", "end": "mkdir build", "alternative end": "cd build"}], "YunoJuno/elasticsearch-django": [{"start": "pip install tox-travis", "end": "tox", "alternative end": "9.6"}], "decosoftware/deco-ide": [{"start": "brew update", "end": "git clone https://github.com/creationix/nvm.git /tmp/.nvm; source /tmp/.nvm/nvm.sh; nvm install $NODE_VERSION; nvm use --delete-prefix $NODE_VERSION;", "alternative end": "./build/install-dependencies.sh"}], "openpitrix/dashboard": [], "vntchain/go-vnt": [], "openpitrix/openpitrix": [], "yunify/qingcloud-sdk-python": [{"start": "pip install future", "end": "python setup.py install", "alternative end": "pytest"}], "yunify/metad": [], "yunify/qingstor-sdk-go": [], "yunify/qingstor-sdk-java": [], "yunify/hostnic-cni": [], "yunionio/onecloud": [], "zapier/react-element-portal": [], "zapier/zapier-platform-cli": [], "zapier/django-rest-hooks": [{"start": "pip install -r devrequirements_${DJANGO_VERSION}.txt", "end": "python runtests.py", "alternative end": "3.3"}, {"start": "pip install wheel", "end": "python setup.py sdist bdist_wheel", "alternative end": "pypi"}], "zapier/email-reply-parser": [], "zalando/expan": [{"start": "pip install tox coveralls", "end": "python", "alternative end": "2.7"}], "zalando/gulp-check-unused-css": [], "zapier/transformer": [{"start": "pip install -r requirements.txt", "end": "bash run_tests.sh"}], "zapier/litdoc": [], "zapier/django-drip": [{"start": "pip install \"Django>=${DJANGO_VERSION},<${DJANGO_VERSION}.99\"", "end": "python manage.py test drip", "alternative end": "3.3"}], "zapier/formatic": [], "zapier/redux-router-kit": [], "zalando/gin-oauth2": [], "zalando/tokens": [{"start": "pip install --user codecov", "end": "mvn install", "alternative end": "mvn coveralls:report -Ptravis"}], "zalando/python-nsenter": [{"start": "pip install -r requirements.txt", "end": "python setup.py test", "alternative end": "python setup.py flake8"}], "zapier/zapier-platform-core": [{"start": "pip install --user awscli", "end": "PATH=$HOME/.local/bin:$PATH", "alternative end": "xNr5WtDD37r2iYQBxnnMULuVlKfSNfC9PvuW4dwDtiJcVeeOL/bw8B2g54gxQEEMQWg6gvxqUAVegoRKAA2p9eQtagdtbMu5rasKJ3jKjhOCWCxyskPE4kheJJ6vWkbpm+O4XPAzHjuSWqt7rrF4RTNAIpilggD87A2Dj/GGyHi6+LP2BGo1dbTRU3mBn03AnyGbB6PSleTsPdi+JYSc8bAhcA6KcyQ/2RiaDFPOdsIWU0ZniY+Pur2v4szIVNrHr2ENPUryHlsQjfDMH/B7sO7BPxvQWstza2qpawCHt0K8irgaPLp3jDY0LUWRlUgSeZe1pXvjSWzqp+GhgxVTI6XyVWn355LnFS8pII7eQCipMe1TXaZuNwKvR6n5pPiCDgKrkA7jTZYWeqaYfhoOmTr1qmLdcnKXgEGk4A3ZWBW2bdCi8/L7gL9qM4Md0ph0qzX/id7fWK+1SD1V8BVhKZEsB6yKAWJXvEFUezlYIy1vst/kHt6hSnCfS4njS8iNX+M61RrbzmMxHcIMIksNW4birWi1Z8uRmT6mlCfldhiY+PRUYcKbfd+FmxpnJAnO4grUP177zzNuvLAmdvFFiM8AZ8rtgqmIyvD2PPJNjtFWlPYc4ZvsOHo2DN3qf00lliFPo01DCGOWMB+6+PfjsrEDdPGBL+n7Bx6iDEEiDUM="}], "zeiss/precise-ui": [], "zalando/innkeeper": [], "zendesk/sdk_demo_app_android": [], "Zalando-Incubator/Transformer": [{"start": "pip install --upgrade pip==18.1", "end": "poetry install", "alternative end": "make -f Makefile.ci"}], "zendesk/zendesk_apps_tools": [{"start": "gem install bundler -v 1.17.3", "end": "2.3.3", "alternative end": "2.4.0"}], "CyberDem0n/bg_mon": [{"start": "sudo pip install --upgrade cpp-coveralls", "end": "set -e\nexport PATH=/usr/lib/postgresql/$PG/bin:$PATH\nsudo PATH=$PATH make USE_PGXS=1 ENABLE_GCOV=1 install\nsudo PATH=$PATH make USE_PGXS=1 ENABLE_GCOV=1 with_llvm=no clean all install\nbash -x test.sh\nif grep -E '(ERROR|FATAL)' test_cluster?/*log/postgresql*.log | grep -Ev '(no COPY in progress|could not connect to|could not send|database system is shutting|database system is starting up)'; then exit 1; fi\n", "alternative end": "coveralls --gcov-options '\\-lr'"}], "zendesk/belvedere": [], "yglukhov/nimx": [], "zalando/zappr": [{"start": "npm install", "end": "export DISPLAY=:99.0", "alternative end": "psql -c \"ALTER USER postgres WITH PASSWORD 'postgres';\" -U postgres"}], "Zalando-Incubator/hexo-theme-doc": [{"start": "cd ../hexo-theme-doc-site && npm install -q && npm link hexo-theme-doc", "end": "cd $TRAVIS_BUILD_DIR", "alternative end": "npm run lint -s"}], "zeroc-ice/freeze": [], "zalando/dress-code": [{"start": "npm install -g gulp", "end": "npm run lint", "alternative end": "if [[ \"$TRAVIS_PULL_REQUEST_BRANCH\" =~ ^release\\/.*$ ]]; then git lfs pull; npm run test:minified; else npm run build; fi"}], "zeroc-ice/ice-builder-gradle": [{"start": "sudo apt-get update -q", "end": "IQdjoLlyS+p0NLlguni6V594nG7Yr6RI0YHJ/d19ITZ/6sGTtSxgUL1ekT8O0eBqjg7MtyPX35xioHA3QkklX5Sqh7dBCByChjegQApxTjsSRp7oB/mzaVGNbmWRXNOUEi/8INP+HAaBoHv722WHTbaYNm4ZEnhtWA0v6HpW5Fs="}], "zeroturnaround/zt-zip": [], "Zalando-Incubator/docker-locust": [], "zalando/intellij-swagger": [], "Zalando-Incubator/cluster-lifecycle-manager": [], "zhihu/redis-shard": [], "zhihu/cuBERT": [{"start": "pip install numpy cython wheel", "end": "cd build", "alternative end": "cmake .. -DcuBERT_ENABLE_MKL_SUPPORT=ON -DCMAKE_INSTALL_PREFIX=../install"}, {"start": "make install", "end": "OMP_NUM_THREADS=4 make test", "alternative end": "cd ../python"}], "zalando/elm-street-404": [{"start": "npm install -g elm@0.18.0 uglify-js@2.6.1", "end": "elm-package install -y", "alternative end": "bash ./gh-pages.sh"}], "zhihu/kids": [], "Zalando-Incubator/es-operator": [], "zhihu/Matisse": [], "Zalando-Incubator/authmosphere": [], "DappLedger/AnnChain": [], "zhihu/griffith": [], "binduwavell/generator-alfresco": [{"start": "npm install", "end": "if [[ \"${NODE_VERSION}\" == 'v8' ]]; then npm run codecov; else npm run test; fi", "alternative end": "https://webhooks.gitter.im/e/caa35ceb4dd217d50b26"}], "zalando/friboo": [], "zalando/beard": [], "Zalando-Incubator/tessellate": [{"start": "npm install", "end": "npm run flow-check", "alternative end": "npm test"}], "scalaris-team/scalaris": [], "Zalando-Incubator/spark-json-schema": [], "Zalando-Incubator/stackset-controller": [], "Toumorokoshi/transmute-core": [{"start": "pip install coveralls", "end": "./uranium test", "alternative end": "coveralls"}], "zalando/spring-cloud-config-aws-kms": [], "zalando/zalenium": [{"start": "sudo apt-get install jq", "end": "wget -O ~/codacy-coverage-reporter-assembly-latest.jar https://oss.sonatype.org/service/local/repositories/releases/content/com/codacy/codacy-coverage-reporter/2.0.2/codacy-coverage-reporter-2.0.2-assembly.jar", "alternative end": "mvn clean package -Pcoverage-report"}], "zalando/go-keyring": [], "Zalando-Incubator/kopf": [{"start": "sudo apt-get update -y", "end": "tools/minikube-for-travis.sh", "alternative end": "tools/kubernetes-client.sh"}], "zalando/zally": [{"start": "sudo apt-get install jq", "end": "wget -O ~/codacy-coverage-reporter-assembly-latest.jar https://github.com/codacy/codacy-coverage-reporter/releases/download/2.0.2/codacy-coverage-reporter-2.0.2-assembly.jar", "alternative end": "True"}], "zalando/tailor": [], "zalando/patroni": [{"start": "set -e\n\nif [[ $TEST_SUITE == \"behave\" ]]; then\n    function get_consul() {\n        CC=~/mycache/consul_${CONSULVERSION}\n        if [[ ! -x $CC ]]; then\n            curl -L https://releases.hashicorp.com/consul/${CONSULVERSION}/consul_${CONSULVERSION}_linux_amd64.zip \\\n                | gunzip > $CC\n            [[ ${PIPESTATUS[0]} == 0 ]] || return 1\n            chmod +x $CC\n        fi\n        ln -s $CC consul\n    }\n\n    function get_etcd() {\n        EC=~/mycache/etcd_${ETCDVERSION}\n        if [[ ! -x $EC ]]; then\n            rm -rf ~/mycache/etcd_*\n            curl -L https://github.com/coreos/etcd/releases/download/v${ETCDVERSION}/etcd-v${ETCDVERSION}-linux-amd64.tar.gz \\\n                | tar xz -C . --strip=1 --wildcards --no-anchored etcd\n            [[ ${PIPESTATUS[0]} == 0 ]] || return 1\n            mv etcd $EC\n        fi\n        ln -s $EC etcd\n    }\n\n    function get_etcd3() {\n        get_etcd\n    }\n\n    function get_kubernetes() {\n        wget -O localkube \"https://storage.googleapis.com/minikube/k8sReleases/v1.7.0/localkube-linux-amd64\"\n        chmod +x localkube\n        sudo nohup ./localkube --logtostderr=true --enable-dns=false > localkube.log 2>&1 &\n\n        echo \"Waiting for localkube to start...\"\n        if ! timeout 120 sh -c \"while ! curl -ks http://127.0.0.1:8080/ >/dev/null; do sleep 1; done\"; then\n            sudo cat localkube.log\n            echo \"localkube did not start\"\n            exit 1\n        fi\n        echo \"Check certificate permissions\"\n        sudo chmod 644 /var/lib/localkube/certs/*\n        sudo ls -altr /var/lib/localkube/certs/\n\n        echo \"Set up .kube/config\"\n        mkdir ~/.kube\n        echo -e \"apiVersion: v1\\nclusters:\\n- cluster:\\n    certificate-authority: /var/lib/localkube/certs/ca.crt\\n    server: https://127.0.0.1:8443\\n  name: local\\ncontexts:\\n- context:\\n    cluster: local\\n    user: myself\\n  name: local\\ncurrent-context: local\\nkind: Config\\npreferences: {}\\nusers:\\n- name: myself\\n  user:\\n    client-certificate: /var/lib/localkube/certs/apiserver.crt\\n    client-key: /var/lib/localkube/certs/apiserver.key\\n\" > ~/.kube/config\n    }\n\n    function get_exhibitor() {\n        ZC=~/mycache/zookeeper-${ZKVERSION}\n        if [[ ! -d $ZC ]]; then\n            curl -L http://www.apache.org/dist/zookeeper/zookeeper-${ZKVERSION}/zookeeper-${ZKVERSION}.tar.gz | tar xz\n            [[ ${PIPESTATUS[0]} == 0 ]] || return 1\n            mv zookeeper-${ZKVERSION}/conf/zoo_sample.cfg zookeeper-${ZKVERSION}/conf/zoo.cfg\n            mv zookeeper-${ZKVERSION} $ZC\n        fi\n        $ZC/bin/zkServer.sh start\n        # following lines are 'emulating' exhibitor REST API\n        while true; do\n            echo -e 'HTTP/1.0 200 OK\\nContent-Type: application/json\\n\\n{\"servers\":[\"127.0.0.1\"],\"port\":2181}' \\\n                | nc -l 8181 &> /dev/null\n        done&\n    }\n\n    function get_raft() {\n        return 0\n    }\n\n    attempt_num=1\n    until get_${DCS}; do\n        [[ $attempt_num -ge 3 ]] && exit 1\n        echo \"Attempt $attempt_num failed! Trying again in $attempt_num seconds...\"\n        sleep $(( attempt_num++ ))\n    done\nfi\n\nfor pv in $PYVERSIONS; do\n    fpv=$(basename $(readlink $HOME/virtualenv/python$pv))\n    if [[ -d ~/mycache/${fpv} ]]; then\n        mv ~/virtualenv/${fpv} ~/virtualenv/${fpv}.bckp\n        mv ~/mycache/${fpv} ~/virtualenv/${fpv}\n    fi\n    source ~/virtualenv/python${pv}/bin/activate\n    # explicitly install all needed python modules to cache them\n    for p in '-r requirements.txt' 'psycopg2-binary behave codacy-coverage coverage coveralls flake8 mock pytest-cov pytest setuptools'; do\n        pip install $p --upgrade\n    done\ndone\n", "end": "for pv in $PYVERSIONS; do\n    source ~/virtualenv/python${pv}/bin/activate\n\n    if [[ $TEST_SUITE = \"behave\" ]]; then\n        echo Running integration tests using python${pv}\n        if ! PATH=.:/usr/lib/postgresql/9.6/bin:$PATH unbuffer $TEST_SUITE; then\n            # output all log files when tests are failing\n            grep . features/output/*_failed/*postgres?.*\n            exit 1\n        fi\n    else\n        echo Running unit tests using python${pv}\n        unbuffer $TEST_SUITE test\n        $TEST_SUITE flake8\n    fi\n    mv .coverage /tmp/.coverage.$pv\ndone\nmv /tmp/.coverage.* .\npython -m coverage combine\n\nset +e\n", "alternative end": "fpv=$(basename $(readlink $HOME/virtualenv/python3.6)) && mv $HOME/mycache/${fpv} $HOME/virtualenv/${fpv}"}], "Zalando-Incubator/kubernetes-log-watcher": [{"start": "pip install tox", "end": "tox"}], "zalando/pg_view": [{"start": "pip install -r requirements.txt", "end": "python setup.py test", "alternative end": "python setup.py flake8"}], "zalando/connexion": [{"start": "pip install --upgrade setuptools tox tox-travis coveralls", "end": "bionic", "alternative end": "tox"}], "Zalando-Incubator/perron": [], "zalando/ghe-backup": [{"start": "pip install -r python/requirements.txt", "end": "True", "alternative end": "nosetests -w python"}], "rdkmaster/jigsaw": [{"start": "npm install", "end": "mkdir -p $LOGS_DIR", "alternative end": "node build/scripts/check-demo-import.js"}], "zalando/grafter": [{"start": "pip install --user codecov", "end": "sbt -sbt-version 1.1.6 -scala-version $TRAVIS_SCALA_VERSION ';clean ;set every coverageEnabled := true ;testOnly -- xonly ;coverageReport; coverageAggregate' && codecov", "alternative end": "find $HOME/.sbt -name \"*.lock\" | xargs rm"}], "zte/Knitter": [{"start": "make install-extra", "end": "go get github.com/mattn/goveralls", "alternative end": "make verify"}], "Zalando-Incubator/bro-q": [{"start": "npm install", "end": "npm run build"}], "zumba/json-serializer": [], "zumba/mongounit": [], "zumba/angular-waypoints": [{"start": "npm install grunt-cli -g", "end": "bower install", "alternative end": "grunt;"}], "zalando-stups/stups-spring-oauth2-support": [{"start": "pip install --user codecov", "end": "mvn clean install", "alternative end": "codecov"}], "zumba/swivel": [], "zalando/restful-api-guidelines": [], "zumba/amplitude-php": [], "Zalando-Incubator/remora": [], "Zalando-Incubator/kube-metrics-adapter": []}